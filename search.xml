<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How To Implement Authentication in a Nuxt.js App</title>
      <link href="/2020/09/25/How-To-Implement-Auth-in-Nuxt/"/>
      <url>/2020/09/25/How-To-Implement-Auth-in-Nuxt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.digitalocean.com/community/tutorials/implementing-authentication-in-nuxtjs-app">Original published and copy-righted by Chimezie Enyinnaya</a><br><a href="https://assets.digitalocean.com/">View more on digitalocean.com</a></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this tutorial, you’ll implement authentication in a <a href="https://nuxtjs.org/">Nuxt.js</a> app using the <code>Auth</code> module.</p><p>For the purpose of this tutorial, you’ll be using <code>JWT</code> for authentication.</p><p>Below is a quick demo of what you’ll be building in this tutorial:</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/2tWhMLqrSl2lC07r3JA5_nuxt-auth-demo.gif" alt="Animated gif of the app showing a user signing in"></p><p>You can find the <a href="https://github.com/do-community/nuxt-auth-app">source code for this application at GitHub</a>.</p><p><strong>Warning:</strong> Several of the packages in this tutorial now contain dependencies with known vulnerabilities. In a production setting, you would resolve these issues by upgrading these packages, finding alternatives, or creating forked versions with patched fixes. However, within the limited context of a tutorial, it provides educational value as-is.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>To complete this tutorial, you will need:</p><ul><li>Node.js installed locally, which you can do by following <a href="https://www.digitalocean.com/community/tutorial_series/how-to-install-node-js-and-create-a-local-development-environment">How to Install Node.js and Create a Local Development Environment</a>.</li><li>A valid Git installation is optionally required for cloning the API, consult <a href="https://www.digitalocean.com/community/tutorials/how-to-contribute-to-open-source-getting-started-with-git">Getting Started with Git</a>.</li></ul><p>Some familiarity with Vue.js and Nuxt.js may be beneficial. You can <a href="https://www.digitalocean.com/community/tutorials/vuejs-server-side-rendering-with-nuxtjs">refer to this post</a> if you’re getting started with Nuxt.js.</p><p>This tutorial was verified with Node v13.13.0, npm v6.14.4, <code>vue</code> v2.6.11, and <code>nuxt</code> v2.12.2.</p><h2 id="Step-1-—-Spinning-up-a-Sample-API"><a href="#Step-1-—-Spinning-up-a-Sample-API" class="headerlink" title="Step 1 — Spinning up a Sample API"></a>Step 1 — Spinning up a Sample API</h2><p>You are free to use whatever framework that works best for you. However, for quick development, this tutorial will clone an API built with <a href="https://adonisjs.com/">AdonisJs</a>.</p><p>The API utilizes:</p><ul><li>JWT (<a href="https://en.wikipedia.org/wiki/JSON_Web_Token">JSON Web Tokens</a>) for authentication</li><li><a href="https://en.wikipedia.org/wiki/SQLite">SQLite</a></li><li><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> enabled</li></ul><p>The API has three endpoints:</p><ul><li><code>/register</code>: endpoint for user registration</li><li><code>/login</code>: endpoint for authenticating users</li><li><code>/me</code>: endpoint for getting details for the currently authenticated user and it is protected by an <code>auth</code> middleware, which means a user must be authenticated to access the endpoint</li></ul><p>First, run the following command in your terminal window:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/do-community/jwt-auth-api.git</span><br></pre></td></tr></table></figure><p>Copy</p><p>Then, navigate to the project directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jwt-auth-api</span><br></pre></td></tr></table></figure><p>Copy</p><p>And install the API dependencies:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Copy</p><p><strong>Note</strong>: When running install, you may encounter issues with <code>sqlite3</code> version <code>4.0.1</code> depending on the version of Node you are running. Refer to the <a href="https://github.com/mapbox/node-sqlite3/blob/master/CHANGELOG.md">changelog</a> to determine compatibility with your environment.</p><p>At the time of original publication, the latest version of Node was 10. One option is to downgrade your version of Node to <code>10.20.1</code> (with the understanding that it is nearing end-of-life support). Then, run <code>npm install</code>.</p><p>A second option is to remove the <code>package-lock.json</code> file which will cause the system to look for <code>4.2.0</code> which is supported up to Node 13. You may need to also downgrade your version of Node to <code>13.13.0</code>. Then, run <code>npm install</code>.</p><p>A third option would be to modify <code>package.json</code> to a version of <code>sqlite3</code> supported by your current version of Node, remove <code>package-lock.json</code>, and run <code>npm install</code>. However, at the time of testing, <code>5.0.0</code> is not yet released to handle Node 14+ support.</p><p>Other symptoms of incompatibility include the following errors: <code>TypeError: Cannot read property &#39;data&#39; of undefined</code> and <code>Error: Cannot find module &#39;[...]/node_modules/sqlite3/lib/binding/[...]/node_sqlite3.node&#39;</code>.</p><p>Next, rename <code>.env.example</code> to <code>.env</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> .env.example .<span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>Copy</p><p>And generate an <code>APP_KEY</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx @adonisjs/cli@4.0.12 key:generate</span><br></pre></td></tr></table></figure><p>Copy</p><p>You should see:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Outputgenerated: unique APP_KEY</span><br></pre></td></tr></table></figure><p>Copy</p><p>Once that’s coomplete, let’s run the migrations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx @adonisjs/cli@4.0.12 migration:run</span><br></pre></td></tr></table></figure><p>Copy</p><p>Now, you can start the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ensure that you are in the `jwt-auth-api` project directory</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>Copy</p><p>You can access the API on <code>http://127.0.0.1:3333/api</code>. Leave this running in a terminal window for the rest of the duration of the tutorial.</p><h2 id="Step-2-—-Creating-a-Nuxt-js-App"><a href="#Step-2-—-Creating-a-Nuxt-js-App" class="headerlink" title="Step 2 — Creating a Nuxt.js App"></a>Step 2 — Creating a Nuxt.js App</h2><p>Now, you can create a Nuxt.js app. Open a new terminal window and use <code>vue-cli</code> to initialize a new Vue project with the Nuxt starter template:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx vue-cli@2.9.6 init nuxt/starter nuxt-auth</span><br></pre></td></tr></table></figure><p>Copy</p><p><strong>Note:</strong> At the time of testing, <code>vue-cli</code> is deprecated. <code>@vue/cli</code> is the current command line tool for Vue projects. And <code>@vue/cli-init</code> is the recommended approach for legacy <code>vue-cli</code> projects. However, <code>create-nuxt-app</code> is the recommended approach for modern Nuxt projects.</p><p>Next, you need to navigate to the project directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nuxt-auth</span><br></pre></td></tr></table></figure><p>Copy</p><p>And install the dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Then, you can launch the app:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>Copy</p><p>The app should be running on <code>http://localhost:3000</code>. You can view the application in a web browser to see the default Vue application created by <code>vue-cli</code>.</p><h2 id="Step-3-—-Installing-Necessary-Nuxt-js-Modules"><a href="#Step-3-—-Installing-Necessary-Nuxt-js-Modules" class="headerlink" title="Step 3 — Installing Necessary Nuxt.js Modules"></a>Step 3 — Installing Necessary Nuxt.js Modules</h2><p>Now, let’s install the Nuxt.js modules that you’ll be needing for your app. You’ll be using the <a href="https://auth.nuxtjs.org/">Nuxt Auth module</a> and the <a href="https://axios.nuxtjs.org/">Nuxt Axios module</a>, since the <code>auth</code> module makes use of Axios internally:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ensure that you are in the `nuxt-auth` project directory</span></span><br><span class="line">npm install @nuxtjs/auth@4.5.1 @nuxtjs/axios@5.3.1 --save</span><br></pre></td></tr></table></figure><p>Copy</p><p>Once that’s completed, open <code>nuxt.config.js</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano nuxt.config.js</span><br></pre></td></tr></table></figure><p>Copy</p><p>Add the code below to <code>nuxt.config.js</code>:</p><p>nuxt.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">modules</span>: [</span><br><span class="line">    <span class="string">&#x27;@nuxtjs/axios&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@nuxtjs/auth&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p><strong>Note:</strong> At this point, newer versions of Nuxt may encounter the error: <code>Enable vuex store by creating &#39;store/index.js&#39;</code>. This error can be resolved by <a href="https://github.com/nuxt-community/auth-module/issues/104">adding an empty <code>index.js</code> file to the <code>store</code> directory</a>.</p><p>Next, you need to set up the modules. Paste the code below into <code>nuxt.config.js</code>:</p><p>nuxt.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">axios</span>: &#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:3333/api&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">strategies</span>: &#123;</span><br><span class="line">      <span class="attr">local</span>: &#123;</span><br><span class="line">        <span class="attr">endpoints</span>: &#123;</span><br><span class="line">          <span class="attr">login</span>: &#123; <span class="attr">url</span>: <span class="string">&#x27;login&#x27;</span>, <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="attr">propertyName</span>: <span class="string">&#x27;data.token&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">user</span>: &#123; <span class="attr">url</span>: <span class="string">&#x27;me&#x27;</span>, <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="attr">propertyName</span>: <span class="string">&#x27;data&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">logout</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>Here, you set the base URL that Axios will use when making requests. In our case, we are referencing the sample API we set up earlier.</p><p>Then, you define the authentication endpoints for the <code>local</code> strategy corresponding to those on your API:</p><ul><li>On successful authentication, the token will be available in the response as a <code>token</code> object inside a <code>data</code> object.</li><li>Similarly, the response from the <code>/me</code> endpoint will be inside a <code>data</code> object.</li><li>Lastly, you set <code>logout</code> to <code>false</code> since your API doesn’t have an endpoint for logout. You’ll just remove the token from localStorage when a user logs out.</li></ul><h2 id="Step-4-—-Creating-a-Navbar-Component"><a href="#Step-4-—-Creating-a-Navbar-Component" class="headerlink" title="Step 4 — Creating a Navbar Component"></a>Step 4 — Creating a Navbar Component</h2><p>To style your app, you can make use of <a href="https://bulma.io/">Bulma</a>.</p><p>Open <code>nuxt.config.js</code> and paste the code below within the <code>link</code> object that is inside the <code>head</code> object:</p><p>nuxt.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">head</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    link [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>,</span><br><span class="line">        <span class="attr">href</span>: <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>Now, let’s create the Navbar component:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano components/Navbar.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>And add the following code:</p><p>components&#x2F;Navbar.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar is-light&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Nuxt Auth<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button navbar-burger&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-end&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item has-dropdown is-hoverable&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              My Account</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-dropdown&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span>My Profile<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;navbar-divider&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>Copy</p><p>The Navbar component contains links to <code>login</code>, <code>register</code>, <code>profile</code>, and <code>logout</code>.</p><p>Next, let’s update the default layout to make use of the <code>Navbar</code> component.</p><p>Open <code>default.vue</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano layouts/default.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>And replace the content with the following:</p><p>layouts&#x2F;default.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Navbar</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nuxt</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Navbar</span> <span class="keyword">from</span> <span class="string">&#x27;~/components/Navbar&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Navbar</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Copy</p><p>Also, let’s update the homepage.</p><p>Open <code>index.vue</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano pages/index.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>And replace the content with the following:</p><p>pages&#x2F;index.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Nuxt Auth<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>Copy</p><p>At this point, you should have an application that displays a title of <code>&quot;Nuxt Auth&quot;</code> with a header bar with navigation links:</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/Y27FZj1TNm6tj0skgdhV_homepage.png" alt="App page with title and header bar"></p><h2 id="Step-5-—-Handling-User-Registration"><a href="#Step-5-—-Handling-User-Registration" class="headerlink" title="Step 5 — Handling User Registration"></a>Step 5 — Handling User Registration</h2><p>Inside the <code>pages</code> directory, create a new <code>register.vue</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano pages/register.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>And add the following code:</p><p>pages&#x2F;register.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column is-4 is-offset-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title has-text-centered&quot;</span>&gt;</span>Register!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Notification</span> <span class="attr">:message</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">class</span>=<span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">required</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">class</span>=<span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">v-model</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">class</span>=<span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button is-dark is-fullwidth&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;has-text-centered&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Already got an account? <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Notification</span> <span class="keyword">from</span> <span class="string">&#x27;~/components/Notification&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Notification</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">error</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">post</span>(<span class="string">&#x27;register&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">email</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">loginWith</span>(<span class="string">&#x27;local&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">email</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">error</span> = e.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Copy</p><p>This contains a form with three fields: <code>username</code>, <code>email</code>, and <code>password</code>. Each field is bound to corresponding data on the component. When the form is submitted, a <code>register</code> method will be called. Using the Axios module, you make a post request to the <code>/register</code> endpoint, passing along the user data. If the registration was successful, you make use of the Auth module’s <code>loginWith()</code>, using the <code>local</code> strategy and passing the user data to log the user in. Then, you redirect the user to the homepage. If there is an error during the registration, you set the <code>error</code> data as the error message gotten from the API response.</p><p>If there is an error, the error message is displayed by a Notification component.</p><p>Create a new <code>Notification.vue</code> file inside <code>components</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano components/Notifaction.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>And paste the code below in it:</p><p>components&#x2F;Notification.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;notification is-danger&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Notification&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Copy</p><p>The Notification component accepts a <code>message</code> props, which is the error message.</p><p>Now, you can test out user registration:</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/wOTj1xspRjiwMsaiWKt5_register.png" alt="Register page with Username, Email, and Password fields"></p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/qsHgdfDIR3ijyirZVqu4_register_failed.png" alt="Register page but with a notification message to the user that there was an error"></p><h2 id="Step-6-—-Handling-LoggedUsers-Logged-In-and-Logged-Out"><a href="#Step-6-—-Handling-LoggedUsers-Logged-In-and-Logged-Out" class="headerlink" title="Step 6 — Handling LoggedUsers Logged In and Logged Out"></a>Step 6 — Handling LoggedUsers Logged In and Logged Out</h2><p>Upon successful registration, users should be logged in but there is currently no way for the app to know whether users are logged in or not. So let’s fix that by updating the Navbar component and adding some computed properties.</p><p>Before you do just that, let’s first activate the Vuex store by creating an <code>index.js</code> file inside the <code>store</code> directory. The Auth module stores user authentication status as well as user details inside Vuex state in an <code>auth</code> object. So you can check if a user is logged in or not with <code>this.$store.state.auth.loggedIn</code>, which will either return <code>true</code> or <code>false</code>. Similarly, you can get a user’s details with <code>this.$store.state.auth.user</code>, which will be <code>null</code> if no user is logged in.</p><p><strong>Note:</strong> You can also access the user authentication status as well as the user details directly with the Auth module using <code>this.$auth.loggedIn</code> and <code>this.$auth.user</code> respectively.</p><p>Since you might want to use the computed properties in multiple places in your app, let’s create store getters.</p><p>Open <code>index.js</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano store/index.js</span><br></pre></td></tr></table></figure><p>Copy</p><p>And paste the code below in it:</p><p>store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="title function_">isAuthenticated</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">auth</span>.<span class="property">loggedIn</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loggedInUser</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">auth</span>.<span class="property">user</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>Here, you create two getters. The first one (<code>isAuthenticated</code>) will return the authentication status of a user and the second (<code>loggedInUser</code>) will return the details or the logged in user.</p><p>Next, let’s update the Navbar component to make use of the getters. Replace the content of <code>components/Navbar.vue</code> with the following:</p><p>components&#x2F;Navbar.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar is-light&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Nuxt Auth<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button navbar-burger&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-end&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item has-dropdown is-hoverable&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isAuthenticated&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;&#123; loggedInUser.username &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-dropdown&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span>My Profile<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;navbar-divider&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;isAuthenticated&#x27;</span>, <span class="string">&#x27;loggedInUser&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Copy</p><p>You create the computed properties by using the spread operator (<code>...</code>) to extract the getters from <code>mapGetters</code>. Then using <code>isAuthenticated</code>, you display the user menu or links to <code>login</code> or <code>register</code> depending on whether the user is logged in or not. Also, you use <code>loggedInUser</code> to display the authenticated user username.</p><p>Now, if you give your app a refresh, you should see something similar to below:</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/NwqCBhzrSxysvLV832HE_loggedin.png" alt="App page with the user&#39;s username in the header"></p><h2 id="Step-7-—-Handling-User-Log-In"><a href="#Step-7-—-Handling-User-Log-In" class="headerlink" title="Step 7 — Handling User Log In"></a>Step 7 — Handling User Log In</h2><p>Now, let’s allow returning users the ability to log in.</p><p>Create a new <code>login.vue</code> file inside the <code>pages</code> directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano pages/login.vue</span><br></pre></td></tr></table></figure><p>And paste the code below in it:</p><p>pages&#x2F;login.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column is-4 is-offset-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title has-text-centered&quot;</span>&gt;</span>Welcome back!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Notification</span> <span class="attr">:message</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">class</span>=<span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">v-model</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">class</span>=<span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button is-dark is-fullwidth&quot;</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;has-text-centered&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              Don&#x27;t have an account? <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Notification</span> <span class="keyword">from</span> <span class="string">&#x27;~/components/Notification&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Notification</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">error</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">loginWith</span>(<span class="string">&#x27;local&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">email</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">error</span> = e.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Copy</p><p>This is quite similar to the <code>register</code> page. The form contains two fields: <code>email</code> and <code>password</code>. When the form is submitted, a <code>login</code> method will be called. Using the Auth module <code>loginWith()</code> and passing along the user data, you log the user in. If the authentication was successful, you redirect the user to the homepage. Otherwise, set <code>error</code> to the error message gotten from the API response. Again, you are using the Notification component from earlier on to display the error message.</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/neC1nzCQeeBX5jgZZskQ_login.png" alt="App Welcome Back page containing two fields: email and password"></p><h2 id="Step-8-—-Displaying-the-User-Profile"><a href="#Step-8-—-Displaying-the-User-Profile" class="headerlink" title="Step 8 — Displaying the User Profile"></a>Step 8 — Displaying the User Profile</h2><p>Let’s allow logged in users to view their profile.</p><p>Create a new <code>profile.vue</code> file inside the <code>pages</code> directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano pages/profile.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>And paste the code below in it:</p><p>pages&#x2F;profile.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>My Profile<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; loggedInUser.username &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; loggedInUser.email &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;loggedInUser&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Copy</p><p>Notice how you are using the <code>loggedInUser</code> getter from earlier on to display the user details.</p><p>Clicking on the <strong>My Profile</strong> link should result in a <strong>My Profile</strong> page being displayed.</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/UqKusiHSRCC2H7IcytjA_profile.png" alt="My Profile page displaying username and email"></p><h2 id="Step-9-—-Logging-Users-Out"><a href="#Step-9-—-Logging-Users-Out" class="headerlink" title="Step 9 — Logging Users Out"></a>Step 9 — Logging Users Out</h2><p>Update the logout link inside the Navbar component.</p><p>Open <code>Navbar.vue</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano components/Navbar.vue</span><br></pre></td></tr></table></figure><p>Copy</p><p>Modify the logout link to use <code>@click=&quot;logout&quot;</code>:</p><p>components&#x2F;Navbar.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;navbar-dropdown&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span>My Profile<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;navbar-divider&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span>  @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Copy</p><p>When the logout link is clicked, it will trigger a <code>logout</code> method.</p><p>Next, let’s add the <code>logout</code> method inside the script section of the Navbar component:</p><p>components&#x2F;Navbar.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">logout</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>You call the <code>logout()</code> of the Auth module. This will delete the user’s token from localstorage and redirect the user to the homepage.</p><h2 id="Step-10-—-Restricting-the-Profile-Page"><a href="#Step-10-—-Restricting-the-Profile-Page" class="headerlink" title="Step 10 — Restricting the Profile Page"></a>Step 10 — Restricting the Profile Page</h2><p>As it stands now, anybody can visit the <code>profile</code> page. And if the user is not logged in, it will result in an error.</p><p><img src="https://assets.digitalocean.com/articles/implementing-authentication-in-nuxtjs-app/9UMgSTQCQUqSTGAdb6nY_profile_error.png" alt="TypeError on app page"></p><p>To fix this, you need to restrict the profile page to only logged in users. Luckily for us, you can achieve that with the Auth module. The Auth module comes with an <code>auth</code> middleware, which you can use in this scenario.</p><p>So let’s add the <code>auth</code> middleware to the <code>profile</code> page. Update the <code>script</code> section as below:</p><p>pages&#x2F;profile.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">middleware</span>: <span class="string">&#x27;auth&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>Now when a user that is not logged in tries to visit the <code>profile</code> page, the user will be redirected to the <code>login</code> page.</p><h2 id="Step-11-—-Creating-a-Guest-Middleware"><a href="#Step-11-—-Creating-a-Guest-Middleware" class="headerlink" title="Step 11 — Creating a Guest Middleware"></a>Step 11 — Creating a Guest Middleware</h2><p>Again as it stands, even as a logged in user, you can still access the login and register pages. One way to fix that is to restrict login and register pages to only users that are not logged in. You can do that by creating a guest middleware.</p><p>Inside the <code>middleware</code> directory, create a new <code>guest.js</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano middleware/guest.js</span><br></pre></td></tr></table></figure><p>Copy</p><p>And paste the code below in it:</p><p>middleware&#x2F;guest.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">&#123; store, redirect &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">state</span>.<span class="property">auth</span>.<span class="property">loggedIn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>A middleware accepts the context as its first argument. So you extract <code>store</code> and <code>redirect</code> from the context. Then, you check if the user is logged in then redirect the user to the homepage. Otherwise, you allow the normal execution of the request.</p><p>Next, let’s make use of this middleware. Update the <code>script</code> section of both <code>login</code> and <code>register</code> as below:</p><p>pages&#x2F;login.vue and pages&#x2F;register.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">middleware</span>: <span class="string">&#x27;guest&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy</p><p>Now, everything will be working as expected.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this tutorial, you looked at how to implement authentication in a Nuxt.js application using the Auth module. You also saw how to keep the authentication flow sleek by making use of middleware.</p><p>To learn more about the Auth module, check out the <a href="https://auth.nuxtjs.org/">docs</a>.</p><p>If you’d like to learn more about Vue.js, check out <a href="https://www.digitalocean.com/community/tags/vue-js">our Vue.js topic page</a> for exercises and programming projects.</p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NeXt </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Handbook</title>
      <link href="/2020/05/21/Markdown%E5%85%AC%E5%BC%8F%E7%94%A8%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/05/21/Markdown%E5%85%AC%E5%BC%8F%E7%94%A8%E6%B3%95%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>Markdown是一种轻量级标记语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br><span class="line">**加粗**</span><br><span class="line">*斜体*</span><br><span class="line">==高亮==</span><br></pre></td></tr></table></figure><h4 id="两种代码引用方式"><a href="#两种代码引用方式" class="headerlink" title="两种代码引用方式"></a>两种代码引用方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``式或```式</span><br></pre></td></tr></table></figure><h4 id="插入链接并描述"><a href="#插入链接并描述" class="headerlink" title="插入链接并描述"></a>插入链接并描述</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[博客]</span>(<span class="attribute">https</span>:<span class="comment">//www.cnblogs.com/ &quot;博客&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![路飞](https://pic.baike.soso.com/ugc/baikepic2/0/ori-20190529230042-1249666563_jpeg_640_960_59726.jpg/800 <span class="string">&#x27;路飞&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">one</span></span><br><span class="line"><span class="number">2.</span>two</span><br><span class="line"><span class="number">3.</span>three</span><br></pre></td></tr></table></figure><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> one</span><br><span class="line"><span class="bullet">*</span> two</span><br><span class="line"><span class="bullet">*</span> three</span><br></pre></td></tr></table></figure><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name | age | sex</span><br><span class="line"><span class="section">:-: | :- | -:</span></span><br><span class="line">tony|20|男</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">name</th><th align="left">age</th><th align="center">sex</th></tr></thead><tbody><tr><td align="center">tony</td><td align="left">20</td><td align="center">男</td></tr></tbody></table><p>注：代码中第二行分别表示居中，右对齐，左对齐，若结果不显示，转化成源代码模式去掉行与行之间的空行。</p><h3 id="如何插入公式"><a href="#如何插入公式" class="headerlink" title="如何插入公式"></a>如何插入公式</h3><p>数学公式有两种：行中公式（与文字搭配使用）和独立公式（独立成行）</p><p>行内公式表示：<code>$ 数学公式 $</code></p><p>独立公式表示：<code>$$ 数学公式 $$</code></p><h3 id="如何输入上下标"><a href="#如何输入上下标" class="headerlink" title="如何输入上下标"></a>如何输入上下标</h3><p><code>^</code> 表示上标, <code>_</code> 表示下标。如果上下标的内容多于一个字符，需要用 <code>&#123;&#125;</code> 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。</p><p>如：<code>$$ x^&#123;y^z&#125;=(1+&#123;\rm e&#125;^x)^&#123;-2xy^w&#125; $$</code>,显示：$x{yz}&#x3D;(1+{\rm e}x){-2xy^w} $</p><p>另外，如果要在左右两边都有上下标，可以用 <code>\sideset</code> 命令。</p><p>如：<code>$$ \sideset&#123;^1_2&#125;&#123;^3_4&#125;\bigotimes $$</code>,显示：$ \sideset{1_2}{3_4}\bigotimes $</p><h3 id="如何输入括号和分隔符"><a href="#如何输入括号和分隔符" class="headerlink" title="如何输入括号和分隔符"></a>如何输入括号和分隔符</h3><p><code>()</code>、<code>[]</code> 和 <code>|</code> 表示符号本身，使用 <code>\&#123;\&#125;</code> 来表示 <code>&#123;&#125;</code> 。当要显示大号的括号或分隔符时，要用 <code>\left</code> 和 <code>\right</code> 命令。</p><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\langle</td><td align="center">⟨⟨</td><td align="center">\rangle</td><td align="center">⟩⟩</td></tr><tr><td align="center">\lceil</td><td align="center">⌈⌈</td><td align="center">\rceil</td><td align="center">⌉⌉</td></tr><tr><td align="center">\lfloor</td><td align="center">⌊⌊</td><td align="center">\rfloor</td><td align="center">⌋⌋</td></tr><tr><td align="center">\lbrace</td><td align="center">{ {</td><td align="center">\rbrace</td><td align="center">} }</td></tr></tbody></table><p>如：<code>$$ f(x,y,z) = 3y^2z \left( 3+\frac&#123;7x+5&#125;&#123;1+y^2&#125; \right) $$</code>,显示：f(x,y,z)&#x3D;3y2z(3+7x+51+y2)f(x,y,z)&#x3D;3y2z(3+7x+51+y2)</p><p>有时候要用 <code>\left.</code> 或 <code>\right.</code> 进行匹配而不显示本身。</p><p>如：<code>$$ \left. \frac&#123;&#123;\rm d&#125;u&#125;&#123;&#123;\rm d&#125;x&#125; \right| _&#123;x=0&#125; $$`,显示：[MathProcessingError]dudx∣∣x=0[MathProcessingError]dudx|x=0### 如何输入分数通常使用 `\frac &#123;分子&#125; &#123;分母&#125;` 命令产生一个分数，分数可嵌套。便捷情况可直接输入 `\frac ab` 来快速生成一个 abab 。如果分式很复杂，亦可使用 `分子 \over 分母` 命令，此时分数仅有一层。如：`$$ \frac&#123;a-1&#125;&#123;b-1&#125; \quad and \quad &#123;a+1\over b+1&#125; $$`,显示：a−1b−1anda+1b+1a−1b−1anda+1b+1### 如何输入开方使用 `\sqrt [根指数，省略时为2] &#123;被开方数&#125;` 命令输入开方。如：`$$ \sqrt&#123;2&#125; \quad and \quad \sqrt[n]&#123;3&#125; $$`,显示：2–√and3–√n2and3n### 如何输入省略号数学公式中常见的省略号有两种，`\ldots` 表示与文本底线对齐的省略号，`\cdots` 表示与文本中线对齐的省略号。如：`$$ f(x_1,x_2,\underbrace&#123;\ldots&#125;_&#123;\rm ldots&#125; ,x_n) = x_1^2 + x_2^2 + \underbrace&#123;\cdots&#125;_&#123;\rm cdots&#125; + x_n^2 $$`,显示：$ f(x_1,x_2,\underbrace&#123;\ldots&#125;*&#123;\rm ldots&#125; ,x_n) = x_1^2 + x_2^2 + \underbrace&#123;\cdots&#125;*&#123;\rm cdots&#125; + x_n^2 $### 如何输入矢量使用 `\vec&#123;矢量&#125;` 来自动产生一个矢量。也可以使用 `\overrightarrow` 等命令自定义字母上方的符号。如：`$$ \vec&#123;a&#125; \cdot \vec&#123;b&#125;=0 $$`,显示：a⃗ ⋅b⃗ =0a→⋅b→=0如：`$$ \overleftarrow&#123;xy&#125; \quad and \quad \overleftrightarrow&#123;xy&#125; \quad and \quad \overrightarrow&#123;xy&#125; $$`,显示：xy←−andxy←→andxy−→xy←andxy↔andxy→### 如何输入积分使用 `\int_积分下限^积分上限 &#123;被积表达式&#125;` 来输入一个积分。如：`$$ \int_0^1 &#123;x^2&#125; \,&#123;\rm d&#125;x $$`,显示：∫10x2,dx∫01x2,dx,例中 `\,` 和 `&#123;\rm d&#125;` 部分可省略，建议加入，使式子更美观。### 如何输入极限运算使用 `\lim_&#123;变量 \to 表达式&#125; 表达式` 来输入一个极限。如有需求，可以更改 `\to` 符号至任意符号。如：`$$ \lim_&#123;n \to +\infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125; \quad and \quad \lim_&#123;x\leftarrow&#123;示例&#125;&#125; \frac&#123;1&#125;&#123;n(n+1)&#125; $$</code>,显示：</p><p>limn→+∞1n(n+1)andlimx←示例1n(n+1)limn→+∞1n(n+1)andlimx←示例1n(n+1)</p><h3 id="如何输入累加、累乘运算"><a href="#如何输入累加、累乘运算" class="headerlink" title="如何输入累加、累乘运算"></a>如何输入累加、累乘运算</h3><p>使用 <code>\sum_&#123;下标表达式&#125;^&#123;上标表达式&#125; &#123;累加表达式&#125;</code> 来输入一个累加。与之类似，使用 <code>\prod</code> <code>\bigcup</code> <code>\bigcap</code> 来分别输入累乘、并集和交集。此类符号在行内显示时上下标表达式将会移至右上角和右下角。</p><p>如：<code>$$ \sum_&#123;i=1&#125;^n \frac&#123;1&#125;&#123;i^2&#125; \quad and \quad \prod_&#123;i=1&#125;^n \frac&#123;1&#125;&#123;i^2&#125; \quad and \quad \bigcup_&#123;i=1&#125;^&#123;2&#125; R $$</code>,显示：∑ni&#x3D;11i2and∏ni&#x3D;11i2and⋃2i&#x3D;1R∑i&#x3D;1n1i2and∏i&#x3D;1n1i2and⋃i&#x3D;12R</p><h3 id="如何输入希腊字母"><a href="#如何输入希腊字母" class="headerlink" title="如何输入希腊字母"></a>如何输入希腊字母</h3><p>输入 <code>\小写希腊字母英文全称</code> 和 <code>\首字母大写希腊字母英文全称</code> 来分别输入小写和大写希腊字母,对于大写希腊字母与现有字母相同的，直接输入大写字母即可。</p><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\alpha</td><td align="center">αα</td><td align="center">A</td><td align="center">AA</td><td align="center">\beta</td><td align="center">ββ</td><td align="center">B</td><td align="center">BB</td></tr><tr><td align="center">\gamma</td><td align="center">γγ</td><td align="center">\Gamma</td><td align="center">ΓΓ</td><td align="center">\delta</td><td align="center">δδ</td><td align="center">\Delta</td><td align="center">ΔΔ</td></tr><tr><td align="center">\epsilon</td><td align="center">ϵϵ</td><td align="center">E</td><td align="center">EE</td><td align="center">\zeta</td><td align="center">ζζ</td><td align="center">Z</td><td align="center">ZZ</td></tr><tr><td align="center">\eta</td><td align="center">ηη</td><td align="center">H</td><td align="center">HH</td><td align="center">\theta</td><td align="center">θθ</td><td align="center">\Theta</td><td align="center">ΘΘ</td></tr><tr><td align="center">\iota</td><td align="center">ιι</td><td align="center">I</td><td align="center">II</td><td align="center">\kappa</td><td align="center">κκ</td><td align="center">K</td><td align="center">KK</td></tr><tr><td align="center">\lambda</td><td align="center">λλ</td><td align="center">\Lambda</td><td align="center">ΛΛ</td><td align="center">\mu</td><td align="center">μμ</td><td align="center">M</td><td align="center">MM</td></tr><tr><td align="center">\nu</td><td align="center">νν</td><td align="center">N</td><td align="center">NN</td><td align="center">\xi</td><td align="center">ξξ</td><td align="center">\Xi</td><td align="center">ΞΞ</td></tr><tr><td align="center">o</td><td align="center">oo</td><td align="center">O</td><td align="center">OO</td><td align="center">\pi</td><td align="center">ππ</td><td align="center">\Pi</td><td align="center">ΠΠ</td></tr><tr><td align="center">\rho</td><td align="center">ρρ</td><td align="center">P</td><td align="center">PP</td><td align="center">\sigma</td><td align="center">σσ</td><td align="center">\Sigma</td><td align="center">ΣΣ</td></tr><tr><td align="center">\tau</td><td align="center">ττ</td><td align="center">T</td><td align="center">TT</td><td align="center">\upsilon</td><td align="center">υυ</td><td align="center">\Upsilon</td><td align="center">ΥΥ</td></tr><tr><td align="center">\phi</td><td align="center">ϕϕ</td><td align="center">\Phi</td><td align="center">ΦΦ</td><td align="center">\chi</td><td align="center">χχ</td><td align="center">X</td><td align="center">XX</td></tr><tr><td align="center">\psi</td><td align="center">ψψ</td><td align="center">\Psi</td><td align="center">ΨΨ</td><td align="center">\omega</td><td align="center">ωω</td><td align="center">\Omega</td><td align="center">ΩΩ</td></tr></tbody></table><p>部分字母有变量专用形式，以 <code>\var-</code> 开头。</p><table><thead><tr><th align="center">小写形式</th><th align="center">大写形式</th><th align="center">变量形式</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\epsilon</td><td align="center">E</td><td align="center">\varepsilon</td><td align="center">ϵ∣E∣εϵ∣E∣ε</td></tr><tr><td align="center">\theta</td><td align="center">\Theta</td><td align="center">\vartheta</td><td align="center">θ∣Θ∣ϑθ∣Θ∣ϑ</td></tr><tr><td align="center">\rho</td><td align="center">P</td><td align="center">\varrho</td><td align="center">ρ∣P∣ϱρ∣P∣ϱ</td></tr><tr><td align="center">\sigma</td><td align="center">\Sigma</td><td align="center">\varsigma</td><td align="center">σ∣Σ∣ςσ∣Σ∣ς</td></tr><tr><td align="center">\phi</td><td align="center">\Phi</td><td align="center">\varphi</td><td align="center">ϕ∣Φ∣φϕ∣Φ∣φ</td></tr></tbody></table><h3 id="如何输入其它特殊字符"><a href="#如何输入其它特殊字符" class="headerlink" title="如何输入其它特殊字符"></a>如何输入其它特殊字符</h3><p>若需要显示更大或更小的字符，在符号前插入 <code>\large</code> 或 <code>\small</code> 命令。若找不到需要的符号，使用 <a href="http://detexify.kirelabs.org/classify.html">Detexify2Detexify2</a> 来画出想要的符号。</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\pm</td><td align="center">±±</td><td align="center">\times</td><td align="center">××</td><td align="center">\div</td><td align="center">÷÷</td><td align="center">\mid</td><td align="center">∣∣</td></tr><tr><td align="center">\nmid</td><td align="center">∤∤</td><td align="center">\cdot</td><td align="center">⋅⋅</td><td align="center">\circ</td><td align="center">∘∘</td><td align="center">\ast</td><td align="center">∗∗</td></tr><tr><td align="center">\bigodot</td><td align="center">⨀⨀</td><td align="center">\bigotimes</td><td align="center">⨂⨂</td><td align="center">\bigoplus</td><td align="center">⨁⨁</td><td align="center">\leq</td><td align="center">≤≤</td></tr><tr><td align="center">\geq</td><td align="center">≥≥</td><td align="center">\neq</td><td align="center">≠≠</td><td align="center">\approx</td><td align="center">≈≈</td><td align="center">\equiv</td><td align="center">≡≡</td></tr><tr><td align="center">\sum</td><td align="center">∑∑</td><td align="center">\prod</td><td align="center">∏∏</td><td align="center">\coprod</td><td align="center">∐∐</td><td align="center">\backslash</td><td align="center">∖∖</td></tr></tbody></table><h4 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\emptyset</td><td align="center">∅∅</td><td align="center">\in</td><td align="center">∈∈</td><td align="center">\notin</td><td align="center">∉∉</td></tr><tr><td align="center">\subset</td><td align="center">⊂⊂</td><td align="center">\supset</td><td align="center">⊃⊃</td><td align="center">\subseteq</td><td align="center">⊆⊆</td></tr><tr><td align="center">\supseteq</td><td align="center">⊇⊇</td><td align="center">\bigcap</td><td align="center">⋂⋂</td><td align="center">\bigcup</td><td align="center">⋃⋃</td></tr><tr><td align="center">\bigvee</td><td align="center">⋁⋁</td><td align="center">\bigwedge</td><td align="center">⋀⋀</td><td align="center">\biguplus</td><td align="center">⨄⨄</td></tr></tbody></table><h4 id="对数运算符"><a href="#对数运算符" class="headerlink" title="对数运算符"></a>对数运算符</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\log</td><td align="center">loglog</td><td align="center">\lg</td><td align="center">lglg</td><td align="center">\ln</td><td align="center">lnln</td></tr></tbody></table><h4 id="三角运算符"><a href="#三角运算符" class="headerlink" title="三角运算符"></a>三角运算符</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">30^\circ</td><td align="center">30∘30∘</td><td align="center">\bot</td><td align="center">⊥⊥</td><td align="center">\angle A</td><td align="center">∠A∠A</td></tr><tr><td align="center">\sin</td><td align="center">sinsin</td><td align="center">\cos</td><td align="center">coscos</td><td align="center">\tan</td><td align="center">tantan</td></tr><tr><td align="center">\csc</td><td align="center">csccsc</td><td align="center">\sec</td><td align="center">secsec</td><td align="center">\cot</td><td align="center">cotcot</td></tr></tbody></table><h4 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\int</td><td align="center">∫∫</td><td align="center">\iint</td><td align="center">∬∬</td><td align="center">\iiint</td><td align="center">∭∭</td></tr><tr><td align="center">\iiiint</td><td align="center">∬∬⨌</td><td align="center">\oint</td><td align="center">∮∮</td><td align="center">\prime</td><td align="center">′′</td></tr><tr><td align="center">\lim</td><td align="center">limlim</td><td align="center">\infty</td><td align="center">∞∞</td><td align="center">\nabla</td><td align="center">∇∇</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\because</td><td align="center">∵∵</td><td align="center">\therefore</td><td align="center">∴∴</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\forall</td><td align="center">∀∀</td><td align="center">\exists</td><td align="center">∃∃</td><td align="center">\not\subset</td><td align="center">⊄⊄</td></tr><tr><td align="center">\not&lt;</td><td align="center">≮≮</td><td align="center">\not&gt;</td><td align="center">≯≯</td><td align="center">\not&#x3D;</td><td align="center">≠≠</td></tr></tbody></table><h4 id="戴帽符号"><a href="#戴帽符号" class="headerlink" title="戴帽符号"></a>戴帽符号</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\hat{xy}</td><td align="center">xy^xy^</td><td align="center">\widehat{xyz}</td><td align="center">xyzˆxyz^</td></tr><tr><td align="center">\tilde{xy}</td><td align="center">xy<del>xy</del></td><td align="center">\widetilde{xyz}</td><td align="center">xyz˜xyz~</td></tr><tr><td align="center">\check{x}</td><td align="center">xˇxˇ</td><td align="center">\breve{y}</td><td align="center">y˘y˘</td></tr><tr><td align="center">\grave{x}</td><td align="center">x<code>x</code></td><td align="center">\acute{y}</td><td align="center">y´y´</td></tr></tbody></table><h4 id="连线符号"><a href="#连线符号" class="headerlink" title="连线符号"></a>连线符号</h4><table><thead><tr><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\fbox{a+b+c+d}</td><td align="center">a+b+c+da+b+c+d</td></tr><tr><td align="center">\overleftarrow{a+b+c+d}</td><td align="center">a+b+c+d←−−−a+b+c+d←</td></tr><tr><td align="center">\overrightarrow{a+b+c+d}</td><td align="center">a+b+c+d−→−−a+b+c+d→</td></tr><tr><td align="center">\overleftrightarrow{a+b+c+d}</td><td align="center">a+b+c+d←→−a+b+c+d↔</td></tr><tr><td align="center">\underleftarrow{a+b+c+d}</td><td align="center">a+b+c+d←−−−a+b+c+d←</td></tr><tr><td align="center">\underrightarrow{a+b+c+d}</td><td align="center">a+b+c+d−→−−a+b+c+d→</td></tr><tr><td align="center">\underleftrightarrow{a+b+c+d}</td><td align="center">a+b+c+d←→−a+b+c+d↔</td></tr><tr><td align="center">\overline{a+b+c+d}</td><td align="center">a+b+c+d¯¯¯¯¯¯¯¯¯¯¯a+b+c+d¯</td></tr><tr><td align="center">\underline{a+b+c+d}</td><td align="center">a+b+c+d–––––a+b+c+d_</td></tr><tr><td align="center">\overbrace{a+b+c+d}^{Sample}</td><td align="center">a+b+c+dSamplea+b+c+d⏞Sample</td></tr><tr><td align="center">\underbrace{a+b+c+d}_{Sample}</td><td align="center">a+b+c+dSamplea+b+c+d⏟Sample</td></tr><tr><td align="center">\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}</td><td align="center">a+b+c1.0+d2.0a+b+c⏟1.0+d⏞2.0</td></tr><tr><td align="center">\underbrace{a\cdot a\cdots a}_{b\text{ times}}</td><td align="center">a⋅a⋯ab timesa⋅a⋯a⏟b times</td></tr></tbody></table><h4 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h4><ul><li>推荐使用符号：<br>|输入|显示|输入|显示|输入|显示|<br>|:–😐:–😐:–😐:–😐:–😐:–😐<br>|\to|$ \to|↦||↦| \mapsto||||⟹|||||⟹| \implies|⟺||⟺| \iff|⟸||⟸| \impliedby$|</li><li>其它可用符号：<br>|输入|显示|输入|显示|<br>|:–😐:–😐:–😐:–😐<br>|\uparrow|$ \uparrow|⇑||⇑| \Uparrow||↓|||↓| \downarrow|⇓||⇓| \Downarrow||←|||←| \leftarrow|⇐||⇐| \Leftarrow||→|||→| \rightarrow|⇒||⇒| \Rightarrow||↔|||↔| \leftrightarrow|⇔||⇔| \Leftrightarrow||⟵|||⟵| \longleftarrow|⟸||⟸| \Longleftarrow||⟶|||⟶| \longrightarrow|⟹||⟹| \Longrightarrow||⟷|||⟷| \longleftrightarrow|⟺||⟺| \Longleftrightarrow$|</li></ul><h3 id="如何进行字体转换"><a href="#如何进行字体转换" class="headerlink" title="如何进行字体转换"></a>如何进行字体转换</h3><p>若要对公式的某一部分字符进行字体转换，可以用 <code>&#123;\字体 &#123;需转换的部分字符&#125;&#125;</code> 命令，其中 <code>\字体</code> 部分可以参照下表选择合适的字体。一般情况下，公式默认为意大利体 italicitalic 。示例中 全部大写 的字体仅大写可用。</p><table><thead><tr><th align="center">输入</th><th align="center">说明</th><th align="center">显示</th><th align="center">输入</th><th align="center">说明</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\rm</td><td align="center">罗马体</td><td align="center">SampleSample</td><td align="center">\cal</td><td align="center">花体</td><td align="center">SAMPLESAMPLE</td></tr><tr><td align="center">\it</td><td align="center">意大利体</td><td align="center">SampleSample</td><td align="center">\Bbb</td><td align="center">黑板粗体</td><td align="center">SAMPLESAMPLE</td></tr><tr><td align="center">\bf</td><td align="center">粗体</td><td align="center">SampleSample</td><td align="center">\mit</td><td align="center">数学斜体</td><td align="center">SAMPLESAMPLE</td></tr><tr><td align="center">\sf</td><td align="center">等线体</td><td align="center">SampleSample</td><td align="center">\scr</td><td align="center">手写体</td><td align="center">SAMPLESAMPLE</td></tr><tr><td align="center">\tt</td><td align="center">打字机体</td><td align="center">SampleSample</td><td align="center">\frak</td><td align="center">旧德式字体</td><td align="center">SampleSample</td></tr></tbody></table><p>转换字体十分常用，例如在积分中：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\<span class="keyword">begin</span>&#123;array&#125;&#123;cc&#125;</span><br><span class="line">\<span class="keyword">mathrm</span>&#123;Bad&#125; <span class="operator">&amp;</span> \<span class="keyword">mathrm</span>&#123;Better&#125; \\</span><br><span class="line">\hline \\</span><br><span class="line">\int_0<span class="operator">^</span><span class="number">1</span> x<span class="operator">^</span><span class="number">2</span> dx <span class="operator">&amp;</span> \int_0<span class="operator">^</span><span class="number">1</span> x<span class="operator">^</span><span class="number">2</span> \,&#123;\rm d&#125;x</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure><p>显示：\begin{array}{cc}<br>\mathrm{Bad} &amp; \mathrm{Better} \<br>\hline \<br>\int_0^1 x^2 dx &amp; \int_0^1 x^2 ,{\rm d}x<br>\end{array}\begin{array}{cc} \mathrm{Bad} &amp; \mathrm{Better} \ \hline \ \int_0^1 x^2 dx &amp; \int_0^1 x^2 ,{\rm d}x \end{array},注意比较两个式子间 dxdx 与 dxdx 的不同。</p><h3 id="如何使用大括号和行标"><a href="#如何使用大括号和行标" class="headerlink" title="如何使用大括号和行标"></a>如何使用大括号和行标</h3><p>使用 <code>\left</code> 和 <code>\right</code> 来创建自动匹配高度的 (圆括号)，[方括号] 和 {花括号} ，在每个公式末尾前使用 <code>\tag&#123;行标&#125;</code> 来实现行标。</p><ul><li>例如：</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">$</span><span class="operator">$</span></span><br><span class="line">f\left(</span><br><span class="line">   \left[ </span><br><span class="line">     \<span class="keyword">frac</span>&#123;</span><br><span class="line">       <span class="number">1</span><span class="operator">+</span>\left\&#123;x,y\right\&#125;</span><br><span class="line">     &#125;&#123;</span><br><span class="line">       \left(</span><br><span class="line">          \<span class="keyword">frac</span>&#123;x&#125;&#123;y&#125;<span class="operator">+</span>\<span class="keyword">frac</span>&#123;y&#125;&#123;x&#125;</span><br><span class="line">       \right)</span><br><span class="line">       \left(u<span class="operator">+</span><span class="number">1</span>\right)</span><br><span class="line">     &#125;<span class="operator">+</span>a</span><br><span class="line">   \right]<span class="operator">^</span>&#123;<span class="number">3</span><span class="operator">/</span><span class="number">2</span>&#125;</span><br><span class="line">\right)</span><br><span class="line">\<span class="keyword">tag</span>&#123;行标&#125;</span><br><span class="line"><span class="operator">$</span><span class="operator">$</span></span><br></pre></td></tr></table></figure><ul><li>显示：</li></ul><p>f⎛⎝⎜⎜⎡⎣⎢1+{x,y}(xy+yx)(u+1)+a⎤⎦⎥3&#x2F;2⎞⎠⎟⎟(行标)(行标)f([1+{x,y}(xy+yx)(u+1)+a]3&#x2F;2)</p><p>如果你需要在不同的行显示对应括号，可以在每一行对应处使用 <code>\left.</code> 或 <code>\right.</code> 来放一个”影子”括号：</p><ul><li>例如：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$$</span></span><br><span class="line">\<span class="keyword">begin</span>&#123;aligned&#125;</span><br><span class="line">a=&amp;\left(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+  \cdots \right. \\</span><br><span class="line">&amp; \cdots+ \left. \infty-<span class="number">2</span>+\infty-<span class="number">1</span>+\infty\right)</span><br><span class="line">\<span class="keyword">end</span>&#123;aligned&#125;</span><br><span class="line"><span class="variable">$$</span></span><br></pre></td></tr></table></figure><ul><li>显示：</li></ul><p>a&#x3D;(1+2+3+⋯⋯+∞−2+∞−1+∞)a&#x3D;(1+2+3+⋯⋯+∞−2+∞−1+∞)</p><p>如果你需要将行内显示的分隔符也变大，可以使用 <code>\middle</code> 命令：</p><ul><li>例如：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">\left\langle  </span><br><span class="line">  q</span><br><span class="line">\middle\|</span><br><span class="line">  \frac&#123;\frac&#123;x&#125;&#123;y&#125;&#125;&#123;\frac&#123;u&#125;&#123;v&#125;&#125;</span><br><span class="line">\middle| </span><br><span class="line">   p </span><br><span class="line">\right\rangle</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br></pre></td></tr></table></figure><ul><li>显示：</li></ul><p>⟨q∥∥∥xyuv∣∣∣p⟩⟨q‖xyuv|p⟩</p><h3 id="其它公式"><a href="#其它公式" class="headerlink" title="其它公式"></a>其它公式</h3><h4 id="定义新的符号-operatorname"><a href="#定义新的符号-operatorname" class="headerlink" title="定义新的符号\operatorname"></a>定义新的符号<code>\operatorname</code></h4><p>如：<code>$$ \operatorname&#123;Symbol&#125; A $$</code>，显示： SymbolASymbol⁡A</p><h4 id="添加注释文字-text"><a href="#添加注释文字-text" class="headerlink" title="添加注释文字 \text"></a>添加注释文字 <code>\text</code></h4><p>在 <code>\text &#123;文字&#125;</code> 中仍可以使用 <code>$公式$</code> 插入其它公式。</p><p>如：<code>$$ f(n)= \begin&#123;cases&#125; n/2, &amp; \text &#123;if $n$ is even&#125; \\ 3n+1, &amp; \text&#123;if $n$ is odd&#125; \end&#123;cases&#125; $$</code></p><p>显示：$ f(n)&#x3D; \begin{cases} n&#x2F;2, &amp; \text {if nn is even} \ 3n+1, &amp; \text{if nn is odd} \end{cases} $</p><h4 id="在字符间加入空格"><a href="#在字符间加入空格" class="headerlink" title="在字符间加入空格"></a>在字符间加入空格</h4><p>有四种宽度的空格可以使用： <code>\,</code>、<code>\;</code>、<code>\quad</code> 和 <code>\qquad</code> 。</p><p>如：<code>$$ a \, b \mid a \; b \mid a \quad b \mid a \qquad b $$</code>,显示：a,b∣a;b∣ab∣aba,b∣a;b∣ab∣ab</p><p>当然，使用 <code>\text &#123;n个空格&#125;</code> 也可以达到同样效果。</p><h4 id="更改文字颜色"><a href="#更改文字颜色" class="headerlink" title="更改文字颜色"></a>更改文字颜色</h4><p>使用 <code>\color&#123;颜色&#125;&#123;文字&#125;</code> 来更改特定的文字颜色,更改文字颜色 需要浏览器支持，如果浏览器不知道你所需的颜色，那么文字将被渲染为黑色。对于较旧的浏览器（HTML4与CSS2），以下颜色是被支持的：</p><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">black</td><td align="center">texttext</td><td align="center">grey</td><td align="center">texttext</td></tr><tr><td align="center">silver</td><td align="center">texttext</td><td align="center">white</td><td align="center">texttext</td></tr><tr><td align="center">maroon</td><td align="center">texttext</td><td align="center">red</td><td align="center">texttext</td></tr><tr><td align="center">yellow</td><td align="center">texttext</td><td align="center">lime</td><td align="center">texttext</td></tr><tr><td align="center">olive</td><td align="center">texttext</td><td align="center">green</td><td align="center">texttext</td></tr><tr><td align="center">teal</td><td align="center">texttext</td><td align="center">auqa</td><td align="center">texttext</td></tr><tr><td align="center">blue</td><td align="center">texttext</td><td align="center">navy</td><td align="center">texttext</td></tr><tr><td align="center">purple</td><td align="center">texttext</td><td align="center">fuchsia</td><td align="center">texttext</td></tr></tbody></table><p>对于较新的浏览器（HTML5与CSS3），额外的124种颜色将被支持：输入 &#96;\color </p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 8.2 Alinode</title>
      <link href="/2020/03/08/8.2%20alinode/"/>
      <url>/2020/03/08/8.2%20alinode/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="8-2-1-什么是-alinode？"><a href="#8-2-1-什么是-alinode？" class="headerlink" title="8.2.1 什么是 alinode？"></a>8.2.1 什么是 alinode？</h2><blockquote><p>Node.js 性能平台（原 alinode）是面向中大型 Node.js 应用提供性能监控、安全提醒、故障排查、性能优化等服务的整体性解决方案。alinode 团队凭借对 Node.js 内核的深入理解，提供了完善的工具链和服务，协助客户主动、快速地发现和定位线上问题。</p></blockquote><h2 id="8-2-2-创建-alinode-应用"><a href="#8-2-2-创建-alinode-应用" class="headerlink" title="8.2.2 创建 alinode 应用"></a>8.2.2 创建 alinode 应用</h2><p>访问官网 <a href="https://www.aliyun.com/product/nodejs">https://www.aliyun.com/product/nodejs</a>，如未开通，则使用阿里云账号登录并免费开通即可。</p><p>登录后进入<a href="https://node.console.aliyun.com/">控制台</a>，单击 “创建新应用”，创建一个名为 test_alinode 的应用。</p><p>进入设置页面，如下所示：</p><p><img src="/./assets/8.2.1.png"></p><p>App ID 和 App Secret 后面会用到。</p><h2 id="8-2-3-安装-alinode"><a href="#8-2-3-安装-alinode" class="headerlink" title="8.2.3 安装 alinode"></a>8.2.3 安装 alinode</h2><p>alinode 的整套服务由 alinode 运行时、agenthub（原 agentx + commdx 命令集）和服务平台组成，所以在自己的服务器上部署时需要安装 alinode 运行时和 agenthub。</p><p>我们使用交互式一键安装 alinode 和 agenthub：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a <span class="comment"># 阿里云 ECS Ubuntu@16.04</span></span><br><span class="line">Linux nswbmw 4.4.0-105-generic <span class="comment">#128-Ubuntu SMP Thu Dec 14 12:42:11 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">$ wget https://raw.githubusercontent.com/aliyun-node/alinode-all-in-one/master/alinode_all.sh</span><br><span class="line">$ bash -i alinode_all.sh <span class="comment"># App ID 和 App Secret 填写上面生成的</span></span><br><span class="line">...</span><br><span class="line">$ node -p <span class="string">&#x27;process.alinode&#x27;</span> <span class="comment"># 查看 alinode 版本</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果遇到 wget 报错 <code>wget: unable to resolve host address &#39;raw.githubusercontent.com&#39;</code>，需要修改 DNS 配置，在 &#x2F;etc&#x2F;resolv.conf 最上面添加 <code>nameserver 8.8.8.8</code>。</p><p>生成一个 yourconfig.json 配置文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;agentserver.node.aliyun.com:8080&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logdir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reconnectDelay&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;heartbeatInterval&quot;</span><span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reportInterval&quot;</span><span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_log&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用该配置启动 agenthub：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">nohup</span> agenthub yourconfig.json &amp;</span><br></pre></td></tr></table></figure><p>agenthub 将以常驻进程的方式运行。</p><p>下面通过两个例子使用 alinode 分别调试内存泄露和 CPU 性能瓶颈的问题。</p><h2 id="8-2-4-使用-alinode-诊断内存泄露"><a href="#8-2-4-使用-alinode-诊断内存泄露" class="headerlink" title="8.2.4 使用 alinode 诊断内存泄露"></a>8.2.4 使用 alinode 诊断内存泄露</h2><p>我们以一段内存泄露代码为例，演示如何使用 alinode 调试内存泄漏的问题。代码如下：</p><p><strong>server.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;koa-generic-session&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="property">keys</span> = [<span class="string">&#x27;some secret&#x27;</span>]</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1e6</span>).<span class="title function_">join</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">session</span>.<span class="property">user</span> = <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>这段代码内存泄露的原因是：koa-generic-session 默认将 session 信息存储到了内存中。</p><p><strong>client.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>打开两个终端，分别运行 ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ENABLE_NODE_LOG=YES node server <span class="comment"># 开启 alinode 的 log 功能，使得 agenthub 可以监控内核级的性能数据</span></span><br><span class="line">$ node client <span class="comment"># 1s 发起一次请求</span></span><br></pre></td></tr></table></figure><p>过一会儿就可以在 alinode 控制台看到数据了，如下所示：</p><p><img src="/./assets/8.2.2.png"></p><p>可以看出，alinode 监控了：</p><ul><li>异常日志</li><li>慢 HTTP 日志</li><li>模块依赖</li><li>系统监控数据（包含非常详尽的图表数据，有 Memory、CPU、Load、QPS、GC、Apdex、Apdex detail、node 进程数、磁盘）</li></ul><p>单击 “堆快照” 生成一个 heapsnapshot 文件，单击左侧的 “文件”，查看刚才生成的堆快照：</p><p><img src="/./assets/8.2.3.png"></p><p>在转储后单击 “分析”，选择 “对象簇视图” 的树状列表，展开后如下所示：</p><p><img src="/./assets/8.2.4.png"></p><p><strong>可以看出</strong>：MemoryStore 的 sessions 对象中存储了 97 个 session，并且每个 session.user 上有一个 name 字段是长字符串。</p><h2 id="8-2-5-使用-alinode-诊断-CPU-性能瓶颈"><a href="#8-2-5-使用-alinode-诊断-CPU-性能瓶颈" class="headerlink" title="8.2.5 使用 alinode 诊断 CPU 性能瓶颈"></a>8.2.5 使用 alinode 诊断 CPU 性能瓶颈</h2><p>测试代码如下：</p><p><strong>server.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/encrypt&#x27;</span>, <span class="attr">controller</span>: <span class="keyword">function</span> <span class="title function_">encryptRouter</span> (ctx) &#123;</span><br><span class="line">  <span class="keyword">const</span> password = ctx.<span class="property">query</span>.<span class="property">password</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> salt = crypto.<span class="title function_">randomBytes</span>(<span class="number">128</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> encryptedPassword = crypto.<span class="title function_">pbkdf2Sync</span>(password, salt, <span class="number">10000</span>, <span class="number">64</span>, <span class="string">&#x27;sha512&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">body</span> = encryptedPassword</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>client.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tps = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tps; i++) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/encrypt?password=123456&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Sent <span class="subst">$&#123;tps&#125;</span> requests`</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>打开两个终端，分别运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ENABLE_NODE_LOG=YES node server</span><br><span class="line">$ node client</span><br></pre></td></tr></table></figure><p>回到 alinode 控制台，单击 “CPU Profile”，然后到 “文件” 查看刚才生成的 cpuprofile 文件，转储后单击 “分析”，可以看到生成的火焰图。展开后如下所示：</p><p><img src="/./assets/8.2.5.png"></p><p><strong>可以看出</strong>：server.js 的第 5 行，即 encryptRouter 占用 CPU 较多，而 encryptRouter 里的 exports.pbkdf2Sync 占用了 encryptRouter 绝大部分 CPU 时间。</p><p>回到 “文件”，选择 “devtools 分析”，如下所示：</p><p><img src="/./assets/8.2.6.png"></p><p><strong>可以看出</strong>：alinode 已经帮我们把可疑的 CPU 性能瓶颈的元凶标红显示了。</p><p><strong>小提示</strong>：不管是生成的 heapsnapshot 还是 cpuprofile，都可以选择 “下载” 后使用 Chrome DevTools 分析。</p><p>我们在上面只演示了 “堆快照” 和 “CPU Profile” 的使用，alinode 支持抓取以下 5 种数据：</p><ul><li>堆快照</li><li>堆时间线</li><li>CPU Profile</li><li>GC Trace</li><li>Heap Profile</li></ul><p>本节就不一一演示了。</p><p>alinode 如此强大，而且免费使用，可以说是开发 Node.js 应用必不可少的好伙伴了。</p><h2 id="8-2-6-参考链接"><a href="#8-2-6-参考链接" class="headerlink" title="8.2.6 参考链接"></a>8.2.6 参考链接</h2><ul><li><a href="https://www.aliyun.com/product/nodejs">https://www.aliyun.com/product/nodejs</a></li><li><a href="https://github.com/aliyun-node/agenthub">https://github.com/aliyun-node/agenthub</a></li><li><a href="https://cnodejs.org/topic/561f289b4928c5872abc18ee">https://cnodejs.org/topic/561f289b4928c5872abc18ee</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/8.1%20node-clinic.md">8.1 node-clinic</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 8.1 Node-clinic</title>
      <link href="/2020/02/01/8.1%20node-clinic/"/>
      <url>/2020/02/01/8.1%20node-clinic/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="8-1-1-使用-node-clinic"><a href="#8-1-1-使用-node-clinic" class="headerlink" title="8.1.1 使用 node-clinic"></a>8.1.1 使用 node-clinic</h2><p><a href="https://github.com/nearform/node-clinic">node-clinic</a>（简称 clinic） 是一个开箱即用的 Node.js 应用诊断工具。</p><p>首先，安装 Node.js@9+</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install 9</span><br></pre></td></tr></table></figure><p>全局安装 clinic：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i clinic -g</span><br></pre></td></tr></table></figure><p>创建测试代码：</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span> (ms) &#123;</span><br><span class="line">  <span class="keyword">const</span> future = <span class="title class_">Date</span>.<span class="title function_">now</span>() + ms</span><br><span class="line">  <span class="keyword">while</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() &lt; future);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="number">50</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>使用 clinic doctor 启动并诊断 Node.js 应用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clinic doctor -- node app.js</span><br></pre></td></tr></table></figure><p>使用 ab 压测：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ab -c 10 -n 200 <span class="string">&quot;http://localhost:3000/&quot;</span></span><br></pre></td></tr></table></figure><p>CTRL+C 终止测试程序，终端打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warning: Trace event is an experimental feature and could change at any time.</span><br><span class="line">^Canalysing data</span><br><span class="line">generated HTML file is 51485.clinic-doctor.html</span><br></pre></td></tr></table></figure><p>用浏览器打开 51485.clinic-doctor.html，如下所示：</p><p><img src="/./assets/8.1.1.png"></p><p><strong>可以看出</strong>：Event Loop 被阻塞，CPU Usage 也居高不下，一定是有 CPU 密集计算，与我们的测试代码吻合。</p><p>clinic 也给出了猜测和解决方案，我们尝试使用 clinic flame 生成火焰图：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clinic flame -- node app.js</span><br></pre></td></tr></table></figure><p>也可以用以下命令代替：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ clinic flame --collect-only -- node app.js <span class="comment"># 只收集数据</span></span><br><span class="line">$ clinic flame --visualize-only PID.flamegraph <span class="comment"># 将数据生成火焰图</span></span><br></pre></td></tr></table></figure><p>使用同样的 ab 命令压测后，生成的火焰图如下：</p><p><img src="/./assets/8.1.2.png"></p><p><strong>可以看出</strong>：app.js 第 4 行的 sleep 函数占用了大量的 CPU 计算。</p><h2 id="8-1-2-参考链接"><a href="#8-1-2-参考链接" class="headerlink" title="8.1.2 参考链接"></a>8.1.2 参考链接</h2><ul><li><a href="https://www.nearform.com/blog/introducing-node-clinic-a-performance-toolkit-for-node-js-developers/">https://www.nearform.com/blog/introducing-node-clinic-a-performance-toolkit-for-node-js-developers/</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/7.2%20Telegraf%20%2B%20InfluxDB%20%2B%20Grafana(%E4%B8%8B).md">7.2 Telegraf + InfluxDB + Grafana(下)</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/8.2%20alinode.md">8.2 alinode</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 7.2 Telegraf + InfluxDB + Grafana(2)</title>
      <link href="/2019/11/28/7.2%20Telegraf%20+%20InfluxDB%20+%20Grafana(%E4%B8%8B)/"/>
      <url>/2019/11/28/7.2%20Telegraf%20+%20InfluxDB%20+%20Grafana(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>上一小节主要讲解了 Telegraf(StatsD) + InfluxDB + Grafana 的搭建和基本用法，并创建了请求量和响应时间这两种图表。本节讲解几个高级用法：</p><ol><li>如何将 Grafana（监控）跟 ELK（日志）结合起来。</li><li>Grafana 监控报警。</li><li>脚本一键生成图表。</li></ol><h2 id="7-2-1-Grafana-ELK"><a href="#7-2-1-Grafana-ELK" class="headerlink" title="7.2.1 Grafana + ELK"></a>7.2.1 Grafana + ELK</h2><p>在观察 Grafana 监控时，我们发现某个 api 接口的响应时间突然有一个尖刺，这个时候想查一查到底是什么原因导致的。在前面介绍过 koa-await-breakpoint + ELK 的用法，是否可以结合 Grafana 使用呢？答案是可以的。</p><p>因为涉及的代码量大，所以笔者写了一个 demo 托管到了 GitHub 上，有两个 repo，分别为：</p><ul><li><a href="https://github.com/nswbmw/grafana-to-elk">grafana-to-elk</a>：包含 web server 和模拟请求的 client，分别将统计信息发送到 StatsD 和将日志发送到 ELK。</li><li><a href="https://github.com/nswbmw/grafana-to-elk-extension">grafana-to-elk-extension</a>：Chrome 扩展，作用是：<ul><li>格式化从 Grafana 跳转到 ELK 的时间范围。</li><li>添加 requestId 的链接。</li><li>高亮显示重要的字段。</li></ul></li></ul><p>首先 clone 到本地：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/nswbmw/grafana-to-elk.git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/nswbmw/grafana-to-elk-extension.git</span><br></pre></td></tr></table></figure><p>测试步骤如下：</p><ol><li><p>按照 7.2 节启动 Telegraf（StatsD）+ InfluxDB + Grafana。</p></li><li><p>按照 6.3 节启动 ELK。</p></li><li><p>到 grafana-to-elk 目录下运行：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ node server</span><br></pre></td></tr></table></figure><p>  打开另外一个终端运行：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node client</span><br></pre></td></tr></table></figure><p>  此时，ELK 应该有日志了。</p></li><li><p>加载 Chrome 扩展。打开 Chrome 扩展程序页 -&gt; 加载已解压的扩展程序… -&gt; 加载 grafana-to-elk-extension（非测试环境下需要修改 manifest.json 的 matches 字段）。</p></li><li><p>回到 Grafana 的 “getHome 响应时间” 图表，进入编辑页的 General tab，如下填写：<br>  <img src="/./assets/7.2.1.png"><br>  在保存后，图表的左上角会出现一个类似分享的按钮，鼠标悬浮到上面出现 “Go to ELK”，单击它跳转到 ELK。</p></li><li><p>ELK 显示如下：<br>  <img src="/./assets/7.2.2.png">grafana-to-elk-extension 插件会自动处理并跳转到对应 Grafana 中的时间段并且查询出了我们关心的结果。单击第 1 个 requestId，将会跳转并显示该请求所有的日志，如下所示：<br>  <img src="/./assets/7.2.3.png"><br>  错误请求的日志如下：<br>  <img src="/./assets/7.2.4.png"></p></li></ol><h2 id="7-2-2-监控报警"><a href="#7-2-2-监控报警" class="headerlink" title="7.2.2 监控报警"></a>7.2.2 监控报警</h2><p>Grafana 有内置的监控报警，设置步骤如下：</p><ol><li>进入 Alerting -&gt; Notifications 页，单击 New Notification 添加新的报警组，如下所示：<br>  <img src="/./assets/7.2.5.png"></li><li>回到 “getHome 响应时间” 图表，进入编辑页的 Alert tab，单击 Create Alert 创建报警规则，如下所示：<br>  <img src="/./assets/7.2.6.png"><br>  <strong>报警规则为</strong>：每 60s 检查一次过去 1min 的 mean（B 在 Metrics 里面代表了别名为 mean 的折线图）折线图的平均值是否大于 50，如果是则触发报警。<br>  <strong>注意</strong>：如需发邮件，则需要设置 Grafana 的 <a href="http://docs.grafana.org/installation/configuration/#smtp">SMTP settings</a>。</li></ol><p>我们还可以给 “getHome 请求量” 设置错误报警监控，如下所示：</p><p><img src="/./assets/7.2.7.png"></p><p>每 60s 检查一次过去 1min 内是否有 400 报错，如果有则触发报警，其中 B 代表了别名为 400 的折线图。 </p><p><strong>小提示</strong>：报警信息可以发送到 Email、Slack、DingTalk 或者 Webhook 等等。报警的内容可以包含图表的截图，需要配置 <a href="http://docs.grafana.org/installation/configuration/#external-image-storage">external image uploader</a>。</p><p><strong>小提示</strong>：Grafana 配置文件在 &#x2F;etc&#x2F;grafana&#x2F;grafana.ini，如需修改步骤如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it docker-statsd-influxdb-grafana bash <span class="comment"># 进入 docker 容器</span></span><br><span class="line">$ apt update</span><br><span class="line">$ apt install vim</span><br><span class="line">$ vim /etc/grafana/grafana.ini</span><br></pre></td></tr></table></figure><h2 id="7-2-3-脚本一键生成图表"><a href="#7-2-3-脚本一键生成图表" class="headerlink" title="7.2.3 脚本一键生成图表"></a>7.2.3 脚本一键生成图表</h2><p>我们只创建了一个接口的两种（请求量和响应时间）图表，每个图表要设置 link、alert 等等就很麻烦了。如果我们的 api 有几百个接口，岂不成了灾难了。</p><p>Grafana 虽然有 Template 的功能，但我们接下来讲一个奇技淫巧。</p><p>我们在保存图表的时候从 Chrome DevTools 的 Network 看到发起了一个 Ajax 请求，如下所示：</p><p><img src="/./assets/7.2.8.png"></p><p>dashboard 就是包含了当前仪表盘页所有图表的完整 JSON，其中：</p><ul><li>dashboard：包含一到多行 row。</li><li>rows：一行 row 包含一到多个 panel。</li><li>panels：一个 panel 是一个具体的图表。</li></ul><p>在拿到这个 JSON 后，我们就可以不断地尝试修改它，然后用 axios 带上浏览器拿到的 Cookie 发送到图中的 URL，模拟浏览器的保存操作，这里就不再展开讲解了。</p><h2 id="7-2-4-参考链接"><a href="#7-2-4-参考链接" class="headerlink" title="7.2.4 参考链接"></a>7.2.4 参考链接</h2><ul><li><a href="http://docs.grafana.org/alerting/notifications/">http://docs.grafana.org/alerting/notifications/</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/7.1%20Telegraf%20%2B%20InfluxDB%20%2B%20Grafana(%E4%B8%8A).md">7.1 Telegraf + InfluxDB + Grafana(上)</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/8.1%20node-clinic.md">8.1 node-clinic</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 7.1 Telegraf + InfluxDB + Grafana(1)</title>
      <link href="/2019/11/26/7.1%20Telegraf%20+%20InfluxDB%20+%20Grafana(%E4%B8%8A)/"/>
      <url>/2019/11/26/7.1%20Telegraf%20+%20InfluxDB%20+%20Grafana(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>本节将会讲解如何使用 Telegraf(StatsD) + InfluxDB + Grafana 搭建一套完整的监控系统。</p><h2 id="7-1-1-Telegraf-StatsD-InfluxDB-Grafana-简介"><a href="#7-1-1-Telegraf-StatsD-InfluxDB-Grafana-简介" class="headerlink" title="7.1.1 Telegraf(StatsD) + InfluxDB + Grafana 简介"></a>7.1.1 Telegraf(StatsD) + InfluxDB + Grafana 简介</h2><p><a href="https://github.com/influxdata/telegraf">Telegraf</a> 是一个使用 Go 语言开发的代理程序，可收集系统和服务或者其他来源（inputs）的数据，并将其写入 InfluxDB（outputs）数据库，支持多种 inputs 和 outputs 插件。<a href="https://github.com/etsy/statsd">StatsD</a> 是一个使用 Node.js 开发的网络守护进程，通过 UDP 或者 TCP 方式收集各种统计信息，包括计数器和定时器等。</p><p><a href="https://github.com/influxdata/influxdb">InfluxDB</a> 是一个使用 Go 语言开发的开源的分布式时序、事件和指标数据库，无需外部依赖，其设计目标是实现分布式和水平伸缩扩展。</p><p><a href="https://github.com/grafana/grafana">Grafana</a> 是一个使用 Angular + Go 语言开发的开源的、功能齐全的、漂亮的仪表盘和图表的编辑器，可用来做日志的分析与展示曲线图（如 api 的请求日志），支持多种 backend，如 ElasticSearch、InfluxDB、OpenTSDB 等等。</p><p><strong>工作流程</strong>：Telegraf 将 StatsD（inputs）和 InfluxDB（outputs）结合起来，即发往 StatsD 的数据，最终通过 Telegraf 写入了 InfluxDB，然后 Grafana 读取 InfluxDB 的数据展示成图表。</p><h2 id="7-1-2-启动-docker-statsd-influxdb-grafana"><a href="#7-1-2-启动-docker-statsd-influxdb-grafana" class="headerlink" title="7.1.2 启动 docker-statsd-influxdb-grafana"></a>7.1.2 启动 docker-statsd-influxdb-grafana</h2><p>我们使用 Docker 一键启动 Telegraf(StatsD)+ InfluxDB + Grafana，节省搭建环境的时间。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  --name docker-statsd-influxdb-grafana \</span><br><span class="line">  -p 3003:3003 \</span><br><span class="line">  -p 3004:8083 \</span><br><span class="line">  -p 8086:8086 \</span><br><span class="line">  -p 22022:22 \</span><br><span class="line">  -p 8125:8125/udp \</span><br><span class="line">  samuelebistoletti/docker-statsd-influxdb-grafana:latest</span><br></pre></td></tr></table></figure><p>端口映射关系如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host        Container       Service</span><br><span class="line">-----------------------------------</span><br><span class="line">3003        3003            grafana</span><br><span class="line">3004        8083            influxdb-admin</span><br><span class="line">8086        8086            influxdb</span><br><span class="line">8125        8125            statsd</span><br><span class="line">22022       22              sshd</span><br></pre></td></tr></table></figure><h2 id="7-1-3-熟悉-InfluxDB"><a href="#7-1-3-熟悉-InfluxDB" class="headerlink" title="7.1.3 熟悉 InfluxDB"></a>7.1.3 熟悉 InfluxDB</h2><p>容器启动后，浏览器访问 localhost:3004（以下称为 influxdb-admin），如下所示：</p><p><img src="/./assets/7.1.1.png"></p><p>InfluxDB 的基本概念如下：</p><ul><li>database：数据库。</li><li>measurement：数据库中的表。</li><li>point：表里面的一行数据，由时间戳（time）、数据（field）和标签（tag）组成<ul><li>time：每条数据记录的时间戳，是数据库中的主索引（会自动生成）。</li><li>field：各种记录的值（没有索引的属性）。</li><li>tag：各种有索引的属性。</li></ul></li><li>…</li></ul><p>InfluxDB 采用了类 SQL 的查询语法，例如：</p><ul><li>show databases：列出所有数据库。</li><li>show measurements：列出当前数据库的所有表。</li><li>select * from xxx：列出 xxx 表的所有数据。</li><li>…</li></ul><p>我们在 Query 中输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases</span><br></pre></td></tr></table></figure><p>查询结果如下：</p><p><img src="/./assets/7.1.2.png"></p><p>_interal 是 InfluxDB 内部使用的数据库，telegraf 是我们当前 Docker 容器启动后默认创建的测试数据库。</p><h2 id="7-1-4-配置-Grafana"><a href="#7-1-4-配置-Grafana" class="headerlink" title="7.1.4 配置 Grafana"></a>7.1.4 配置 Grafana</h2><p>用浏览器打开 localhost:3003，如下所示：</p><p><img src="/./assets/7.1.3.png"></p><p>输入用户名 root 和密码 root 登录，进入初始化配置页，单击 “Add data source”，如下填写：</p><p><img src="/./assets/7.1.4.png"></p><p>单击 “Save &amp; Test” 保存配置。目前配置好了 Grafana 默认的 datasource 是名为 api 的 InfluxDB，接下来创建测试代码，产生测试数据。</p><h2 id="7-1-5-node-statsd"><a href="#7-1-5-node-statsd" class="headerlink" title="7.1.5 node-statsd"></a>7.1.5 node-statsd</h2><p><a href="https://github.com/sivy/node-statsd">node-statsd</a> 是一个 statsd 的 Node.js client。创建以下测试代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StatsD</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-statsd&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> statsdClient = <span class="keyword">new</span> <span class="title class_">StatsD</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">8125</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> responseTime = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>)</span><br><span class="line">  statsdClient.<span class="title function_">timing</span>(<span class="string">&#x27;api&#x27;</span>, responseTime, <span class="keyword">function</span> (<span class="params">error, bytes</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Successfully sent <span class="subst">$&#123;bytes&#125;</span> bytes, responseTime <span class="subst">$&#123;responseTime&#125;</span>ms`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>运行以上代码，每一秒钟会产生一个 0~99 之间的随机值（模拟响应时间，单位为毫秒），发送到 StatsD，StatsD 会通过 Telegraf 将这些数据写入 InfluxDB 的 telegraf 数据库。</p><p>回到 influxdb-admin，单击右上角的下拉菜单切换到 telegraf 数据库，然后输入 <code>show measurements </code> 查看已经存在 api 表了，然后输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> api</span><br></pre></td></tr></table></figure><p>查询结果如下：</p><p><img src="/./assets/7.1.5.png"></p><p>可以看出 api 表有以下几个字段：</p><ul><li>time：InfluxDB 默认添加的时间戳。</li><li>90_percentile：所有记录中从小到大 90% 那个点的值。</li><li>count：一次收集的日志数量，可以看出每条记录（point）的 count 值接近或等于 10，而我们的测试代码是 1s 发送一条数据，也就说明 Telegraf 默认设置是 10s 收集一次数据，默认配置也的确是这样的，见：<a href="https://github.com/samuelebistoletti/docker-statsd-influxdb-grafana/blob/master/telegraf/telegraf.conf">https://github.com/samuelebistoletti/docker-statsd-influxdb-grafana/blob/master/telegraf/telegraf.conf</a>。</li><li>host：机器地址。</li><li>lower：最小的那条记录的值。</li><li>mean：所有记录的平均值。</li><li>metric_type：metric 类型。</li><li>stddev：所有记录的标准差。</li><li>upper：最大的那条记录的值。</li></ul><h2 id="7-1-6-创建-Grafana-图表"><a href="#7-1-6-创建-Grafana-图表" class="headerlink" title="7.1.6 创建 Grafana 图表"></a>7.1.6 创建 Grafana 图表</h2><p>回到 Grafana，单击左上角 Grafana 图标的下拉菜单，单击 Dashboards 回到仪表盘页继续完成配置，单击 “New dashboard”，然后单击创建 Graph 类型的图表，就创建了一个空的图表，如下所示：</p><p><img src="/./assets/7.1.6.png"></p><p>单击当前的图表，选择 Edit，修改如下几个地方：</p><ol><li>Metrics 配置中选择 FROM -&gt; api 表，SELECT -&gt; field(mean) 字段。</li><li>Display 配置中 “Null value” 选择 connected，将每个点连成折线。</li></ol><p>效果如下所示：</p><p><img src="/./assets/7.1.7.png"></p><h2 id="7-1-7-模拟真实环境"><a href="#7-1-7-模拟真实环境" class="headerlink" title="7.1.7 模拟真实环境"></a>7.1.7 模拟真实环境</h2><p><strong>middlewares&#x2F;statsd.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StatsD</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-statsd&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> statsdClient = <span class="keyword">new</span> <span class="title class_">StatsD</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">8125</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">routerName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">statsdMiddleware</span> (ctx, next) &#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">      <span class="keyword">const</span> spent = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start</span><br><span class="line">      statsdClient.<span class="title function_">timing</span>(<span class="string">`api_<span class="subst">$&#123;routerName&#125;</span>`</span>, spent)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      statsdClient.<span class="title function_">increment</span>(<span class="string">`api_<span class="subst">$&#123;routerName&#125;</span>_<span class="subst">$&#123;e.status || (ctx.status !== <span class="number">404</span> ? ctx.status : <span class="number">500</span>)&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">throw</span> e</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>server.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Bluebird</span> = <span class="built_in">require</span>(<span class="string">&#x27;bluebird&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"><span class="keyword">const</span> statsd = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/statsd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">controller</span>: [</span><br><span class="line">  <span class="title function_">statsd</span>(<span class="string">&#x27;getHome&#x27;</span>),</span><br><span class="line">  <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 模拟十分之一出错概率</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">      ctx.<span class="keyword">throw</span>(<span class="number">400</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模拟 1-100 毫秒响应时间</span></span><br><span class="line">    <span class="keyword">const</span> responseTime = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span> + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Bluebird</span>.<span class="title function_">delay</span>(responseTime)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Spent <span class="subst">$&#123;responseTime&#125;</span>ms`</span>)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">]&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>client.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 模拟 1-10 的 tps</span></span><br><span class="line">  <span class="keyword">const</span> tps = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tps; i++) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>打开两个终端，分别运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node server.js</span><br><span class="line">$ node client.js</span><br></pre></td></tr></table></figure><p>回到 influxdb-admin，输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> measurements</span><br></pre></td></tr></table></figure><p>可以看到已经有 api_getHome 和 api_getHome_400 表了。回到 Grafana，在一行（row）里创建两个图表，分别为：</p><ul><li>请求量：包含了正常请求（200）和错误请求（4xx、5xx 等等）请求量的折线图。</li><li>响应时间：正常请求的最低（lower）、平均（mean）、最高（upper）响应时间的折线图。</li></ul><p><img src="/./assets/7.1.8.png"></p><p>以 “getHome 响应时间” 的图表为例，Metrics 配置截图如下：</p><p><img src="/./assets/7.1.9.png"></p><h2 id="7-1-8-参考链接"><a href="#7-1-8-参考链接" class="headerlink" title="7.1.8 参考链接"></a>7.1.8 参考链接</h2><ul><li><a href="https://www.cnblogs.com/shhnwangjian/p/6897216.html">https://www.cnblogs.com/shhnwangjian/p/6897216.html</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.5%20Sentry.md">6.5 Sentry</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/7.2%20Telegraf%20%2B%20InfluxDB%20%2B%20Grafana(%E4%B8%8B).md">7.2 Telegraf + InfluxDB + Grafana(下)</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 6.5 Sentry</title>
      <link href="/2019/11/03/6.5%20Sentry/"/>
      <url>/2019/11/03/6.5%20Sentry/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="6-5-1-什么是-Sentry？"><a href="#6-5-1-什么是-Sentry？" class="headerlink" title="6.5.1 什么是 Sentry？"></a>6.5.1 什么是 Sentry？</h2><p>Sentry<a href="sentry.io">官网</a>的介绍：</p><blockquote><p>Sentry’s real-time error tracking gives you insight into production deployments and information to reproduce and fix crashes.</p></blockquote><p><strong>简而言之</strong>：Sentry 是一个开源的实时错误日志收集平台。</p><h2 id="6-5-2-安装-Sentry"><a href="#6-5-2-安装-Sentry" class="headerlink" title="6.5.2 安装 Sentry"></a>6.5.2 安装 Sentry</h2><p>我们使用 Docker 安装并启动 Sentry，步骤如下：</p><ol><li><p>启动一个 Redis 容器，命名为 sentry-redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name sentry-redis redis</span><br></pre></td></tr></table></figure></li><li><p>启动一个 Postgres 容器，命名为 sentry-postgres：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  --name sentry-postgres \</span><br><span class="line">  -e POSTGRES_PASSWORD=secret \</span><br><span class="line">  -e POSTGRES_USER=sentry \</span><br><span class="line">  postgres</span><br></pre></td></tr></table></figure></li><li><p>生成一个 Sentry 的 secret key：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> sentry config generate-secret-key</span><br></pre></td></tr></table></figure><p>将下面的 &lt;secret-key&gt; 都替换成上面生成的 secret key。</p></li><li><p>如果是新的数据库（第 1 次运行），则需要运行 upgrade：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --<span class="built_in">rm</span> \</span><br><span class="line">  -e SENTRY_SECRET_KEY=<span class="string">&#x27;&lt;secret-key&gt;&#x27;</span> \</span><br><span class="line">  --<span class="built_in">link</span> sentry-postgres:postgres \</span><br><span class="line">  --<span class="built_in">link</span> sentry-redis:redis \</span><br><span class="line">  sentry upgrade</span><br></pre></td></tr></table></figure><p>按步骤填写自己的信息：</p><p><img src="/./assets/6.5.1.jpg"></p><p>最终创建了一个超级管理员和一个默认的名为 sentry 的组织（organization）。</p></li><li><p>启动 Sentry，并对外暴露 9000 端口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  --name my-sentry \</span><br><span class="line">  -e SENTRY_SECRET_KEY=<span class="string">&#x27;&lt;secret-key&gt;&#x27;</span> \</span><br><span class="line">  --<span class="built_in">link</span> sentry-redis:redis \</span><br><span class="line">  --<span class="built_in">link</span> sentry-postgres:postgres \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  sentry</span><br></pre></td></tr></table></figure></li><li><p>启动 Celery cron 和 Celery workers：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  --name sentry-cron \</span><br><span class="line">  -e SENTRY_SECRET_KEY=<span class="string">&#x27;&lt;secret-key&gt;&#x27;</span> \</span><br><span class="line">  --<span class="built_in">link</span> sentry-postgres:postgres \</span><br><span class="line">  --<span class="built_in">link</span> sentry-redis:redis \</span><br><span class="line">  sentry run cron</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  --name sentry-worker-1 \</span><br><span class="line">  -e SENTRY_SECRET_KEY=<span class="string">&#x27;&lt;secret-key&gt;&#x27;</span> \</span><br><span class="line">  --<span class="built_in">link</span> sentry-postgres:postgres \</span><br><span class="line">  --<span class="built_in">link</span> sentry-redis:redis \</span><br><span class="line">  sentry run worker</span><br></pre></td></tr></table></figure><p><strong>小提示</strong>：Celery 是用 Python 写的一个分布式任务调度模块。</p></li><li><p>完成！</p></li></ol><p>用浏览器打开 localhost:9000，就能看到 Sentry 的登录页面了，如下所示：</p><p><img src="/./assets/6.5.2.jpg"></p><p>首次登录时需要填写一些必要信息 ，如下所示：</p><p><img src="/./assets/6.5.3.png"></p><p>单击 Continue 进入 Sentry 仪表盘（Dashboard）。单击右上角的 New Project 按钮创建一个项目，选择 Node.js 并填写项目名称为 API，然后单击 Create Project 按钮创建项目。如下所示：</p><p><img src="/./assets/6.5.4.png"></p><p>创建成功后进入 Node.js 使用示例页面，我们选择使用 Koa 测试，在右侧选择 Koa：</p><p><img src="/./assets/6.5.5.png"></p><p>上图所示是 koa@1 的示例代码，我们以 Paloma（基于  koa@2）为例，编写测试代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Raven</span> = <span class="built_in">require</span>(<span class="string">&#x27;raven&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Raven</span>.<span class="title function_">config</span>(<span class="variable constant_">DSN</span>).<span class="title function_">install</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Raven</span>.<span class="title function_">captureException</span>(err, <span class="function">(<span class="params">err, eventId</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Reported error &#x27;</span> + eventId)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>raven 是 Node.js 版的 Sentry SDK，用来收集和发送错误日志。</p><p><strong>小提示</strong>：将 DSN 替换为上图中的 <code>http://xxx@localhost:9000/2</code>，DSN 既告诉客户端 Sentry 服务器的地址，也用来当做身份认证的 token。</p><p>运行以上测试代码，访问 localhost:3000，错误信息会发送给 Sentry。Sentry 展示如下：</p><p><img src="/./assets/6.5.6.png"></p><p>点进去可以看到详细的信息：</p><p><img src="/./assets/6.5.7.png"></p><p>Sentry 还有许多功能，比如：错误归类、展示错误的频率柱状图、将错误指派给组织中的某个人、给错误添加标签、查看这类错误事件的历史、标记错误为已解决、在错误下发表评论、警报等等功能。</p><h2 id="6-5-3-koa-raven"><a href="#6-5-3-koa-raven" class="headerlink" title="6.5.3 koa-raven"></a>6.5.3 koa-raven</h2><p>笔者将 raven 封装成 Koa 的一个中间件。使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raven = <span class="built_in">require</span>(<span class="string">&#x27;koa-raven&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">raven</span>(<span class="variable constant_">DSN</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>或者使用 ctx.raven：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raven = <span class="built_in">require</span>(<span class="string">&#x27;koa-raven&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">raven</span>(<span class="variable constant_">DSN</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ctx.<span class="property">raven</span>.<span class="title function_">captureException</span>(e, &#123; <span class="attr">extra</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span> &#125; &#125;)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">500</span></span><br><span class="line">    ctx.<span class="property">body</span> = e.<span class="property">stack</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="6-5-4-参考链接"><a href="#6-5-4-参考链接" class="headerlink" title="6.5.4 参考链接"></a>6.5.4 参考链接</h2><ul><li><a href="https://sentry.io/">https://sentry.io/</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.4%20OpenTracing%20%2B%20Jaeger.md">6.4 OpenTracing + Jaeger</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/7.1%20Telegraf%20%2B%20InfluxDB%20%2B%20Grafana(%E4%B8%8A).md">7.1 Telegraf + InfluxDB + Grafana(上)</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 6.4 OpenTracing + Jaeger</title>
      <link href="/2019/10/28/6.4%20OpenTracing%20+%20Jaeger/"/>
      <url>/2019/10/28/6.4%20OpenTracing%20+%20Jaeger/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="6-4-1-什么是-OpenTracing？"><a href="#6-4-1-什么是-OpenTracing？" class="headerlink" title="6.4.1 什么是 OpenTracing？"></a>6.4.1 什么是 OpenTracing？</h2><p><a href="http://opentracing.io/">OpenTracing</a> 是一个分布式追踪规范。OpenTracing 通过提供平台无关、厂商无关的 API，为分布式追踪提供统一的概念和数据标准，使得开发人员能够方便的添加（或更换）追踪系统的实现。OpenTracing 定义了如下几个术语：</p><ul><li>Span：代表了系统中的一个逻辑工作单元，它具有操作名、操作开始时间以及持续时长。Span 可能会有嵌套或排序，从而对因果关系建模。<ul><li>Tags：每个 Span 可以有多个键值对（key: value）形式的 Tags，Tags 是没有时间戳的，支持简单地对 Span 进行注解和补充。</li><li>Logs：每个 Span 可以进行多次 Log 操作，每一次 Log 操作，都需要一个带时间戳的时间名称，以及可选的任意大小的存储结构。</li></ul></li><li>Trace：代表了系统中的一个数据&#x2F;执行路径（一个或多个 Span），可以将其理解为 Span 的有向无环图。</li></ul><p>OpenTracing 还有其他一些概念，这里不过多解释。我们看个传统的调用关系例子，如下所示：</p><p><img src="/./assets/6.4.1.jpg"></p><blockquote><p>在一个分布式系统中，追踪一个事务或者调用流一般如上图所示。虽然这种图对于看清各组件的组合关系是很有用的，但是，它不能很好显示组件的调用时间，以及是串行调用还是并行调用。如果展现更复杂的调用关系，会更加复杂，甚至无法画出这样的图。另外，这种图也无法显示调用间的时间间隔以及是否通过定时调用来启动调用。一种更有效的展现一个典型的 trace 过程，如下图所示：</p></blockquote><p><img src="/./assets/6.4.2.jpg"></p><blockquote><p>这种展现方式增加了执行时间的上下文，相关服务间的层次关系，进程或者任务的串行或并行调用关系。这样的视图有助于发现系统调用的关键路径。通过关注关键路径的执行过程，项目团队可能专注于优化路径中的关键位置，最大幅度地提升系统的性能。例如：可以通过追踪一个资源定位的调用情况，明确底层的调用情况，发现哪些操作有阻塞的情况。</p></blockquote><h2 id="6-4-2-什么是-Jaeger"><a href="#6-4-2-什么是-Jaeger" class="headerlink" title="6.4.2 什么是 Jaeger?"></a>6.4.2 什么是 Jaeger?</h2><p>Jaeger 是 OpenTracing 的一个实现，是 Uber 开源的一个分布式追踪系统，其灵感来源于Dapper 和 OpenZipkin。从 2016 年开始，该系统已经在 Uber 内部得到了广泛的应用，它可以用于微服务架构应用的监控，特性包括分布式上下文传播（Distributed context propagation）、分布式事务监控、根原因分析、服务依赖分析以及性能优化。该项目已经被云原生计算基金会（Cloud Native Computing Foundation，CNCF）接纳为第 12 个项目。</p><h2 id="6-4-3-启动-Jaeger-Jaeger-UI"><a href="#6-4-3-启动-Jaeger-Jaeger-UI" class="headerlink" title="6.4.3 启动 Jaeger + Jaeger UI"></a>6.4.3 启动 Jaeger + Jaeger UI</h2><p>我们使用 Docker 启动 Jaeger + Jaeger UI（Jaeger 可视化 web 控制台），运行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p5775:5775/udp \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  jaegertracing/all-in-one:latest</span><br></pre></td></tr></table></figure><p>用浏览器打开 localhost:16686，如下所示：</p><p><img src="/./assets/6.4.3.jpg"></p><p>现在并没有任何数据，接下来我们看看如何使用 Jaeger 接收并查询日志。</p><h2 id="6-4-4-如何使用-OpenTracing-Jaeger"><a href="#6-4-4-如何使用-OpenTracing-Jaeger" class="headerlink" title="6.4.4 如何使用 OpenTracing + Jaeger?"></a>6.4.4 如何使用 OpenTracing + Jaeger?</h2><p>OpenTracing 和 Jaeger 分别提供了 JavaScript&#x2F;Node.js 的 SDK：</p><ul><li><a href="https://github.com/opentracing/opentracing-javascript">opentracing&#x2F;opentracing-javascript</a></li><li><a href="https://github.com/jaegertracing/jaeger-client-node">jaegertracing&#x2F;jaeger-client-node</a></li></ul><p>opentracing 示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> opentracing = <span class="built_in">require</span>(<span class="string">&#x27;opentracing&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> the default OpenTracing tracer does not record any tracing information.</span></span><br><span class="line"><span class="comment">// Replace this line with the tracer implementation of your choice.</span></span><br><span class="line"><span class="keyword">const</span> tracer = <span class="keyword">new</span> opentracing.<span class="title class_">Tracer</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> span = tracer.<span class="title function_">startSpan</span>(<span class="string">&#x27;http_request&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  host : <span class="string">&#x27;example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  port : <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">http.<span class="title function_">request</span>(opts, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// assuming no retries, mark the span as failed</span></span><br><span class="line">    span.<span class="title function_">setTag</span>(opentracing.<span class="property">Tags</span>.<span class="property">ERROR</span>, <span class="literal">true</span>)</span><br><span class="line">    span.<span class="title function_">log</span>(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;error.object&#x27;</span>: err, <span class="string">&#x27;message&#x27;</span>: err.<span class="property">message</span>, <span class="string">&#x27;stack&#x27;</span>: err.<span class="property">stack</span>&#125;)</span><br><span class="line">    span.<span class="title function_">finish</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    span.<span class="title function_">log</span>(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;data_received&#x27;</span>, <span class="string">&#x27;chunk_length&#x27;</span>: chunk.<span class="property">length</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    span.<span class="title function_">log</span>(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;request_end&#x27;</span>&#125;)</span><br><span class="line">    span.<span class="title function_">finish</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><p>有以下两点需要解释：</p><ol><li>需要将上面的 <code>const tracer = new opentracing.Tracer()</code> 替换成自己的 tracer 实现，即 Jaeger 的实现。</li><li>通过 tracer.startSpan 启动一个 Span，span.setTag 用来设置 Tags，span.log 用来设置 Logs，span.finish 用来结束一个 Span。</li></ol><p>这有点类似于我们的手动埋点，只不过变成了一个规范而已。但 OpenTracing 的功能不止如此，上面只是一个 Span 的用法，Span 之间还可以关联调用关系，最后得到一个 DAG（有向无环图）。</p><p><strong>举个例子</strong>：假如我们正在做微服务，多个服务之间有调用关系（不管是 HTTP 还是 RPC 等），每次调用服务在内部可能产生多个 Span，最终会在 Jaeger 控制台页面看到一个完整的 Trace 和 DAG 图（微服务之间的调用关系）。</p><p>jaeger-client-node 使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tracer = <span class="keyword">new</span> jaeger.<span class="title class_">Tracer</span>(</span><br><span class="line">  serviceName,</span><br><span class="line">  <span class="keyword">new</span> jaeger.<span class="title class_">RemoteReporter</span>(<span class="keyword">new</span> <span class="title class_">UDPSender</span>()),</span><br><span class="line">  <span class="keyword">new</span> jaeger.<span class="title class_">RateLimitingSampler</span>(<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建一个 tracer，可以接收 3 个参数：</p><ol><li>serviceName：服务名。</li><li>Reporter：上报器，即往哪发日志，如上述代码是通过 UDP 发送日志，默认地址 localhost:6832。</li><li>Sampler：采样器，即日志如何采样，如上述代码是限制 1 秒采样一次。</li></ol><p>这里不再详细介绍其它选项，读者可自行去查阅 jaeger-client-node 的文档。</p><h2 id="6-4-5-koa-await-breakpoint-jaeger"><a href="#6-4-5-koa-await-breakpoint-jaeger" class="headerlink" title="6.4.5 koa-await-breakpoint-jaeger"></a>6.4.5 koa-await-breakpoint-jaeger</h2><p>通过上面的例子我们知道，在使用 Jaeger 时需要手动埋点。前面我们介绍了 koa-await-breakpoint 日志自动打点，可自定义 store，koa-await-breakpoint-jaeger 是为 koa-await-breakpoint 写的 store 的 adaptor，在实现上有一些小技巧，有兴趣的读者可以去读下源码。</p><p>还是以 koa-await-breakpoint 的 example 举例，只添加了两行代码引入 jaeger 的使用。代码如下：</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">JaegerStore</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-await-breakpoint-jaeger&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> koaAwaitBreakpoint = <span class="built_in">require</span>(<span class="string">&#x27;koa-await-breakpoint&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">  <span class="attr">files</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>],</span><br><span class="line">  <span class="attr">store</span>: <span class="keyword">new</span> <span class="title class_">JaegerStore</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(koaAwaitBreakpoint)</span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>, <span class="attr">controller</span>: <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>).<span class="property">createUser</span> &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPOST localhost:3000/users</span><br></pre></td></tr></table></figure><p>刷新 localhost:16686，可以看到已经有日志了，如下所示：</p><p><img src="/./assets/6.4.4.jpg"></p><p>选择 Sercice -&gt; api，Operation -&gt; POST &#x2F;users，单击 Find Traces 查看所有结果，右侧展示了一条日志，点进去如下所示：</p><p><img src="/./assets/6.4.5.jpg"></p><p><strong>小提示</strong>：可以根据 tags 过滤结果。</p><p><strong>注意</strong>：Jaeger 是分布式追踪系统，通常用来追踪多个服务之间的调用关系，而这里用来追踪一个服务的多个函数之间的调用关系。</p><p>修改 routes&#x2F;user.js 的 createComment 函数 throw 一个 <code>new Error(&#39;test&#39;)</code>，重新运行，如下所示：</p><p><img src="/./assets/6.4.6.jpg"></p><p>可以看出，Jaeger 完美地展现了在一个请求到来时，函数之间的调用关系、层级关系及耗时，甚至函数体和错误栈都有！然后，我们可以用 requestId 去 ELK 中查询日志了。</p><h2 id="6-4-6-参考链接"><a href="#6-4-6-参考链接" class="headerlink" title="6.4.6 参考链接"></a>6.4.6 参考链接</h2><ul><li><a href="https://wu-sheng.gitbooks.io/opentracing-io/content/">https://wu-sheng.gitbooks.io/opentracing-io/content/</a></li><li><a href="https://segmentfault.com/a/1190000008895129">https://segmentfault.com/a/1190000008895129</a></li><li><a href="http://www.infoq.com/cn/news/2017/11/Uber-open-spurce-Jaeger">http://www.infoq.com/cn/news/2017/11/Uber-open-spurce-Jaeger</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.3%20ELK.md">6.3 ELK</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.5%20Sentry.md">6.5 Sentry</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 6.3 ELK</title>
      <link href="/2019/10/15/6.3%20ELK/"/>
      <url>/2019/10/15/6.3%20ELK/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>ELK 是 ElasticSearch + Logstash + Kibana 这套组合工具的简称，是一个常用的日志系统。</p><ul><li>ElasticSearch：是一款开源的基于 Lucene 之上实现的一个分布式搜索引擎，也是一个存储引擎（例如：日志），它的特点有：分布式、零配置、自动发现、索引自动分片、索引副本机制、Restful 风格的接口、多数据源和自动搜索负载等。</li><li>Logstash：是一款开源的日志收集工具，它可以对日志进行收集、分析、过滤，并将其存储（例如：ElasticSearch）起来供以后使用。</li><li>Kibana：是一款开源的可视化工具，可以为 ElasticSearch 提供的日志分析友好的 Web 界面，可以汇总、分析和搜索重要的数据日志。</li></ul><h2 id="6-3-1-安装-ELK"><a href="#6-3-1-安装-ELK" class="headerlink" title="6.3.1 安装 ELK"></a>6.3.1 安装 ELK</h2><p>我们使用 Docker 安装 ELK，运行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 5601:5601 \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 5044:5044 \</span><br><span class="line">    -p 15044:15044/udp \</span><br><span class="line">    -it --name elk sebp/elk</span><br></pre></td></tr></table></figure><p>进入容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it elk /bin/bash</span><br></pre></td></tr></table></figure><p>运行以下命令设置 logstash 的 input 和 output：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/logstash/bin/logstash --path.data /tmp/logstash/data \</span></span><br><span class="line">  -e <span class="string">&#x27;input &#123; udp &#123; codec =&gt; &quot;json&quot; port =&gt; 15044 &#125; &#125; output &#123; elasticsearch &#123; hosts =&gt; [&quot;localhost&quot;] &#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里我们启动一个 15044 的 UDP 端口，用来接收通过 UDP 发送到 Logstash 的日志。</p><p>用浏览器打开 localhost:5601，如下所示：</p><p><img src="/./assets/6.3.1.png"></p><p>目前还没有指定 index（ElasticSearch 的 index 类似于 MySQL&#x2F;MongoDB 中的 database），即日志来源。下面我们尝试向 ELK 中写入一些日志。</p><h2 id="6-3-2-使用-ELK"><a href="#6-3-2-使用-ELK" class="headerlink" title="6.3.2 使用 ELK"></a>6.3.2 使用 ELK</h2><p>这里仍然以使用 koa-await-breakpoint 为例，来演示如何将日志发送到 ELK。</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaAwaitBreakpoint = <span class="built_in">require</span>(<span class="string">&#x27;koa-await-breakpoint&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">  <span class="attr">files</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>],</span><br><span class="line">  <span class="attr">store</span>: <span class="built_in">require</span>(<span class="string">&#x27;./logger&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(koaAwaitBreakpoint)</span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>, <span class="attr">controller</span>: <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>).<span class="property">createUser</span> &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>logger.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Logstash</span> = <span class="built_in">require</span>(<span class="string">&#x27;logstash-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logstash = <span class="keyword">new</span> <span class="title class_">Logstash</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;udp&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">15044</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  save (log) &#123;</span><br><span class="line">    <span class="keyword">if</span> (log.<span class="property">error</span>) &#123;</span><br><span class="line">      log.<span class="property">errMsg</span> = log.<span class="property">error</span>.<span class="property">message</span></span><br><span class="line">      log.<span class="property">errStack</span> = log.<span class="property">error</span>.<span class="property">stack</span></span><br><span class="line">    &#125;</span><br><span class="line">    logstash.<span class="title function_">send</span>(log)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>routes&#x2F;user.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mongolass</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongolass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mongolass = <span class="keyword">new</span> <span class="title class_">Mongolass</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comment</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;Comment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">createUser</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = ctx.<span class="property">query</span>.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> age = +ctx.<span class="property">query</span>.<span class="property">age</span> || <span class="number">18</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">createUser</span>(name, age)</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span> (name, age) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = (<span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">  &#125;)).<span class="property">ops</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">createPost</span>(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createPost</span> (user) &#123;</span><br><span class="line">  <span class="keyword">const</span> post = (<span class="keyword">await</span> <span class="title class_">Post</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">uid</span>: user.<span class="property">_id</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;)).<span class="property">ops</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">createComment</span>(user, post)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createComment</span> (user, post) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Comment</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">userId</span>: user.<span class="property">_id</span>,</span><br><span class="line">    <span class="attr">postId</span>: post.<span class="property">_id</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;comment&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPOST localhost:3000/users</span><br></pre></td></tr></table></figure><p>此时刷新 Kibana，如下所示：</p><p><img src="/./assets/6.3.2.png"></p><p>在初次使用 Kibana 时，需要配置 Kibana 从 ElasticSearch 的哪些 index 中搜索日志，我们在 <code>Index pattern</code> 处填 <code>logstash-*</code>，然后单击 Next step 按钮，在 <code>Time Filter field name</code> 中选择 timestamp，单击 Create index pattern 完成配置。</p><p><strong>注意</strong>：我们选择 timestamp 而不是默认的 @timestamp，是因为在 koa-await-breakpoint 的日志中有 timestamp 字段。</p><p>单击左侧目录的 Discover，我们发现已经有日志了。分别单击左侧出现的 Available Fields 的 fn、type、step、take，然后按 step 升序展示，如下所示：</p><p><img src="/./assets/6.3.3.png"></p><p>是不是一目了然！我们把每个请求的每一步的函数及其执行时间都记录下来了。</p><p>修改 routes&#x2F;users.js 的 createComment，throw 一个 <code>new Error(&#39;test&#39;)</code>。重启程序并发起一个请求，ELK 显示如下：</p><p><img src="/./assets/6.3.4.png"></p><p><strong>小提示</strong>：在实际应用中会有非常多的日志，我们可以通过 requestId 找到一个请求的所有日志，在 7.2 小节会讲解。</p><p>ELK 非常强大，基本能满足所有日志查询需求，Kibana 的查询使用 lucene 语法，用 10 分钟左右就能大体上手。Kibana 还能创建各种仪表盘和聚合图表，读者可自行尝试。</p><h2 id="6-3-3-参考链接"><a href="#6-3-3-参考链接" class="headerlink" title="6.3.3 参考链接"></a>6.3.3 参考链接</h2><ul><li><a href="http://blog.51cto.com/baidu/1676798">http://blog.51cto.com/baidu/1676798</a></li><li><a href="http://elk-docker.readthedocs.io/">http://elk-docker.readthedocs.io</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.2%20async_hooks.md">6.2 async_hooks</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.4%20OpenTracing%20%2B%20Jaeger.md">6.4 OpenTracing + Jaeger</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 6.2 Async Hooks</title>
      <link href="/2019/09/29/6.2%20async_hooks/"/>
      <url>/2019/09/29/6.2%20async_hooks/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>上一小节讲解了 koa-await-breakpoint 的用法，但 koa-await-breakpoint 仍然有一个很大的缺憾，即无法记录除 routes&#x2F;controllers 外的函数的执行时间（因为获取不到当前请求的 ctx）。举个通俗的例子：在一个路由的 controller 里面调用了 A ，A 调用了其他文件的 B ，B 又调用了其他文件的 C…这是非常常见的用法，但之前使用 koa-await-breakpoint 只能获取 A 的执行时间，无法获取 B 和 C 的执行时间。</p><p><strong>根本原因在于</strong>：无法知道函数之间的调用关系，即 B 不知道是 A 调用的它，即便知道也不知道是哪次请求到来时执行的 A 调用的它。</p><p>但是，<a href="mailto:&#110;&#111;&#x64;&#101;&#64;&#x38;&#46;&#x31;">&#110;&#111;&#x64;&#101;&#64;&#x38;&#46;&#x31;</a> 引入了一个黑魔法——Async Hooks。</p><h2 id="6-2-1-Async-Hooks"><a href="#6-2-1-Async-Hooks" class="headerlink" title="6.2.1 Async Hooks"></a>6.2.1 Async Hooks</h2><p>我们先看看 async_hooks 是什么。Node.js 官网对 async_hooks 的介绍为：</p><blockquote><p>The <code>async_hooks</code> module provides an API to register callbacks tracking the lifetime of asynchronous resources created inside a Node.js application.</p></blockquote><p><strong>一句话概括</strong>：async_hooks 用来追踪 Node.js 中异步资源的生命周期。</p><p>我们来看段测试代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> async_hooks = <span class="built_in">require</span>(<span class="string">&#x27;async_hooks&#x27;</span>)</span><br><span class="line"></span><br><span class="line">async_hooks.<span class="title function_">createHook</span>(&#123;</span><br><span class="line">  init (asyncId, type, triggerAsyncId, resource) &#123;</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`<span class="subst">$&#123;type&#125;</span>(<span class="subst">$&#123;asyncId&#125;</span>): trigger: <span class="subst">$&#123;triggerAsyncId&#125;</span>\n`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy (asyncId) &#123;</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`destroy: <span class="subst">$&#123;asyncId&#125;</span>\n`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">enable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">A</span> () &#123;</span><br><span class="line">  fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`A -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`A in setTimeout -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line">    <span class="title function_">B</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">B</span> () &#123;</span><br><span class="line">  fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`B -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line">  process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`B in process.nextTick -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line">    <span class="title function_">C</span>()</span><br><span class="line">    <span class="title function_">C</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C</span> () &#123;</span><br><span class="line">  fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`C -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`C in promise.then -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeSync</span>(<span class="number">1</span>, <span class="string">`top level -&gt; <span class="subst">$&#123;async_hooks.executionAsyncId()&#125;</span>\n`</span>)</span><br><span class="line"><span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p>async_hooks.createHook 可以注册 4 个方法来跟踪所有异步资源的初始化（init）、回调之前（before）、回调之后（after）、销毁后（destroy）事件，并通过调用 .enable() 启用，调用 .disable() 关闭。</p><p>这里我们只关心异步资源的初始化和销毁的事件，并使用 <code>fs.writeSync(1, msg)</code> 打印到标准输出，writeSync 的第 1 个参数接收文件描述符，1 表示标准输出。为什么不使用 console.log 呢？因为 console.log 是一个异步操作，如果在 init、before、after 和 destroy 事件处理函数中出现，就会导致无限循环，同理也不能使用任何其他的异步操作。</p><p>运行该程序，打印如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">top level -&gt; 1</span><br><span class="line">PROMISE(6): trigger: 1</span><br><span class="line">A -&gt; 1</span><br><span class="line">Timeout(7): trigger: 1</span><br><span class="line">TIMERWRAP(8): trigger: 1</span><br><span class="line">A in setTimeout -&gt; 7</span><br><span class="line">PROMISE(9): trigger: 7</span><br><span class="line">B -&gt; 7</span><br><span class="line">TickObject(10): trigger: 7</span><br><span class="line">B in process.nextTick -&gt; 10</span><br><span class="line">C -&gt; 10</span><br><span class="line">PROMISE(11): trigger: 10</span><br><span class="line">PROMISE(12): trigger: 11</span><br><span class="line">C -&gt; 10</span><br><span class="line">PROMISE(13): trigger: 10</span><br><span class="line">PROMISE(14): trigger: 13</span><br><span class="line">C in promise.then -&gt; 12</span><br><span class="line">C in promise.then -&gt; 14</span><br><span class="line">destroy: 7</span><br><span class="line">destroy: 10</span><br><span class="line">destroy: 8</span><br></pre></td></tr></table></figure><p>这段程序的打印结果包含了很多信息，下面逐一进行解释：</p><ol><li>为了实现对异步资源的跟踪，Node.js 对每一个函数（不论异步还是同步）提供了一个 async scope，我们可以通过调用 <code>async_hooks.executionAsyncId()</code> 来获取函数当前的 async scope 的 id（称为 asyncId），通过调用 <code>async_hooks.triggerAsyncId()</code> 来获取当前函数调用者的 asyncId。</li><li>异步资源在创建时触发 init 事件函数，init 函数中的第 1 个参数代表该异步资源的 asyncId，type 表示异步资源的类型（例如 TCPWRAP、PROMISE、Timeout、Immediate、TickObject 等等），triggerAsyncId 表示该异步资源的调用者的 asyncId。异步资源在销毁时触发 destroy 事件函数，该函数只接收一个参数，即该异步资源的 asyncId。</li><li>函数调用关系明确。我们通过上面的打印结果可以很容易地看出（从下往上看） ：C（asyncId: 10）被 B（asyncId: 7）调用，B（asyncId: 7）被 A（asyncId: 1）调用。而且 C 的 promise.then 里面的 asyncId（值为 12&#x2F;14）也可以通过 12&#x2F;14 -&gt; 11&#x2F;13 -&gt; 10 定位到 C 的 asyncId（值为 10）。</li><li>同步函数每次调用的 asyncId 都一样，如上所示，C 调用了两次，都打印了 C -&gt; 10，与调用方的作用域的 asyncId 一致，即如上所示打印的 B in process.nextTick -&gt; 10。异步函数每次调用的 asyncId 都不一样，即如上所示打印的 C in promise.then -&gt; 12 和 C in promise.then -&gt; 14。</li><li>最外层作用域的 asyncId 总是 1，每个异步资源在创建时 asyncId 全局递增。</li></ol><p>上面 5 条结论非常重要。接下来我们看看如何使用 async_hooks 改造 koa-await-breakpoint。</p><h2 id="6-2-2-改造-koa-await-breakpoint"><a href="#6-2-2-改造-koa-await-breakpoint" class="headerlink" title="6.2.2 改造 koa-await-breakpoint"></a>6.2.2 改造 koa-await-breakpoint</h2><p>我们通过前面的结论已经知道，使用 async_hooks 时可以通过 asyncId 串起函数的调用关系，但是如何将这些函数的调用链与 koa 接收的每个请求关联起来呢?</p><p>首先，定义一个全局 Map，存储函数的调用关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> async_hooks = <span class="built_in">require</span>(<span class="string">&#x27;async_hooks&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> asyncIdMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">async_hooks.<span class="title function_">createHook</span>(&#123;</span><br><span class="line">  init (asyncId, type, triggerAsyncId) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="title function_">getCtx</span>(triggerAsyncId)</span><br><span class="line">    <span class="keyword">if</span> (ctx) &#123;</span><br><span class="line">      asyncIdMap.<span class="title function_">set</span>(asyncId, ctx)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      asyncIdMap.<span class="title function_">set</span>(asyncId, triggerAsyncId)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy (asyncId) &#123;</span><br><span class="line">    asyncIdMap.<span class="title function_">delete</span>(asyncId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">enable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCtx</span> (asyncId) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!asyncId) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> asyncId === <span class="string">&#x27;object&#x27;</span> &amp;&amp; asyncId.<span class="property">app</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> asyncId</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getCtx</span>(asyncIdMap.<span class="title function_">get</span>(asyncId))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有以下三点需要解释：</p><ol><li>定义了一个全局 Map 来存储函数的调用关系，在适当的地方（下面会讲到）将当前请求的 ctx 存储到 Map 中，key 是 asyncId。</li><li>每个异步资源在初始化时，会尝试通过 asyncId 向上寻找祖先的 value 是否是 ctx（koa 应用中每个请求的 ctx），如果有，则直接将 value 设置为 ctx，否则将 value 设置为调用者的 asyncId（即 triggerAsyncId）。</li><li>在 destroy 事件函数里直接删除调用关系，保证了不会引起内存泄漏，即杜绝引用了 ctx 但没有释放的情况。</li></ol><p>然后，修改 global[loggerName] 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">global</span>[loggerName] = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx, fn, fnStr, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> originalContext = ctx</span><br><span class="line">  <span class="keyword">let</span> requestId = <span class="title function_">_getRequestId</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> asyncId = async_hooks.<span class="title function_">executionAsyncId</span>()</span><br><span class="line">  <span class="keyword">if</span> (!requestId) &#123;</span><br><span class="line">    <span class="keyword">const</span> _ctx = <span class="title function_">getCtx</span>(asyncId)</span><br><span class="line">    <span class="keyword">if</span> (_ctx) &#123;</span><br><span class="line">      ctx = _ctx</span><br><span class="line">      requestId = <span class="title function_">_getRequestId</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    asyncIdMap.<span class="title function_">set</span>(asyncId, ctx)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (requestId) &#123;</span><br><span class="line">    <span class="title function_">_logger</span>(<span class="string">&#x27;beforeAwait&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> fn.<span class="title function_">call</span>(originalContext)</span><br><span class="line">  <span class="keyword">if</span> (requestId) &#123;</span><br><span class="line">    <span class="title function_">_logger</span>(<span class="string">&#x27;afterAwait&#x27;</span>, result)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_getRequestId</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> ctx &amp;&amp; ctx.<span class="property">app</span> &amp;&amp; _.<span class="title function_">get</span>(ctx, requestIdPath)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_logger</span> (type, result) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有以下两点需要解释：</p><ol><li>logger 函数传入的第 1 个参数 ctx，之前是每个请求的 ctx，现在可能是当前执行上下文的 this，所以先将 ctx 赋值给 originalContext，然后通过 <code>await fn.call(originalContext)</code> 让函数在执行时有正确的上下文。</li><li>如果传入的 ctx 是来自请求的 ctx 且能拿到 requestId，那么将当前 asyncId 和 ctx 写入 Map，如果不是来自请求的 ctx，则尝试从 Map 里向上寻找祖先的 value 是否是 ctx，如果找到，则覆盖当前的 ctx 并拿到 requestId。</li></ol><p>至此，koa-await-breakpoint 全部改造完毕。接下来我们通过一个例子验证下升级后的 koa-await-breakpoint：</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaAwaitBreakpoint = <span class="built_in">require</span>(<span class="string">&#x27;koa-await-breakpoint&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">files</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(koaAwaitBreakpoint)</span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>, <span class="attr">controller</span>: <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>).<span class="property">createUser</span> &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>routes&#x2F;users.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mongolass</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongolass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mongolass = <span class="keyword">new</span> <span class="title class_">Mongolass</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comment</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;Comment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">createUser</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = ctx.<span class="property">query</span>.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> age = +ctx.<span class="property">query</span>.<span class="property">age</span> || <span class="number">18</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">createUser</span>(name, age)</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span> (name, age) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = (<span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">  &#125;)).<span class="property">ops</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">createPost</span>(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createPost</span> (user) &#123;</span><br><span class="line">  <span class="keyword">const</span> post = (<span class="keyword">await</span> <span class="title class_">Post</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">uid</span>: user.<span class="property">_id</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;)).<span class="property">ops</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">createComment</span>(user, post)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createComment</span> (user, post) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Comment</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">userId</span>: user.<span class="property">_id</span>,</span><br><span class="line">    <span class="attr">postId</span>: post.<span class="property">_id</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;comment&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的意思是：在访问创建用户接口时，调用 createUser，createUser 里面又调用了 createPost，createPost 里面又调用了 createComment。运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPOST localhost:3000/users</span><br></pre></td></tr></table></figure><p>打印如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">0</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;beforeAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;createUser(name, age)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">1</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;beforeAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;User.create(...)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">1</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;afterAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;User.create(...)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">36</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;beforeAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;createPost(user)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">1</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;beforeAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;Post.create(...)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">0</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;afterAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;Post.create(...)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">3</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;beforeAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;createComment(user, post)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">1</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;beforeAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;Comment.create(...)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">0</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;afterAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;Comment.create(...)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">1</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;afterAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;createComment(user, post)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">1</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;afterAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;createPost(user)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">6</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;afterAwait&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&#x27;createUser(name, age)&#x27;</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">44</span> ... &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;end&#x27;</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">take</span>: <span class="number">0</span> ... &#125;</span><br></pre></td></tr></table></figure><p>至此，一个全链路、无侵入、强大的日志打点工具就完成了。</p><p><strong>注意</strong>：使用 async_hooks 在目前有较严重的性能损耗，见 <a href="https://github.com/bmeurer/async-hooks-performance-impact">https://github.com/bmeurer/async-hooks-performance-impact</a>，请慎重在生产环境中使用。</p><h2 id="6-2-3-参考链接"><a href="#6-2-3-参考链接" class="headerlink" title="6.2.3 参考链接"></a>6.2.3 参考链接</h2><ul><li><a href="https://nodejs.org/dist/latest-v8.x/docs/api/async_hooks.html">https://nodejs.org/dist/latest-v8.x/docs/api/async_hooks.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/27394440">https://zhuanlan.zhihu.com/p/27394440</a></li><li><a href="https://www.jianshu.com/p/4a568dac41ed">https://www.jianshu.com/p/4a568dac41ed</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.1%20koa-await-breakpoint.md">6.1 koa-await-breakpoint</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.3%20ELK.md">6.3 ELK</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 6.1 Koa-await-breakpoint</title>
      <link href="/2019/09/20/6.1%20koa-await-breakpoint/"/>
      <url>/2019/09/20/6.1%20koa-await-breakpoint/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>日志打点一直是个调试最头疼的问题。如果直接在代码中插入埋点代码，不仅侵入性强而且工作量大也不够灵活，要是能做到智能打点就好了，koa-await-breakpoint 正是我们需要的。</p><h2 id="6-1-1-什么是-koa-await-breakpoint？"><a href="#6-1-1-什么是-koa-await-breakpoint？" class="headerlink" title="6.1.1 什么是 koa-await-breakpoint？"></a>6.1.1 什么是 <a href="https://github.com/nswbmw/koa-await-breakpoint">koa-await-breakpoint</a>？</h2><p>koa-await-breakpoint 是一个 Koa 的中间件，是一个在 routes&#x2F;controllers 里（作用域包含 ctx）的 await 表达式前后自动打点的工具，不用插入一行日志打点代码，只需要在引入时配置一下，就可以记录每个请求到来时 await 表达式前后的现场，例如：</p><ol><li>await 表达式所在的文件及行列号（filename）。</li><li>await 表达式是执行的第几步（step）。</li><li>await 表达式字符串形式（fn）。</li><li>执行 await 表达式所花费的毫秒（take）。</li><li>执行 await 表达式的结果（result）。</li><li>当前请求的 ctx。</li></ol><p>使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// On top of the main file</span></span><br><span class="line"><span class="keyword">const</span> koaAwaitBreakpoint = <span class="built_in">require</span>(<span class="string">&#x27;koa-await-breakpoint&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">  <span class="attr">files</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generally, above other middlewares</span></span><br><span class="line">app.<span class="title function_">use</span>(koaAwaitBreakpoint)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="6-1-2-实现原理"><a href="#6-1-2-实现原理" class="headerlink" title="6.1.2 实现原理"></a>6.1.2 实现原理</h2><ol><li><p>重载 Module.prototype._compile，相当于 hack 了 require，如果发现是 require 了配置里指定的文件，则进行下一步，否则返回原始代码的内容，相关源代码如下：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shimmer.<span class="title function_">wrap</span>(<span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;_compile&#x27;</span>, <span class="keyword">function</span> (<span class="params">__compile</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">koaBreakpointCompile</span>(<span class="params">content, filename</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_.<span class="title function_">includes</span>(filenames, filename)) &#123;</span><br><span class="line">      <span class="keyword">return</span> __compile.<span class="title function_">call</span>(<span class="variable language_">this</span>, content, filename);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>用 esprima 解析代码，生成 AST。例如：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mongolass</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongolass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mongolass = <span class="keyword">new</span> <span class="title class_">Mongolass</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getUsers</span> = <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>()</span><br><span class="line">  <span class="keyword">return</span> users</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  会生成如下 AST，只截取了 <code>await User.create(...)</code> 相关的 AST：</p></li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Script</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title class_">AwaitExpression</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;AwaitExpression&#x27;</span>,</span><br><span class="line">    <span class="attr">argument</span>:</span><br><span class="line">     <span class="title class_">CallExpression</span> &#123;</span><br><span class="line">       <span class="attr">type</span>: <span class="string">&#x27;CallExpression&#x27;</span>,</span><br><span class="line">       <span class="attr">callee</span>:</span><br><span class="line">        <span class="title class_">StaticMemberExpression</span> &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;MemberExpression&#x27;</span>,</span><br><span class="line">          <span class="attr">computed</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">object</span>:</span><br><span class="line">           <span class="title class_">Identifier</span> &#123;</span><br><span class="line">             <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">             <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">10</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">14</span> &#125; &#125; &#125;,</span><br><span class="line">          <span class="attr">property</span>:</span><br><span class="line">           <span class="title class_">Identifier</span> &#123;</span><br><span class="line">             <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;create&#x27;</span>,</span><br><span class="line">             <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">15</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">21</span> &#125; &#125; &#125;,</span><br><span class="line">          <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">10</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">21</span> &#125; &#125; &#125;,</span><br><span class="line">       <span class="attr">arguments</span>:</span><br><span class="line">        [ <span class="title class_">ObjectExpression</span> &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;ObjectExpression&#x27;</span>,</span><br><span class="line">            <span class="attr">properties</span>:</span><br><span class="line">             [ <span class="title class_">Property</span> &#123;</span><br><span class="line">                 <span class="attr">type</span>: <span class="string">&#x27;Property&#x27;</span>,</span><br><span class="line">                 <span class="attr">key</span>:</span><br><span class="line">                  <span class="title class_">Identifier</span> &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">                    <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">7</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">7</span>, <span class="attr">column</span>: <span class="number">10</span> &#125; &#125; &#125;,</span><br><span class="line">                 <span class="attr">computed</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">value</span>:</span><br><span class="line">                  <span class="title class_">Literal</span> &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Literal&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">                    <span class="attr">raw</span>: <span class="string">&#x27;\&#x27;xx\&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">7</span>, <span class="attr">column</span>: <span class="number">12</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">7</span>, <span class="attr">column</span>: <span class="number">16</span> &#125; &#125; &#125;,</span><br><span class="line">                 <span class="attr">kind</span>: <span class="string">&#x27;init&#x27;</span>,</span><br><span class="line">                 <span class="attr">method</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">shorthand</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">7</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">7</span>, <span class="attr">column</span>: <span class="number">16</span> &#125; &#125; &#125;,</span><br><span class="line">               <span class="title class_">Property</span> &#123;</span><br><span class="line">                 <span class="attr">type</span>: <span class="string">&#x27;Property&#x27;</span>,</span><br><span class="line">                 <span class="attr">key</span>:</span><br><span class="line">                  <span class="title class_">Identifier</span> &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">                    <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">8</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">8</span>, <span class="attr">column</span>: <span class="number">9</span> &#125; &#125; &#125;,</span><br><span class="line">                 <span class="attr">computed</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">value</span>:</span><br><span class="line">                  <span class="title class_">Literal</span> &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Literal&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">                    <span class="attr">raw</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">                    <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">8</span>, <span class="attr">column</span>: <span class="number">11</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">8</span>, <span class="attr">column</span>: <span class="number">13</span> &#125; &#125; &#125;,</span><br><span class="line">                 <span class="attr">kind</span>: <span class="string">&#x27;init&#x27;</span>,</span><br><span class="line">                 <span class="attr">method</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">shorthand</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">8</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">8</span>, <span class="attr">column</span>: <span class="number">13</span> &#125; &#125; &#125; ],</span><br><span class="line">            <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">22</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">9</span>, <span class="attr">column</span>: <span class="number">5</span> &#125; &#125; &#125; ],</span><br><span class="line">       <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">10</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">9</span>, <span class="attr">column</span>: <span class="number">6</span> &#125; &#125; &#125;,</span><br><span class="line">    <span class="attr">loc</span>: &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">6</span>, <span class="attr">column</span>: <span class="number">4</span> &#125;, <span class="attr">end</span>: &#123; <span class="attr">line</span>: <span class="number">9</span>, <span class="attr">column</span>: <span class="number">6</span> &#125; &#125; &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><ol start="3"><li>遍历找到 awaitExpression 节点，进行以下包装后生成 AST，替换掉原来的节点。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">global</span>.<span class="title function_">logger</span>(</span><br><span class="line">  (<span class="keyword">typeof</span> ctx !== <span class="string">&#x27;undefined&#x27;</span> ? ctx : <span class="variable language_">this</span>),</span><br><span class="line">  <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> awaitExpression</span><br><span class="line">  &#125;,</span><br><span class="line">  awaitExpressionString,</span><br><span class="line">  filename</span><br><span class="line">)</span><br></pre></td></tr></table></figure>  相关源代码如下：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">findAwaitAndWrapLogger</span>(parsedCodes)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  content = escodegen.<span class="title function_">generate</span>(parsedCodes, &#123;</span><br><span class="line">    <span class="attr">format</span>: &#123; <span class="attr">indent</span>: &#123; <span class="attr">style</span>: <span class="string">&#x27;  &#x27;</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">sourceMap</span>: filename,</span><br><span class="line">    <span class="attr">sourceMapWithCode</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;cannot generate code for file: %s&#x27;</span>, filename)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">stack</span>)</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">debug</span>(<span class="string">&#x27;file %s regenerate codes:\n%s&#x27;</span>, filename, content.<span class="property">code</span>)</span><br></pre></td></tr></table></figure>  findAwaitAndWrapLogger 的作用就是遍历 AST，将 awaitExpression 替换成用日志函数包裹后新的 awaitExpression 的 AST。最后用 escodegen 将 AST 生成代码（支持 soucemap，所以错误栈对应的行数是正确的）。</li></ol><p><strong>核心</strong>：每个请求到来时，生成一个 requestId（可自定义，默认为 uuid）挂载到 ctx 上，这样就可以通过 requestId 将日志串起来了。</p><p><strong>特点</strong>：可以记录每个请求的每一步（await 表达式）的现场及返回值，方便查日志。</p><h2 id="6-1-3-使用-koa-await-breakpoint"><a href="#6-1-3-使用-koa-await-breakpoint" class="headerlink" title="6.1.3 使用 koa-await-breakpoint"></a>6.1.3 使用 koa-await-breakpoint</h2><p>测试代码如下：</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaAwaitBreakpoint = <span class="built_in">require</span>(<span class="string">&#x27;koa-await-breakpoint&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">  <span class="attr">files</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(koaAwaitBreakpoint)</span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>, <span class="attr">controller</span>: userRouter.<span class="property">getUsers</span> &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>routes&#x2F;user.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mongolass</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongolass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mongolass = <span class="keyword">new</span> <span class="title class_">Mongolass</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getUsers</span> = <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUsers</span> (ctx) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>()</span><br><span class="line">  ctx.<span class="property">body</span> = users</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=koa-await-breakpoint node app.js</span><br></pre></td></tr></table></figure><p>终端打印出转换后的代码，可以看出 routes&#x2F;users.js 被转换成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mongolass</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongolass&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mongolass = <span class="keyword">new</span> <span class="title class_">Mongolass</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getUsers</span> = <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">global</span>.<span class="title function_">logger</span>(<span class="keyword">typeof</span> ctx !== <span class="string">&#x27;undefined&#x27;</span> ? ctx : <span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="string">&#x27;User.create(&#123;\n    name: \&#x27;xx\&#x27;,\n    age: 18\n&#125;)&#x27;</span>, <span class="string">&#x27;/Users/nswbmw/Desktop/test/routes/user.js:6:2&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">global</span>.<span class="title function_">logger</span>(<span class="keyword">typeof</span> ctx !== <span class="string">&#x27;undefined&#x27;</span> ? ctx : <span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">User</span>.<span class="title function_">find</span>();</span><br><span class="line">  &#125;, <span class="string">&#x27;User.find()&#x27;</span>, <span class="string">&#x27;/Users/nswbmw/Desktop/test/routes/user.js:11:16&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">body</span> = users;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>访问 localhost:3000&#x2F;users，终端打印出:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;api&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;50dbda0c-9e13-4659-acce-b237bc5178b7&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2018-02-26T06:31:31.100Z&quot;</span>,<span class="string">&quot;this&quot;</span>:...,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;start&quot;</span>,<span class="string">&quot;step&quot;</span>:<span class="number">1</span>,<span class="string">&quot;take&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;api&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;50dbda0c-9e13-4659-acce-b237bc5178b7&quot;</span>,<span class="string">&quot;step&quot;</span>:<span class="number">2</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;/Users/nswbmw/Desktop/test/routes/user.js:6:2&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2018-02-26T06:31:31.104Z&quot;</span>,<span class="string">&quot;this&quot;</span>:...,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;beforeAwait&quot;</span>,<span class="string">&quot;fn&quot;</span>:<span class="string">&quot;User.create(&#123;\n    name: &#x27;xx&#x27;,\n    age: 18\n&#125;)&quot;</span>,<span class="string">&quot;take&quot;</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;api&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;50dbda0c-9e13-4659-acce-b237bc5178b7&quot;</span>,<span class="string">&quot;step&quot;</span>:<span class="number">3</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;/Users/nswbmw/Desktop/test/routes/user.js:6:2&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2018-02-26T06:31:31.175Z&quot;</span>,<span class="string">&quot;this&quot;</span>:...,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;afterAwait&quot;</span>,<span class="string">&quot;fn&quot;</span>:<span class="string">&quot;User.create(&#123;\n    name: &#x27;xx&#x27;,\n    age: 18\n&#125;)&quot;</span>,<span class="string">&quot;result&quot;</span>:&#123;<span class="string">&quot;result&quot;</span>:&#123;<span class="string">&quot;ok&quot;</span>:<span class="number">1</span>,<span class="string">&quot;n&quot;</span>:<span class="number">1</span>&#125;,<span class="string">&quot;ops&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;5a93a9c3cf8c8797c9b47482&quot;</span>&#125;],<span class="string">&quot;insertedCount&quot;</span>:<span class="number">1</span>,<span class="string">&quot;insertedIds&quot;</span>:[<span class="string">&quot;5a93a9c3cf8c8797c9b47482&quot;</span>]&#125;,<span class="string">&quot;take&quot;</span>:<span class="number">71</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;api&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;50dbda0c-9e13-4659-acce-b237bc5178b7&quot;</span>,<span class="string">&quot;step&quot;</span>:<span class="number">4</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;/Users/nswbmw/Desktop/test/routes/user.js:11:16&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2018-02-26T06:31:31.175Z&quot;</span>,<span class="string">&quot;this&quot;</span>:...,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;beforeAwait&quot;</span>,<span class="string">&quot;fn&quot;</span>:<span class="string">&quot;User.find()&quot;</span>,<span class="string">&quot;take&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;api&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;50dbda0c-9e13-4659-acce-b237bc5178b7&quot;</span>,<span class="string">&quot;step&quot;</span>:<span class="number">5</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;/Users/nswbmw/Desktop/test/routes/user.js:11:16&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2018-02-26T06:31:31.180Z&quot;</span>,<span class="string">&quot;this&quot;</span>:...,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;afterAwait&quot;</span>,<span class="string">&quot;fn&quot;</span>:<span class="string">&quot;User.find()&quot;</span>,<span class="string">&quot;result&quot;</span>:[&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;5a93a9c3cf8c8797c9b47482&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;],<span class="string">&quot;take&quot;</span>:<span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;api&quot;</span>,<span class="string">&quot;requestId&quot;</span>:<span class="string">&quot;50dbda0c-9e13-4659-acce-b237bc5178b7&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2018-02-26T06:31:31.181Z&quot;</span>,<span class="string">&quot;this&quot;</span>:...,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;end&quot;</span>,<span class="string">&quot;step&quot;</span>:<span class="number">6</span>,<span class="string">&quot;take&quot;</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：type 是以下其中一种，take 的单位是 ms。</p><ol><li>start：请求到来时第 1 次打点。</li><li>beforeAwait：上一个 awaitExpression 之后到这一个 awaitExpression 之前。</li><li>afterAwait：这个 awaitExpression 开始到结束。</li><li>error：错误日志，包含了错误信息。</li><li>end：请求结束时打点。</li></ol><h2 id="6-1-4-自定义日志存储"><a href="#6-1-4-自定义日志存储" class="headerlink" title="6.1.4 自定义日志存储"></a>6.1.4 自定义日志存储</h2><p>store 参数最好自己定义（默认打印日志到 stdout），该参数是一个对象并且有一个 save 方法即可。在 save 方法内可做一些逻辑修改或者日志策略，比如：</p><ol><li>添加日志标识（例如：name）方便区分不同服务的日志。</li><li>针对错误日志，添加一些额外字段方便追踪现场。</li><li>将日志发送到 Logstash 或其他日志服务。</li><li>限制日志频率，比如：只有响应时间大于 500ms 的请求日志才会被记录。</li></ol><p><strong>koa_await_breakpoint_store.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">save</span> = <span class="keyword">function</span> <span class="title function_">save</span>(<span class="params">record, ctx</span>) &#123;</span><br><span class="line">  record.<span class="property">name</span> = <span class="string">&#x27;app name&#x27;</span></span><br><span class="line">  record.<span class="property">env</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (record.<span class="property">error</span>) &#123;</span><br><span class="line">    record.<span class="property">error</span> = &#123;</span><br><span class="line">      <span class="attr">message</span>: record.<span class="property">error</span>.<span class="property">message</span>,</span><br><span class="line">      <span class="attr">stack</span>: record.<span class="property">error</span>.<span class="property">stack</span>,</span><br><span class="line">      <span class="attr">status</span>: record.<span class="property">error</span>.<span class="property">status</span> || record.<span class="property">error</span>.<span class="property">statusCode</span> || <span class="number">500</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  logstash.<span class="title function_">send</span>(record)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-1-5-参考链接"><a href="#6-1-5-参考链接" class="headerlink" title="6.1.5 参考链接"></a>6.1.5 参考链接</h2><ul><li><a href="https://github.com/jquery/esprima">https://github.com/jquery/esprima</a></li><li><a href="https://github.com/estools/escodegen">https://github.com/estools/escodegen</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/5.2%20Elastic%20APM.md">5.2 Elastic APM</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.2%20async_hooks.md">6.2 async_hooks</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging - 5.2 Elastic APM</title>
      <link href="/2019/08/26/5.2%20Elastic%20APM/"/>
      <url>/2019/08/26/5.2%20Elastic%20APM/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="5-2-1-什么是-Elastic-APM？"><a href="#5-2-1-什么是-Elastic-APM？" class="headerlink" title="5.2.1 什么是 Elastic APM？"></a>5.2.1 什么是 Elastic APM？</h2><p>Elastic APM 是 Elastic 公司开源的一款 APM 工具，目前还处于 Beta 阶段，它有以下几个优势：</p><ol><li>开源。我们可以免费使用，像使用 ELK 一样。</li><li>功能完善。API 比较完善，有 Agent、Transaction 和 Trace，默认创建响应时间和每分钟请求数两种图表，且可以使用 Kibana 的 Filter 过滤生成关心的数据的图表。</li><li>监控与日志统一。Elastic APM 依赖 ElasticSearch + Kibana，所以可以结合 ELK 使用，可在 Kibana 中查看监控，然后直接查询日志。</li></ol><p>Elastic APM 架构如下：</p><p><img src="/./assets/5.2.1.png"></p><p>APM Agent（即在应用端引入的探针）将收集的日志发送到 APM Server（Go 写的 HTTP 服务），APM Server 将数据存储到 ElasticSearch 中，然后通过 Kibana 展示。</p><p>Kibana 展示如下：</p><p><img src="/./assets/5.2.2.png"></p><h2 id="5-2-2-启动-ELK"><a href="#5-2-2-启动-ELK" class="headerlink" title="5.2.2 启动 ELK"></a>5.2.2 启动 ELK</h2><p>我们使用 Docker 安装并启动 ELK，运行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 5601:5601 \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 5044:5044 \</span><br><span class="line">    -it --name elk sebp/elk</span><br></pre></td></tr></table></figure><h2 id="5-2-3-启动-APM-Server"><a href="#5-2-3-启动-APM-Server" class="headerlink" title="5.2.3 启动 APM Server"></a>5.2.3 启动 APM Server</h2><p>首先，下载 <a href="https://www.elastic.co/downloads/apm/apm-server">APM Server</a> 解压。然后运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./apm-server setup <span class="comment"># 导入 APM 仪表盘到 Kibana</span></span><br><span class="line">$ ./apm-server -e <span class="comment"># 启动 APM Server，默认监听 8200 端口</span></span><br></pre></td></tr></table></figure><p>用浏览器打开 localhost:5601，进入 Dashboard 页，如下所示：</p><p><img src="/./assets/5.2.3.png"></p><h2 id="5-2-4-使用-Elastic-APM"><a href="#5-2-4-使用-Elastic-APM" class="headerlink" title="5.2.4 使用 Elastic APM"></a>5.2.4 使用 Elastic APM</h2><p>测试代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apm = <span class="built_in">require</span>(<span class="string">&#x27;elastic-apm-node&#x27;</span>).<span class="title function_">start</span>(&#123;</span><br><span class="line">  <span class="attr">appName</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, controller (ctx) &#123;</span><br><span class="line">  apm.<span class="title function_">setTransactionName</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx._matchedRoute&#125;</span>`</span>)</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/:name&#x27;</span>, controller (ctx) &#123;</span><br><span class="line">  apm.<span class="title function_">setTransactionName</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx._matchedRoute&#125;</span>`</span>)</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>运行该程序，发起两个请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000/</span><br><span class="line">$ curl localhost:3000/nswbmw</span><br></pre></td></tr></table></figure><p>等待一会，Kibana 展示如下：</p><p><img src="/./assets/5.2.4.png"></p><p>在 Elastic APM 中，有两个术语：</p><ul><li>transaction：一组 traces 的集合，例如：一个 HTTP 请求。</li><li>trace：一个事件及持续时间，例如：一个 SQL 查询。</li></ul><h2 id="5-2-5-错误日志"><a href="#5-2-5-错误日志" class="headerlink" title="5.2.5 错误日志"></a>5.2.5 错误日志</h2><p>现在，我们来测试下 Elastic APM 的错误收集功能。修改测试代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apm = <span class="built_in">require</span>(<span class="string">&#x27;elastic-apm-node&#x27;</span>).<span class="title function_">start</span>(&#123;</span><br><span class="line">  <span class="attr">appName</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    apm.<span class="title function_">captureError</span>(e)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">500</span></span><br><span class="line">    ctx.<span class="property">message</span> = e.<span class="property">message</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">controller</span>: <span class="keyword">function</span> <span class="title function_">indexRouter</span> (ctx) &#123;</span><br><span class="line">  apm.<span class="title function_">setTransactionName</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx._matchedRoute&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>重启测试程序，并发起一次请求。回到 Kibana，单击 Dashboard -&gt; [APM] Errors 可以看到错误日志记录（自动聚合）和图表，如下所示：</p><p><img src="/./assets/5.2.5.png"></p><p>单击 View Error Details 进入错误详情页，如下所示：</p><p><img src="/./assets/5.2.6.png"></p><p><strong>可以看出</strong>：在错误日志中展示了错误代码及行数、上下几行代码、父级函数名和所在文件等信息。</p><h2 id="5-2-6-参考链接"><a href="#5-2-6-参考链接" class="headerlink" title="5.2.6 参考链接"></a>5.2.6 参考链接</h2><ul><li><a href="https://www.elastic.co/guide/en/apm/agent/nodejs/0.x/index.html">https://www.elastic.co/guide/en/apm/agent/nodejs/0.x/index.html</a></li><li><a href="https://www.elastic.co/guide/en/apm/agent/nodejs/0.x/custom-stack.html">https://www.elastic.co/guide/en/apm/agent/nodejs/0.x/custom-stack.html</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/5.1%20NewRelic.md">5.1 NewRelic</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/6.1%20koa-await-breakpoint.md">6.1 koa-await-breakpoint</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 5.1 NewRelic</title>
      <link href="/2019/08/05/5.1%20NewRelic/"/>
      <url>/2019/08/05/5.1%20NewRelic/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p><a href="https://newrelic.com/">NewRelic</a> 是一个老牌的应用性能监测工具，提供 14 天免费试用，本节将讲解如何使用 NewRelic 监控 Node.js 程序的性能。</p><p>测试代码如下：</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;newrelic&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> createUser = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>).<span class="property">createUser</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> salt = crypto.<span class="title function_">randomBytes</span>(<span class="number">128</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> hash = crypto.<span class="title function_">pbkdf2Sync</span>(<span class="title class_">String</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()), salt, <span class="number">10000</span>, <span class="number">512</span>, <span class="string">&#x27;sha512&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; salt, hash &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/error&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error!!!&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/users/:user&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">createUser</span>(req.<span class="property">params</span>.<span class="property">user</span>, <span class="number">18</span>)</span><br><span class="line">  res.<span class="title function_">json</span>(user)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>routes&#x2F;users.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mongolass</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongolass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mongolass = <span class="keyword">new</span> <span class="title class_">Mongolass</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongolass.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">createUser</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = ctx.<span class="property">query</span>.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> age = +ctx.<span class="property">query</span>.<span class="property">age</span> || <span class="number">18</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">createUser</span>(name, age)</span><br><span class="line">  ctx.<span class="property">status</span> = user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span> (name, age) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = (<span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">  &#125;)).<span class="property">ops</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-1-使用-NewRelic"><a href="#5-1-1-使用-NewRelic" class="headerlink" title="5.1.1 使用 NewRelic"></a>5.1.1 使用 NewRelic</h2><p>首先，注册一个 <a href="https://newrelic.com/signup">NewRelic</a> 账号。创建一个应用，如下所示：</p><p><img src="/./assets/5.1.1.png"></p><p>选择 APM，进入下一步，选择 Node.js 应用，并拿到 license key：</p><p><img src="/./assets/5.1.2.png"></p><p>在 Node.js 中使用 NewRelic 的步骤如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i newrelic --save <span class="comment"># 安装 NewRelic 的 Node.js SDK</span></span><br><span class="line">$ <span class="built_in">cp</span> node_modules/newrelic/newrelic.js . <span class="comment"># 将默认配置文件拷贝到项目根目录下</span></span><br></pre></td></tr></table></figure><p>修改 newrelic.js，app_name 填写我们的应用名（例如：api），license_key 填写刚才生成的 license key。</p><p>启动测试程序，并发起几个请求，稍等几分钟，NewRelic 的后台将会收到并展示一些数据（例如：吞吐量，请求的 Urls，错误率、Apdex score 等），如下所示：</p><p><img src="/./assets/5.1.3.png"></p><p>试用版的功能有限，升级到付费版可解锁更多功能，例如：数据库分析、错误分析甚至 Node.js VM 监控（CPU、内存、GC、Event Loop）等等。</p><p>类似的其他 APM 有：</p><ul><li><a href="https://www.appdynamics.com/">AppDynamics</a></li><li><a href="oneapm.com">OneAPM</a></li><li><a href="https://www.datadoghq.com/monitor-nodejs/">DataDog</a></li><li><a href="https://www.atatus.com/">atatus</a></li><li><a href="https://opbeat.com/nodejs">opbeat</a></li></ul><p>用法大同小异，这里就不一一介绍了。</p><h2 id="5-1-2-参考链接"><a href="#5-1-2-参考链接" class="headerlink" title="5.1.2 参考链接"></a>5.1.2 参考链接</h2><ul><li><a href="https://newrelic.com/">https://newrelic.com/</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/4.5%20supervisor-hot-reload.md">4.5 supervisor-hot-reload</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/5.2%20Elastic%20APM.md">5.2 Elastic APM</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 4.5 Supervisor-hot-reload</title>
      <link href="/2019/08/03/4.5%20supervisor-hot-reload/"/>
      <url>/2019/08/03/4.5%20supervisor-hot-reload/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>我们在本地开发 Node.js 程序时通常会使用 <a href="https://github.com/remy/nodemon">nodemon</a> 或者 <a href="https://github.com/petruisfan/node-supervisor">supervisor</a> 这种进程管理工具，当有文件修改时自动重启应用。小项目还好，项目大了（尤其是前端应用）每次重启应用都用几秒到几十秒的时间，大部分时间都花在了加载及编译代码上。</p><p>这让笔者联想到前端比较火的一个名词——Hot Reload（热加载），比如 React 静态资源的热加载通过 webpack-dev-server 和 react-hot-loader 实现，webpack-dev-server 负责重新编译代码，react-hot-loader 负责热加载。</p><p>那在 Node.js 应用中，如何实现 Hot Reload 呢？最好能实现不重启应用便使新代码生效。幸好 ES6 引入了一个新特性——Proxy。</p><h2 id="4-5-1-Proxy"><a href="#4-5-1-Proxy" class="headerlink" title="4.5.1 Proxy"></a>4.5.1 Proxy</h2><p>Proxy 用于修改对象的默认行为，等同于在语言层面做出修改，属于一种 “元编程”。Proxy 在要访问的对象之前架设一层拦截，在访问该对象成员时必须先经过这层拦截。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// getting name!</span></span><br><span class="line"><span class="comment">// haha</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// getting age!</span></span><br><span class="line"><span class="comment">// haha</span></span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：我们并没有在 obj 上定义 name 和 age 属性，所有获取 obj 上属性都会执行 get 方法然后打印 getting xxx! 和返回 haha。</p><p>这里 Proxy 的第 1 个参数是一个空对象，也可以是一个其他的对象，比如函数（毕竟在 JavaScript 中函数也是对象）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">user</span> () &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// user</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// getting name!</span></span><br><span class="line"><span class="comment">// haha</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// getting age!</span></span><br><span class="line"><span class="comment">// haha</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="number">1</span>, &#123;&#125;)</span><br><span class="line"><span class="comment">// TypeError: Cannot create proxy with a non-object as target or handler</span></span><br></pre></td></tr></table></figure><h2 id="4-5-2-Proxy-实现-Hot-Reload"><a href="#4-5-2-Proxy-实现-Hot-Reload" class="headerlink" title="4.5.2 Proxy 实现 Hot Reload"></a>4.5.2 Proxy 实现 Hot Reload</h2><p><strong>核心原理</strong>：使用 Proxy 将模块导出的对象包装一层 “代理”，即 module.exports 导出的是一个 Proxy 实例，定义一个 get 方法，使得获取实例上的属性其实是去获取最新的 require.cache 中的对象上的属性。同时，监听代码文件，如果有修改，则更新 require.cache。</p><p><strong>简而言之</strong>：我们在获取对象的属性时，中间加了一层代理，通过代理间接获取原有属性的值，如果属性值有更新，则会更新 require.cache 的缓存，那么下次再获取对象的属性时，通过代理将获取该属性最新的值。可见，Proxy 可以实现属性访问拦截，也可实现断开强引用的作用。</p><p>笔者发布了一个 <a href="https://www.npmjs.com/package/proxy-hot-reload">proxy-hot-reload</a> 模块，核心代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">proxyHotReload</span>(<span class="params">opts</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> includes = [ ... ]</span><br><span class="line">  <span class="keyword">const</span> excludes = [ ... ]</span><br><span class="line">  <span class="keyword">const</span> filenames = _.<span class="title function_">difference</span>(includes, excludes)</span><br><span class="line"></span><br><span class="line">  chokidar</span><br><span class="line">    .<span class="title function_">watch</span>(filenames, &#123;</span><br><span class="line">      <span class="attr">usePolling</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">require</span>.<span class="property">cache</span>[path]) &#123;</span><br><span class="line">          <span class="keyword">const</span> _exports = <span class="built_in">require</span>.<span class="property">cache</span>[path].<span class="property">exports</span></span><br><span class="line">          <span class="keyword">if</span> (_.<span class="title function_">isPlainObject</span>(_exports) &amp;&amp; !_.<span class="title function_">isEmpty</span>(_exports)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[path]</span><br><span class="line">            <span class="built_in">require</span>(path)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; ... &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error))</span><br><span class="line"></span><br><span class="line">  shimmer.<span class="title function_">wrap</span>(<span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;_compile&#x27;</span>, <span class="keyword">function</span> (<span class="params">__compile</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">proxyHotReloadCompile</span>(<span class="params">content, filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!_.<span class="title function_">includes</span>(filenames, filename)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> __compile.<span class="title function_">call</span>(<span class="variable language_">this</span>, content, filename)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123; ... &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = __compile.<span class="title function_">call</span>(<span class="variable language_">this</span>, content, filename)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_exports</span> = <span class="variable language_">this</span>.<span class="property">exports</span></span><br><span class="line">        <span class="comment">// non-object return original compiled code</span></span><br><span class="line">        <span class="keyword">if</span> (!_.<span class="title function_">isPlainObject</span>(<span class="variable language_">this</span>.<span class="property">_exports</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">exports</span> =  <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">this</span>.<span class="property">_exports</span>, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">require</span>.<span class="property">cache</span>[filename]) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="built_in">require</span>.<span class="property">cache</span>[filename].<span class="property">_exports</span>[key]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; <span class="keyword">catch</span> (e) &#123; ... &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123; ... &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单讲解一下：</p><ol><li>可传入 includes 和 excludes 参数，支持 glob 写法，用来设置监听哪些代码文件。</li><li>用 chokidar 模块监听文件，如果有改动则重新加载该文件。这里只针对 module.exports 导出的是纯对象的模块有用，做这个限制的原因是：对于非对象比如函数，一般我们导出一个函数会直接调用执行而不是获取函数上的属性或方法，这种导出非纯对象模块即使重建缓存也不会生效，所以干脆忽略。幸运的是，module.exports 导出对象占了大多数场景。</li><li>用 shimmer 模块重载 Module.prototype._compile 方法，如果是被监听的文件并且导出的是纯对象，则尝试将导出的对象包装成 Proxy 实例。这样，在获取该对象上的属性时，将从 require.cache 中读取最新的值。</li></ol><p>使用示例：</p><p><strong>user.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nswbmw&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;proxy-hot-reload&#x27;</span>)(&#123;</span><br><span class="line">    <span class="attr">includes</span>: <span class="string">&#x27;**/*.js&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, controller (ctx) &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = user</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>浏览器访问 localhost:3000 查看结果，修改 user.js 中字段的值，然后刷新浏览器查看结果。</p><p>proxy-hot-reload 有个非常明显的<strong>缺点</strong>：只支持对导出的是纯对象的文件做代理，而且程序入口文件不会生效，比如上面的 app.js，修改端口号只能重启才会生效。Proxy 再怎么黑魔法也只能做到这个地步了，退一步想，如果修改了 proxy-hot-reload 覆盖不到的文件（例如：app.js）降级成自动重启就好了，如果将 proxy-hot-reload 和 supervisor 结合，会怎么样呢？</p><h2 id="4-5-3-supervisor-hot-reload"><a href="#4-5-3-supervisor-hot-reload" class="headerlink" title="4.5.3 supervisor-hot-reload"></a>4.5.3 <a href="https://github.com/nswbmw/supervisor-hot-reload">supervisor-hot-reload</a></h2><p>如果要将 proxy-hot-reload 结合 supervisor 使用，需要解决以下几个难点：</p><ol><li>非侵入式。即代码里不再写：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;proxy-hot-reload&#x27;</span>)(&#123;</span><br><span class="line">    <span class="attr">includes</span>: <span class="string">&#x27;**/*.js&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>参数统一。supervisor 可接受 -w 参数表明监听哪些文件，-i 参数表明忽略哪些文件，这两个参数怎么与 proxy-hot-reload 的 includes 和 excludes 参数整合。</p></li><li><p>职责分明。修改代码文件并保存后，优先尝试 proxy-hot-reload 的热更新，如果 proxy-hot-reload 热更新不了，则使用 supervisor 重启。</p></li></ol><p>首先，我们来看下 supervisor 的源码（lib&#x2F;supervisor.js），源码中有这么一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> watchItems = watch.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">watchItems.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">watchItem</span>) &#123;</span><br><span class="line">    watchItem = path.<span class="title function_">resolve</span>(watchItem);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! ignoredPaths[watchItem] ) &#123;</span><br><span class="line">        <span class="title function_">log</span>(<span class="string">&quot;Watching directory &#x27;&quot;</span> + watchItem + <span class="string">&quot;&#x27; for changes.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(interactive) &#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;Press rs for restarting the process.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">findAllWatchFiles</span>(watchItem, <span class="keyword">function</span>(<span class="params">f</span>) &#123;</span><br><span class="line">            <span class="title function_">watchGivenFile</span>( f, poll_interval );</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码的作用是：遍历找到所有需要监听的文件，然后调用 watchGivenFile 监听文件。watchGivenFile 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">watchGivenFile</span> (watch, poll_interval) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isWindowsWithoutWatchFile || forceWatchFlag) &#123;</span><br><span class="line">        fs.<span class="title function_">watch</span>(watch, &#123; <span class="attr">persistent</span>: <span class="literal">true</span>, <span class="attr">interval</span>: poll_interval &#125;, crashWin);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fs.<span class="title function_">watchFile</span>(watch, &#123; <span class="attr">persistent</span>: <span class="literal">true</span>, <span class="attr">interval</span>: poll_interval &#125;, <span class="keyword">function</span>(<span class="params">oldStat, newStat</span>) &#123;</span><br><span class="line">            <span class="comment">// we only care about modification time, not access time.</span></span><br><span class="line">            <span class="keyword">if</span> ( newStat.<span class="property">mtime</span>.<span class="title function_">getTime</span>() !== oldStat.<span class="property">mtime</span>.<span class="title function_">getTime</span>() ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                    <span class="title function_">log</span>(<span class="string">&quot;file changed: &quot;</span> + watch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">crash</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">        <span class="title function_">log</span>(<span class="string">&quot;watching file &#x27;&quot;</span> + watch + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>watchGivenFile 的作用是：用 fs.watch&#x2F;fs.watchFile 监听文件，如果有改动则调用 crashWin&#x2F;crash 程序退出。supervisor 使用 child_process.spawn 将程序运行在子进程，子进程退出后会被 supervisor 重新启动。相关代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startProgram</span> (prog, exec) &#123;</span><br><span class="line">    <span class="keyword">var</span> child = <span class="built_in">exports</span>.<span class="property">child</span> = <span class="title function_">spawn</span>(exec, prog, &#123;<span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span>&#125;);</span><br><span class="line">    ...</span><br><span class="line">    child.<span class="title function_">addListener</span>(<span class="string">&quot;exit&quot;</span>, <span class="keyword">function</span> (<span class="params">code</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="title function_">startProgram</span>(prog, exec);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体理清 supervisor 的关键源码后，我们就知道如何解决上面提到的几个难点了。</p><p>首先需要修改 proxy-hot-reload，添加以下几个功能：</p><ol><li>添加 includeFiles 和 excludeFiles 选项，值为数组，用来接收 supervisor 传来的文件列表。</li><li>添加 watchedFileChangedButNotReloadCache 参数。proxy-hot-reload 可以知道哪些代码文件可以热更新，哪些不可以。当监听到不能热更新的文件有修改时，则调用 watchedFileChangedButNotReloadCache 函数，这个函数里有 process.exit() 使进程退出。</li></ol><p>难点及解决方案如下：</p><ol><li>非侵入式。因为真正的程序试运行在 supervisor 创建的子进程中，所以我们无法在 supervisor 进程中引入 proxy-hot-reload，只能通过子进程用 <code>node -r xxx</code> 提前引入并覆盖 Module.prototype._compile。解决方案：将 supervisor 需要监听的文件数组（watchFiles）和 proxy-hot-reload 配置写到一个文件（例如：proxy-hot-reload.js）里，子进程通过 <code>node -r proxy-hot-reload.js app.js</code> 预加载此文件启动。</li></ol><p>supervisor 相关代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 watchFiles</span></span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;proxy-hot-reload.js&#x27;</span>), <span class="string">`</span></span><br><span class="line"><span class="string">    require(&#x27;<span class="subst">$&#123;path.join(__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;proxy-hot-reload&quot;</span>)&#125;</span>&#x27;)(&#123;</span></span><br><span class="line"><span class="string">    includeFiles: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(watchFiles)&#125;</span>,</span></span><br><span class="line"><span class="string">    excludeFiles: [],</span></span><br><span class="line"><span class="string">    watchedFileChangedButNotReloadCache: function (filename) &#123;</span></span><br><span class="line"><span class="string">        console.log(filename + &#x27; changed, restarting...&#x27;);</span></span><br><span class="line"><span class="string">        setTimeout(function () &#123;</span></span><br><span class="line"><span class="string">            process.exit();</span></span><br><span class="line"><span class="string">        &#125;, <span class="subst">$&#123;poll_interval&#125;</span>);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);`</span>);</span><br><span class="line"><span class="comment">// startChildProcess()</span></span><br></pre></td></tr></table></figure><ol start="2"><li>参数统一。将上面的 watchItems.forEach 内异步遍历需要监听的文件列表修改为同步，代码如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> watchFiles = []</span><br><span class="line"><span class="keyword">var</span> watchItems = watch.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">watchItems.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">watchItem</span>) &#123;</span><br><span class="line">    watchItem = path.<span class="title function_">resolve</span>(watchItem);</span><br><span class="line">    <span class="keyword">if</span> ( ! ignoredPaths[watchItem] ) &#123;</span><br><span class="line">        <span class="title function_">log</span>(<span class="string">&quot;Watching directory &#x27;&quot;</span> + watchItem + <span class="string">&quot;&#x27; for changes.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(interactive) &#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;Press rs for restarting the process.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">findAllWatchFiles</span>(watchItem, <span class="keyword">function</span>(<span class="params">f</span>) &#123;</span><br><span class="line">            watchFiles.<span class="title function_">push</span>(f)</span><br><span class="line">            <span class="comment">// watchGivenFile( f, poll_interval );</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里 findAllWatchFiles 虽然有回调函数，但却是同步的。将 findAllWatchFiles 内的 fs.lstat&#x2F;fs.stat&#x2F;fs.readdir 分别改为 fs.lstatSync&#x2F;fs.statSync&#x2F;fs.readdirSync，这里就不贴代码了。</p><ol start="3"><li>职责分明。子进程使用 <code>node -r proxy-hot-reload.js app.js</code> 启动后，能热更新的则热更新，不能热更新的执行 watchedFileChangedButNotReloadCache，子进程退出，supervisor 会启动一个新的子进程，实现了职责分明。</li></ol><p>笔者将改进后的 supervisor 发布成一个新的包——<a href="https://github.com/nswbmw/supervisor-hot-reload">supervisor-hot-reload</a> 。使用如下：</p><p><strong>user.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nswbmw&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, controller (ctx) &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = user</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>全局安装并使用 supervisor-hot-reload：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i supervisor-hot-reload -g</span><br><span class="line">$ DEBUG=proxy-hot-reload supervisor-hot-reload app.js</span><br></pre></td></tr></table></figure><p>修改 user.js，程序不会重启，打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy-hot-reload Reload file: /Users/nswbmw/Desktop/test/user.js</span><br></pre></td></tr></table></figure><p>修改 app.js，程序会重启，打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/nswbmw/Desktop/test/app.js changed, restarting...</span><br><span class="line">Program node app.js exited with code 0</span><br><span class="line"></span><br><span class="line">Starting child process with &#x27;node app.js&#x27;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="4-5-4-内存泄露问题"><a href="#4-5-4-内存泄露问题" class="headerlink" title="4.5.4 内存泄露问题"></a>4.5.4 内存泄露问题</h2><p>这里需要声明一下，虽然修改 require.cache + Proxy 实现了我们想要的功能，但这样做存在内存泄漏问题，因为即使删除了一个模块的缓存，但父模块的缓存中还引用着旧的模块导出的对象。这个问题可以不用太关心，知道为什么就好，因为我们只是在开发环境使用 proxy-hot-reload。</p><h2 id="4-5-5-参考链接"><a href="#4-5-5-参考链接" class="headerlink" title="4.5.5 参考链接"></a>4.5.5 参考链接</h2><ul><li><a href="https://nodejs.org/dist/latest-v8.x/docs/api/async_hooks.html">https://nodejs.org/dist/latest-v8.x/docs/api/async_hooks.html</a></li></ul><p>上一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/4.4%20debug%20%2B%20repl2%20%2B%20power-assert.md">4.4 debug + repl2 + power-assert</a></p><p>下一节：<a href="https://github.com/nswbmw/node-in-debugging/blob/master/5.1%20NewRelic.md">5.1 NewRelic</a></p>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 4.4 Debug</title>
      <link href="/2019/07/30/4.4.1%20debug/"/>
      <url>/2019/07/30/4.4.1%20debug/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>上一小节讲解了如何用使用 VS Code 调试 Node.js 代码，但调试不只是打断点，比如：</p><ul><li>如何快速地切换输出的日志类型（或级别）?</li><li>我想用 moment 打印出年份，是使用 <code>moment().format(&#39;YYYY&#39;)</code>，还是 <code>moment().format(&#39;yyyy&#39;)</code>，还是两种写法都可以?</li><li>断言报错：AssertionError: false &#x3D;&#x3D; true，没啥有用信息，黑人问号???</li></ul><p>本节将介绍 3 款实用的调试工具，分别解决以上 3 种情况，来提高我们的调试效率。</p><h2 id="4-4-1-debug"><a href="#4-4-1-debug" class="headerlink" title="4.4.1 debug"></a>4.4.1 debug</h2><p>debug 是一个小巧却非常实用的日志模块，可以根据环境变量决定打印不同类型（或级别）的日志。代码如下：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const normalLog = require(&#x27;debug&#x27;)(&#x27;log&#x27;)</span><br><span class="line">const errorLowLog = require(&#x27;debug&#x27;)(&#x27;error:low&#x27;)</span><br><span class="line">const errorNormalLog = require(&#x27;debug&#x27;)(&#x27;error:normal&#x27;)</span><br><span class="line">const errorHighLog = require(&#x27;debug&#x27;)(&#x27;error:high&#x27;)</span><br><span class="line"></span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">  const value = Math.random()</span><br><span class="line">  switch (true) &#123;</span><br><span class="line">    case value &lt; 0.5: normalLog(value); break</span><br><span class="line">    case value &gt;= 0.5 &amp;&amp; value &lt; 0.7: errorLowLog(value); break</span><br><span class="line">    case value &gt;= 0.7 &amp;&amp; value &lt; 0.9: errorNormalLog(value); break</span><br><span class="line">    case value &gt;= 0.9: errorHighLog(value); break</span><br><span class="line">    default: normalLog(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><p>运行上面的代码，每一秒生成一个随机数，根据随机数的值模拟不同级别的日志输出：</p><ul><li>&lt; 0.5：正常日志。</li><li>0.5~0.7：低级别的错误日志。</li><li>0.7~0.9：一般级别的错误日志。</li><li>&gt;&#x3D; 0.9：严重级别的错误日志。</li></ul><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=* node app.js</span><br></pre></td></tr></table></figure><p>打印如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.4.1.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.4.1.jpg" alt="img"></a></p><p>可以看出，debug 模块打印的日志与 console.log 相比，有以下几个特点：</p><ol><li>不同的日志类型分配了不同的颜色加以区分，更直观。</li><li>添加了日志类型的前缀。</li><li>添加了自上一次该类型日志打印到这次日志打印经历了多长时间的后缀。</li></ol><p>debug 模块支持以下用法：</p><ul><li>DEBUG&#x3D;*：打印所有类型的日志。</li><li>DEBUG&#x3D;log：只打印 log 类型的日志。</li><li>DEBUG&#x3D;error:*：打印所有以 error: 开头的日志。</li><li>DEBUG&#x3D;error:*,-error:low：打印所有以 error: 开头的并且过滤掉 error:low 类型的日志。</li></ul><p>下面演示一下第 4 种的用法，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=error:*,-error:low node app.js</span><br></pre></td></tr></table></figure><p>打印如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.4.2.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.4.2.jpg" alt="img"></a></p><h2 id="4-4-2-repl2"><a href="#4-4-2-repl2" class="headerlink" title="4.4.2 repl2"></a>4.4.2 repl2</h2><p>我们在写代码时，有时可能记不清某个模块的某个方法的具体用法，比如：用 moment 格式化年份是用 <code>moment().format(&#39;YYYY&#39;)</code> 还是用 <code>moment().format(&#39;yyyy&#39;)</code> 还是两种写法都可以？lodash 的 <code>_.pick</code> 方法能否能接收数组作为参数？这个时候相对于翻阅官方文档，在 REPL 里试一下可能会更快，通常步骤是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm i moment</span><br><span class="line">$ node</span><br><span class="line">&gt; const moment = require(&#x27;moment&#x27;)</span><br><span class="line">&gt; moment().format(&#x27;YYYY&#x27;)</span><br><span class="line">&#x27;2017&#x27;</span><br><span class="line">&gt; moment().format(&#x27;yyyy&#x27;)</span><br><span class="line">&#x27;yyyy&#x27;</span><br></pre></td></tr></table></figure><p>一次还好，次数多了也略微烦琐。repl2 模块便是为了解决这个问题而生的。</p><p>repl2 顾名思义是 REPL 的增强版，repl2 会根据一个用户配置（~&#x2F;.noderc），预先加载模块到 REPL 中，省下了我们手动在 REPL 中 require 模块的过程。</p><p>全局安装 repl2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i repl2 -g</span><br></pre></td></tr></table></figure><p>使用方式很简单:</p><ol><li>将常用的模块全局安装，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i lodash validator moment -g</span><br></pre></td></tr></table></figure><ol><li>添加配置到 ~&#x2F;.noderc：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;lodash&quot;: &quot;__&quot;,</span><br><span class="line">  &quot;moment&quot;: &quot;moment&quot;,</span><br><span class="line">  &quot;validator&quot;: &quot;validator&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>运行 noder：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ noder</span><br><span class="line">__ = lodash@4.17.4 -&gt; local</span><br><span class="line">moment = moment@2.18.1 -&gt; global</span><br><span class="line">validator = validator@7.0.0 -&gt; global</span><br><span class="line">&gt; moment().format(&#x27;YYYY&#x27;)</span><br><span class="line">&#x27;2017&#x27;</span><br><span class="line">&gt; __.random(0, 5)</span><br><span class="line">3</span><br><span class="line">&gt; validator.isEmail(&#x27;foo@bar.com&#x27;)</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>需要讲解以下几点：</p><ol><li>~&#x2F;.noderc 是一个 JSON 文件，key 是模块的名字，value 是 require 这个模块后加载到 REPL 中的变量名。这里给 lodash 命名的变量名是 __ 而不是 _，是因为 REPL 中 _ 有特殊含义，表示上一个表达式的结果。</li><li>repl2 会优先加载当前目录下的模块，没有找到然后再去加载全局安装的模块。上面结果显示 lodash 是从本地目录加载的，因为 test 目录下已经安装了 lodash，其余的模块没有从本地目录找到则尝试从全局 npm 目录加载。如果都没有找到，则不会加载。</li></ol><h2 id="4-4-3-power-assert"><a href="#4-4-3-power-assert" class="headerlink" title="4.4.3 power-assert"></a>4.4.3 power-assert</h2><p>我们常用的断言库有：</p><ul><li><a href="https://github.com/shouldjs/should.js">should.js</a></li><li><a href="https://github.com/Automattic/expect.js">expect.js</a></li><li><a href="https://github.com/chaijs/chai">chai</a></li></ul><p>但这类断言库都有一些通病：</p><ol><li>过分追求语义化，API 复杂。</li><li>错误信息不足。</li></ol><p>先看一段代码：</p><p><strong>test.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const assert = require(&#x27;assert&#x27;)</span><br><span class="line">const should = require(&#x27;should&#x27;)</span><br><span class="line">const expect = require(&#x27;expect.js&#x27;)</span><br><span class="line"></span><br><span class="line">const tom = &#123; id: 1, age: 18 &#125;</span><br><span class="line">const bob = &#123; id: 2, age: 20 &#125;</span><br><span class="line"></span><br><span class="line">describe(&#x27;app.js&#x27;, () =&gt; &#123;</span><br><span class="line">  it(&#x27;assert&#x27;, () =&gt; &#123;</span><br><span class="line">    assert(tom.age &gt; bob.age)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(&#x27;should.js&#x27;, () =&gt; &#123;</span><br><span class="line">    tom.age.should.be.above(bob.age)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(&#x27;expect.js&#x27;, () =&gt; &#123;</span><br><span class="line">    expect(tom.age).be.above(bob.age)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mocha</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line">  1) assert</span><br><span class="line">  2) should.js</span><br><span class="line">  3) expect.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 passing (13ms)</span><br><span class="line">3 failing</span><br><span class="line"></span><br><span class="line">1) app.js</span><br><span class="line">     assert:</span><br><span class="line"></span><br><span class="line">    AssertionError [ERR_ASSERTION]: false == true</span><br><span class="line">    + expected - actual</span><br><span class="line"></span><br><span class="line">    -false</span><br><span class="line">    +true</span><br><span class="line"></span><br><span class="line">    at Context.it (test.js:10:5)</span><br><span class="line"></span><br><span class="line">2) app.js</span><br><span class="line">     should.js:</span><br><span class="line">   AssertionError: expected 18 to be above 20</span><br><span class="line">    at Assertion.fail (node_modules/should/cjs/should.js:275:17)</span><br><span class="line">    at Assertion.value (node_modules/should/cjs/should.js:356:19)</span><br><span class="line">    at Context.it (test.js:13:23)</span><br><span class="line"></span><br><span class="line">3) app.js</span><br><span class="line">     expect.js:</span><br><span class="line">   Error: expected 18 to be above 20</span><br><span class="line">    at Assertion.assert (node_modules/expect.js/index.js:96:13)</span><br><span class="line">    at Assertion.greaterThan.Assertion.above (node_modules/expect.js/index.js:297:10)</span><br><span class="line">    at Function.above (node_modules/expect.js/index.js:499:17)</span><br><span class="line">    at Context.it (test.js:16:24)</span><br></pre></td></tr></table></figure><p>可以看出，基本没有有用的信息。这时，power-assert 粉墨登场。</p><p>power-assert 使用起来很简单，理论上只用一个 assert 就可以了，而且可以无缝迁移。</p><p><strong>注意</strong>：在使用 intelli-espower-loader 时，要求必须将测试文件放到 test&#x2F; 目录下，所以我们在 test 目录下创建 test&#x2F;app.js，将原来的 test.js 代码粘贴过去。</p><p>安装 power-assert 和 intelli-espower-loader，然后运行测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i power-assert intelli-espower-loader --save-dev</span><br><span class="line">$ mocha -r intelli-espower-loader</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line">  1) assert</span><br><span class="line">  2) should.js</span><br><span class="line">  3) expect.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 passing (42ms)</span><br><span class="line">3 failing</span><br><span class="line"></span><br><span class="line">1) app.js</span><br><span class="line">     assert:</span><br><span class="line"></span><br><span class="line">    AssertionError [ERR_ASSERTION]:   # test/app.js:10</span><br><span class="line"></span><br><span class="line">assert(tom.age &gt; bob.age)</span><br><span class="line">       |   |   | |   |</span><br><span class="line">       |   |   | |   20</span><br><span class="line">       |   |   | Object&#123;id:2,age:20&#125;</span><br><span class="line">       |   18  false</span><br><span class="line">       Object&#123;id:1,age:18&#125;</span><br><span class="line"></span><br><span class="line">    + expected - actual</span><br><span class="line"></span><br><span class="line">    -false</span><br><span class="line">    +true</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>错误信息非常直观，有以下两点需要说明：</p><ol><li>mocha 需要引入 intelli-espower-loader，主要是转译代码，转译之后 <code>require(&#39;assert&#39;)</code> 都不需要改。</li><li>intelli-espower-loader 可选择地在 package.json 中添加 directories.test 配置，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;directories&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;mytest/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有 directories.test 配置，则默认是 <code>test/</code>。</p><h2 id="4-4-4-参考链接"><a href="#4-4-4-参考链接" class="headerlink" title="4.4.4 参考链接"></a>4.4.4 参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25956323">https://zhuanlan.zhihu.com/p/25956323</a></li><li><a href="https://www.npmjs.com/package/intelli-espower-loader">https://www.npmjs.com/package/intelli-espower-loader</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 4.3 VS Code Debugging</title>
      <link href="/2019/07/26/4.3.1%20%E5%9F%BA%E6%9C%AC%E8%B0%83%E8%AF%95/"/>
      <url>/2019/07/26/4.3.1%20%E5%9F%BA%E6%9C%AC%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>Visual Studio Code（简称 VS Code）是一款微软开源的现代化、跨平台、轻量级的代码编辑器。VS Code 很好很强大，本节将介绍如何使用 VS Code 来调试 Node.js 代码。</p><h2 id="4-3-1-基本调试"><a href="#4-3-1-基本调试" class="headerlink" title="4.3.1 基本调试"></a>4.3.1 基本调试</h2><p>示例代码如下：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Paloma = require(&#x27;paloma&#x27;)</span><br><span class="line">const app = new Paloma()</span><br><span class="line"></span><br><span class="line">app.use(ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#x27;hello world!&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><p>用 VS Code 加载 test 文件夹，打开 app.js，然后进行如下操作：</p><ol><li>单击左侧第 4 个 tab，切换到调试模式。</li><li>单击代码第 5 行 <code>ctx.body=&#39;hello world!&#39;</code> 左侧空白处添加断点。</li><li>单击左上角 ”调试“ 的绿色三角按钮启动调试。</li><li>单击左上角的终端图标打开调试控制台。</li></ol><p>最终如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.3.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.3.1.png" alt="img"></a></p><p>从 “调试控制台“ 切换到 ”终端“，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000</span><br></pre></td></tr></table></figure><p>如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.3.2.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.3.2.png" alt="img"></a></p><p>可以看出，VS Code 基本覆盖了 Chrome DevTools 的所有功能，并且有两个额外的优点：</p><ol><li>集成了终端，不用再打开新的终端输入命令了。</li><li>调试动作里添加了 ”重启“ 和 ”停止“ 按钮，不用每次修改完代码后切回终端去重启了。</li></ol><p>但 VS Code 的强大远不止如此，通过 launch.json 可以配置详细的调试功能。</p><h2 id="4-3-2-launch-json"><a href="#4-3-2-launch-json" class="headerlink" title="4.3.2 launch.json"></a>4.3.2 launch.json</h2><p>上图可以看出，”调试“ 按钮右边有一个下拉菜单，默认是 ”没有配置“。单击右侧的齿轮状图标，会在项目根目录下创建 .vscode 文件夹及 launch.json 文件。launch.json 的内容如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.3.3.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.3.3.png" alt="img"></a></p><p>这个默认配置的意思是执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node $&#123;workspaceFolder&#125;/app.js</span><br></pre></td></tr></table></figure><p>launch.json 其实就是存储了一些调试相关的配置，VS Code 在启动调试时，会读取 launch.json 决定以何种方式调试。launch.json 有以下常用选项：</p><p>必需字段如下：</p><ul><li>type：调试器类型。这里是 node（内置的调试器），如果安装了 Go 和 PHP 的扩展后，则对应的 type 分别为 go 和 php。</li><li>request：请求的类型，支持 launch 和 attach。launch 就是以 debug 模式启动调试，attach 就是附加到已经启动的进程开启 debug 模式并调试，跟在上一小节中提到的用 <code>node -e &quot;process._debugProcess(PID)&quot;</code> 作用一样。</li><li>name：下拉菜单显示的名字。</li></ul><p>可选字段（括号里表示适用的类型）如下：</p><ul><li>program：可执行文件或者调试器要运行的文件 (launch)。</li><li>args：要传递给调试程序的参数 (launch)。</li><li>env：环境变量 (launch)。</li><li>cwd：当前执行目录 (launch)。</li><li>address：IP 地址 (launch &amp; attach)。</li><li>port：端口号 (launch &amp; attach)。</li><li>skipFiles：想要忽略的文件，数组类型 (launch &amp; attach)。</li><li>processId：进程 PID (attach)。</li><li>…</li></ul><p>变量替换：</p><ul><li>${workspaceFolder}：当前打开工程的路径。</li><li>${file}：当前打开文件的路径。</li><li>${fileBasename}：当前打开文件的名字，包含后缀名。</li><li>${fileDirname}：当前打开文件所在的文件夹的路径。</li><li>${fileExtname}：当前打开文件的后缀名。</li><li>${cwd}：当前执行目录。</li><li>…</li></ul><p>如果当前打开的文件是 app.js，则以下配置与默认配置是等效的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;启动程序&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;file&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若想了解更多的 launch.json 选项，则请查阅：</p><ul><li><a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes">Debugging in Visual Studio Code</a>。</li><li><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes">Debug Node.js Apps using VS Code</a>。</li></ul><p>下面以 5 个实用的技巧讲解部分 launch.json 配置的作用。</p><h2 id="4-3-3-技巧-1——条件断点"><a href="#4-3-3-技巧-1——条件断点" class="headerlink" title="4.3.3 技巧 1——条件断点"></a>4.3.3 技巧 1——条件断点</h2><p>VS Code 可以添加条件断点，即执行到该行代码满足特定条件后程序才会中断。在断点小红点上右键选择 ”编辑断点“，可以选择以下两种条件：</p><ol><li>表达式：当表达式计算结果为 true 时中断，例如设置：<code>ctx.query.name === &#39;nswbmw&#39;</code>，表示当访问 <code>localhost:3000?name=nswbmw</code> 时断点才会生效，其余请求断点无效。</li><li>命中次数：同样当表达式计算结果为 true 时中断，支持运算符 &lt;、&lt;&#x3D;、&#x3D;&#x3D;、&gt;、&gt;&#x3D;、%。例如：<ol><li>&gt;10：执行 10 次以后，断点才会生效。</li><li>&lt;3：只有前 2 次断点会生效。</li><li>10：等价于 &gt;&#x3D;10。</li><li>%2：隔一次中断一次。</li></ol></li></ol><p><strong>注意</strong>：可以组合表达式和命中次数条件一起使用。在切换条件类型时，需要将原来的条件清空，否则会添加两种条件。将鼠标悬浮在断点上，可以查看设置了哪些条件。</p><h2 id="4-3-4-技巧-2——skipFiles"><a href="#4-3-4-技巧-2——skipFiles" class="headerlink" title="4.3.4 技巧 2——skipFiles"></a>4.3.4 技巧 2——skipFiles</h2><p>从上面图中可以看到，在 VS Code 左侧有一个 ”调用堆栈“ 面板，显示了当前断点的调用堆栈，但无法直观地看出哪些是我们项目的代码，哪些是 node_modules 里模块的代码，而且在单步调试时会进入到 node_modules 里。总之，我们不关心 node_modules 里的代码，我们只关心项目本身的代码。这时，skipFiles 就派上用场了。</p><p>skipFiles 顾名思义就是忽略我们不关心的文件。修改 launch.json 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;启动程序&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/app.js&quot;,</span><br><span class="line">            &quot;skipFiles&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/node_modules/**/*.js&quot;,</span><br><span class="line">                &quot;&lt;node_internals&gt;/**/*.js&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有以下几点需要解释：</p><ol><li>支持 ${xxx} 这种变量替换。</li><li>支持 glob 模式匹配。</li><li><node_internals> 用来忽略 Node.js 核心模块。</li></ol><p>重启调试后，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.3.4.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.3.4.png" alt="img"></a></p><p><strong>可以看出</strong>：在左侧 ”调用堆栈“ 中，我们不关心的调用栈都变灰了，而且单步调试也不会进入到 skipFiles 所匹配的文件里。</p><h2 id="4-3-5-技巧-3——自动重启"><a href="#4-3-5-技巧-3——自动重启" class="headerlink" title="4.3.5 技巧 3——自动重启"></a>4.3.5 技巧 3——自动重启</h2><p>在每次修改代码保存后都要手动重启，否则修改后的代码和断点都不会生效。VS Code 开发者们想到了这一点，通过添加配置可以实现修改代码保存后会自动重启调试，需要结合 <a href="https://nodemon.io/">nodemon</a> 一起使用。</p><p>首先，全局安装 nodemon：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i nodemon -g</span><br></pre></td></tr></table></figure><p>然后，修改 launch.json：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;启动程序&quot;,</span><br><span class="line">            &quot;runtimeExecutable&quot;: &quot;nodemon&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/app.js&quot;,</span><br><span class="line">            &quot;restart&quot;: true,</span><br><span class="line">            &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">            &quot;skipFiles&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/node_modules/**/*.js&quot;,</span><br><span class="line">                &quot;&lt;node_internals&gt;/**/*.js&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前的 launch.json 相比较上一个版本的 launch.json，多了以下几个字段：</p><ul><li>runtimeExecutable：用什么命令执行 app.js，这里设置为 nodemon。</li><li>restart：设置为 true，修改代码并保存后会自动重启调试。</li><li>console：当单击停止按钮或者修改代码并保存后自动重启调试，而 nodemon 是仍然在运行的，通过设置为 console 为 integratedTerminal 可以解决这个问题。此时 VS Code 终端将会打印 nodemon 的 log，可以在终端右侧的下拉菜单中选择返回第 1 个终端，然后运行 <code>curl localhost:3000</code> 进行调试。</li></ul><p>对于已经使用 nodemon 运行的程序，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nodemon --inspect app.js</span><br></pre></td></tr></table></figure><p>可使用 attach 模式启动调试，launch.json 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Attach to node&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;attach&quot;,</span><br><span class="line">            &quot;restart&quot;: true,</span><br><span class="line">            &quot;processId&quot;: &quot;$&#123;command:PickProcess&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 Attach to node 配置进行调试时，VS Code 会列出正在执行的 node 进程及对应的 PID 以供选择。也可以通过 address 和 port 参数设置 attach 到具体的进程开启调试。</p><h2 id="4-3-6-技巧-4——特定操作系统设置"><a href="#4-3-6-技巧-4——特定操作系统设置" class="headerlink" title="4.3.6 技巧 4——特定操作系统设置"></a>4.3.6 技巧 4——特定操作系统设置</h2><p>针对不同的操作系统，可能会用到不同的调试配置。可选的参数为：</p><ul><li>windows</li><li>linux</li><li>osx</li></ul><p>示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;启动调试&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;./node_modules/gulp/bin/gulpfile.js&quot;,</span><br><span class="line">            &quot;args&quot;: [&quot;/path/to/app.js&quot;],</span><br><span class="line">            &quot;windows&quot;: &#123;</span><br><span class="line">                &quot;args&quot;: [&quot;\\path\\to\\app.js&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-7-技巧-5——多配置"><a href="#4-3-7-技巧-5——多配置" class="headerlink" title="4.3.7 技巧 5——多配置"></a>4.3.7 技巧 5——多配置</h2><p>configurations 是个数组而不是个对象，这样设计就是为了可以添加多个调试配置。打开 launch.json，单击右下角的 ”添加配置…“，会弹出配置模板，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.3.5.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.3.5.png" alt="img"></a></p><p>configurations 可以用来配置不同的调试规则，比如最终将 launch.json 修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;attach&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Attach to node&quot;,</span><br><span class="line">            &quot;restart&quot;: true,</span><br><span class="line">            &quot;processId&quot;: &quot;$&#123;command:PickProcess&#125;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;启动程序&quot;,</span><br><span class="line">            &quot;runtimeExecutable&quot;: &quot;nodemon&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/app.js&quot;,</span><br><span class="line">            &quot;restart&quot;: true,</span><br><span class="line">            &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">            &quot;skipFiles&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/node_modules/**/*.js&quot;,</span><br><span class="line">                &quot;&lt;node_internals&gt;/**/*.js&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-8-总结"><a href="#4-3-8-总结" class="headerlink" title="4.3.8 总结"></a>4.3.8 总结</h2><p>VS Code 的调试功能十分强大，本节只讲解了一些常用的调试功能，对于其余的调试功能，还请读者自行尝试。</p><h2 id="4-3-9-参考链接"><a href="#4-3-9-参考链接" class="headerlink" title="4.3.9 参考链接"></a>4.3.9 参考链接</h2><ul><li><a href="https://code.visualstudio.com/docs/editor/debugging">https://code.visualstudio.com/docs/editor/debugging</a></li><li><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 4.2 Chrome Devtools</title>
      <link href="/2019/07/22/4.2.1%20%E4%BD%BF%E7%94%A8%20Chrome%20DevTools/"/>
      <url>/2019/07/22/4.2.1%20%E4%BD%BF%E7%94%A8%20Chrome%20DevTools/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>调试是每个程序员必备的技能，因此选择合适的调试工具能极大地方便我们调试代码。Node.js 的调试方式也有很多，常见的有：</p><ol><li>万能的 console.log</li><li>debugger</li><li>node-inspector</li></ol><p>以上本节都不会讲解，因为：</p><ol><li>console.log 就不用说了。</li><li>debugger 不推荐使用，因为：<ol><li>使用繁琐，需手动打点。</li><li>若忘记删除 debugger，还会引起性能问题。</li></ol></li><li>node-inspector 已经退出历史舞台。<a href="mailto:&#x6e;&#x6f;&#x64;&#x65;&#x40;&#x36;&#46;&#51;">&#x6e;&#x6f;&#x64;&#x65;&#x40;&#x36;&#46;&#51;</a> 以后内置了一个调试器，可以结合 Chrome DevTools 使用，而且比 node-inspector 更强大。</li></ol><p>下面就讲讲 Chrome DevTools 的用法。</p><h2 id="4-2-1-使用-Chrome-DevTools"><a href="#4-2-1-使用-Chrome-DevTools" class="headerlink" title="4.2.1 使用 Chrome DevTools"></a>4.2.1 使用 Chrome DevTools</h2><p>创建示例代码：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Paloma = require(&#x27;paloma&#x27;)</span><br><span class="line">const app = new Paloma()</span><br><span class="line"></span><br><span class="line">app.use(ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#x27;hello world!&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node --inspect app.js</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果想让代码在第 1 行就暂停执行，需要使用 –inspect-brk 参数启动，即 <code>node --inspect-brk app.js</code>。</p><p>打开 Chrome 浏览器，访问 chrome:&#x2F;&#x2F;inspect，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.2.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.2.1.png" alt="img"></a></p><p>单击 Remote Target 下的 inspect，选择 Sources，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.2.2.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.2.2.png" alt="img"></a></p><p>使用方式与 node-inspector 类似，可以添加断点，然后在 Console 里面直接输入变量名来打印该变量的值。如下所示，在第 6 行添加断点，然后通过 <code>curl localhost:3000?name=nswbmw</code>，代码执行到第 6 行暂停执行，在 Console 里打印 ctx.query 的值：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.2.3.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.2.3.png" alt="img"></a></p><p><strong>小提示</strong>：将鼠标悬浮在某个变量上，也会显示它的值，例如：ctx。</p><p>展开右侧的 debugger 有更多的功能，例如单步执行、单步进入、单步退出等等，这里不再详细讲解。</p><h2 id="4-2-2-NIM"><a href="#4-2-2-NIM" class="headerlink" title="4.2.2 NIM"></a>4.2.2 <a href="https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj">NIM</a></h2><p>每次调试 Node.js 都要打开隐藏那么深的入口是不是很烦？还好我们有 <a href="https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj">NIM</a>。NIM（Node Inspector Manager）是一个 Chrome 插件，可以帮助我们快捷地打开 DevTools，也可以设置自动发现并打开 DevTools。</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/4.2.4.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/4.2.4.png" alt="img"></a></p><h2 id="4-2-3-inspect-process"><a href="#4-2-3-inspect-process" class="headerlink" title="4.2.3 inspect-process"></a>4.2.3 <a href="https://github.com/jaridmargolin/inspect-process">inspect-process</a></h2><p>如果你觉得 NIM 用起来也麻烦，那你可能需要 <a href="https://github.com/jaridmargolin/inspect-process">inspect-process</a>。</p><p>全局安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i inspect-process -g</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ inspect app.js</span><br></pre></td></tr></table></figure><p>inspect-process 会自动调起 Chrome DevTools，然后定位到 app.js，其余用法与 Chrome DevTools 一致。</p><h2 id="4-2-4-process-debugProcess"><a href="#4-2-4-process-debugProcess" class="headerlink" title="4.2.4 process._debugProcess"></a>4.2.4 process._debugProcess</h2><p>如果一个 Node.js 进程已经启动，没有添加 –inspect 参数，我们不想重启（会丢失现场）又想调试怎么办？这时可以用 process._debugProcess。使用方法如下：</p><ol><li>通过 ps 命令或者 <code>pgrep -n node</code> 查看当前启动的 Node.js 进程的 pid，例如：53911。</li><li>打开新的终端，运行：<code>node -e &quot;process._debugProcess(53911)&quot;</code>，原来的 Node.js 进程会打印出：Debugger listening on ws:&#x2F;&#x2F;127.0.0.1:9229&#x2F;2331fa07-32af-45eb-a1a8-bead7a0ab905。</li><li>调出 Chrome DevTools 进行调试。</li></ol><h2 id="4-2-5-参考链接"><a href="#4-2-5-参考链接" class="headerlink" title="4.2.5 参考链接"></a>4.2.5 参考链接</h2><ul><li><a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27">https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nohup stop running unexpected - solved</title>
      <link href="/2019/07/21/Nohup-exit/"/>
      <url>/2019/07/21/Nohup-exit/</url>
      
        <content type="html"><![CDATA[<p>Today I have encounterd a weird issue with Nohup, my sh command is used as:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> npm start 2&gt;/dev/null 1&gt;/dev/null&amp;</span><br></pre></td></tr></table></figure><p>But after I have closed the connection of my Putty, the npm thread was terminated.</p><p>Finally, I have found the problem is with the session, to disconnect the Putty, I have to tpye in command exit, instead of closing the window directly, the exit command will leave the session running in background.</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nohup </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 4.1 Source Map</title>
      <link href="/2019/07/18/4.1.1%20%E4%BB%80%E4%B9%88%E6%98%AF%20Source%20Map%EF%BC%9F/"/>
      <url>/2019/07/18/4.1.1%20%E4%BB%80%E4%B9%88%E6%98%AF%20Source%20Map%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="4-1-1-什么是-Source-Map？"><a href="#4-1-1-什么是-Source-Map？" class="headerlink" title="4.1.1 什么是 Source Map？"></a>4.1.1 什么是 Source Map？</h2><p>对于 Source Map，想必大家并不陌生，在前端开发中通常要压缩 JavaScript，CSS，以减小体积，加快网页显示。但带来的后果是如果出现错误，就会导致无法定位错误，这时 Source Map 应运而生。举个例子， jQuery 1.9 引入了 Source Map，打开 <a href="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A">http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js，最后一行是这样的：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//@ sourceMappingURL=jquery.min.map</span><br></pre></td></tr></table></figure><p>这就是 Source Map。它是一个独立的 map（其实就是 JSON） 文件，通常与源码在同一个目录下。</p><p>Source Map 常用于以下几个场景：</p><ol><li>压缩代码，减小体积。比如 jQuery 1.9 的源码，压缩前是 252KB，压缩后是 32KB。</li><li>多个文件合并，减少 HTTP 请求数，仅用于前端。</li><li>将其他语言编译成 JavaScript，例如：CoffeeScript、TypeScript 等。</li></ol><p>本节只讲解如何使用 Source Map，关于 map 文件中字段的含义本节不会解释，有兴趣的读者可以查看参考链接中的文章。接下来我们在 Node.js 环境下以场景 1、3 为例，分别介绍如何将 uglify-es 和 TypeScript 结合 Source Map 使用。</p><h2 id="4-1-2-uglify-es"><a href="#4-1-2-uglify-es" class="headerlink" title="4.1.2 uglify-es"></a>4.1.2 uglify-es</h2><p>uglify-js 是最常用的 JavaScript 代码压缩工具，但只支持到 ES5，uglify-es 支持 ES6+ 并且兼容 uglify-js，所以本节使用 uglify-es。</p><p>source-map-support 是一个在 Node.js 环境下支持 Source Map 的模块。</p><p>安装 uglify-es 和 source-map-support：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i uglify-es -g</span><br><span class="line">$ npm i source-map-support</span><br></pre></td></tr></table></figure><p>创建测试代码：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;source-map-support&#x27;).install()</span><br><span class="line"></span><br><span class="line">function sayHello (name) &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">  console.log(`Hello, $&#123;name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(&#x27;World&#x27;)</span><br></pre></td></tr></table></figure><p>使用 uglify-es 压缩代码文件并生成 map 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uglifyjs app.js -o app.min.js --source-map &quot;url=app.min.js.map&quot;</span><br></pre></td></tr></table></figure><p>生成 app.min.js 和 app.min.js.map 文件，内容分别如下：</p><p><strong>app.min.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;source-map-support&quot;).install();function sayHello(name)&#123;throw new Error(&quot;error!!!&quot;);console.log(`Hello, $&#123;name&#125;`)&#125;sayHello(&quot;World&quot;);</span><br><span class="line">//# sourceMappingURL=app.min.js.map</span><br></pre></td></tr></table></figure><p><strong>app.min.js.map</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;version&quot;:3,&quot;sources&quot;:[&quot;app.js&quot;],&quot;names&quot;:[&quot;require&quot;,&quot;install&quot;,&quot;sayHello&quot;,&quot;name&quot;,&quot;Error&quot;,&quot;console&quot;,&quot;log&quot;],&quot;mappings&quot;:&quot;AAAAA,QAAQ,sBAAsBC,UAE9B,SAASC,SAAUC,MACjB,MAAM,IAAIC,MAAM,YAChBC,QAAQC,cAAcH,QAGxBD,SAAS&quot;&#125;</span><br></pre></td></tr></table></figure><p>此时运行 app.min.js 可以显示正确的错误栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node app.min.js</span><br><span class="line"></span><br><span class="line">/Users/nswbmw/Desktop/test/app.js:4</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">        ^</span><br><span class="line">Error: error!!!</span><br><span class="line">    at sayHello (/Users/nswbmw/Desktop/test/app.js:4:9)</span><br></pre></td></tr></table></figure><p>如果删除 app.min.js 最后那行注释，重新运行则无法显示正确的错误栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node app.min.js</span><br><span class="line"></span><br><span class="line">/Users/nswbmw/Desktop/test/app.min.js:1</span><br><span class="line">require(&quot;source-map-support&quot;).install();function sayHello(name)&#123;throw new Error(&quot;error!!!&quot;);console.log(`Hello, $&#123;name&#125;`)&#125;sayHello(&quot;World&quot;);</span><br><span class="line">                                                                      ^</span><br><span class="line">Error: error!!!</span><br><span class="line">    at sayHello (/Users/nswbmw/Desktop/test/app.min.js:1:71)</span><br></pre></td></tr></table></figure><p>source-map-support 是通过 Error.prepareStackTrace 实现的，前面讲解过它的用法，这里不再赘述。</p><h2 id="4-1-3-TypeScript"><a href="#4-1-3-TypeScript" class="headerlink" title="4.1.3 TypeScript"></a>4.1.3 TypeScript</h2><p>全局安装 TypeScript：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i typescript -g</span><br></pre></td></tr></table></figure><p>创建测试代码：</p><p><strong>app_ts.ts</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">declare function require(name: string)</span><br><span class="line">require(&#x27;source-map-support&#x27;).install()</span><br><span class="line"></span><br><span class="line">function sayHello (name: string): any &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(&#x27;World&#x27;)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc --sourceMap app_ts.ts</span><br></pre></td></tr></table></figure><p>生成 app_ts.js 和 app_ts.js.map，运行 app_ts.js 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node app_ts.js</span><br><span class="line"></span><br><span class="line">/Users/nswbmw/Desktop/test/app_ts.ts:5</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">        ^</span><br><span class="line">Error: error!!!</span><br><span class="line">    at sayHello (/Users/nswbmw/Desktop/test/app_ts.ts:5:9)</span><br></pre></td></tr></table></figure><h2 id="4-1-4-source-map-support-高级用法"><a href="#4-1-4-source-map-support-高级用法" class="headerlink" title="4.1.4 source-map-support 高级用法"></a>4.1.4 source-map-support 高级用法</h2><p>我们可以在调用 install 方法时传入一个 retrieveSourceMap 参数，用来自定义处理 Source Map：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;source-map-support&#x27;).install(&#123;</span><br><span class="line">  retrieveSourceMap: function(source) &#123;</span><br><span class="line">    if (source === &#x27;compiled.js&#x27;) &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        url: &#x27;original.js&#x27;,</span><br><span class="line">        map: fs.readFileSync(&#x27;compiled.js.map&#x27;, &#x27;utf8&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>比如将所有 map 文件缓存到内存中，而不是磁盘上。</p><h2 id="4-1-5-参考链接"><a href="#4-1-5-参考链接" class="headerlink" title="4.1.5 参考链接"></a>4.1.5 参考链接</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html">http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</a></li><li><a href="https://yq.aliyun.com/articles/73529">https://yq.aliyun.com/articles/73529</a></li><li><a href="https://github.com/v8/v8/wiki/Stack-Trace-API">https://github.com/v8/v8/wiki/Stack-Trace-API</a></li><li><a href="https://github.com/evanw/node-source-map-support">https://github.com/evanw/node-source-map-support</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adding Tag-Cloud</title>
      <link href="/2019/06/21/Adding-tag-cloud/"/>
      <url>/2019/06/21/Adding-tag-cloud/</url>
      
        <content type="html"><![CDATA[<h3 id="Step-1-Install-the-plugin-hexo-tag-cloud"><a href="#Step-1-Install-the-plugin-hexo-tag-cloud" class="headerlink" title="Step 1: Install the plugin hexo-tag-cloud"></a>Step 1: Install the plugin hexo-tag-cloud</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-cloud@^2.0.* --save</span><br></pre></td></tr></table></figure><h3 id="Step-2-Configuration"><a href="#Step-2-Configuration" class="headerlink" title="Step 2: Configuration"></a>Step 2: Configuration</h3><h4 id="For-the-Swig"><a href="#For-the-Swig" class="headerlink" title="For the Swig"></a>For the Swig</h4><p>Locate the file <code>bash theme/next/layout/_macro/sidebar.swig</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;/js/tagcloud.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span><br><span class="line">    &lt;h3 class=<span class="string">&quot;widget-title&quot;</span>&gt;标签云&lt;/h3&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> class=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span><br><span class="line">        &lt;canvas width=<span class="string">&quot;250&quot;</span> height=<span class="string">&quot;250&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;resCanvas&quot;</span> style=<span class="string">&quot;width=100%&quot;</span>&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="For-the-ejs"><a href="#For-the-ejs" class="headerlink" title="For the ejs"></a>For the ejs</h4><p>Located the file <code>bash hexo/themes/landscape/layout/_widget/tagcloud.ejs </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (site.tags.length) &#123; %&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;/js/tagcloud.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span><br><span class="line">        &lt;h3 class=<span class="string">&quot;widget-title&quot;</span>&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> class=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span><br><span class="line">            &lt;canvas width=<span class="string">&quot;250&quot;</span> height=<span class="string">&quot;250&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;resCanvas&quot;</span> style=<span class="string">&quot;width=100%&quot;</span>&gt;</span><br><span class="line">                &lt;%- tagcloud() %&gt;</span><br><span class="line">            &lt;/canvas&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="For-the-jade"><a href="#For-the-jade" class="headerlink" title="For the jade"></a>For the jade</h4><p>Locate the file <code>bash apollo/layout/archive.jade </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">block container</span><br><span class="line">    include mixins/post</span><br><span class="line">    .archive</span><br><span class="line">        h2(class=<span class="string">&#x27;archive-year&#x27;</span>)= <span class="string">&#x27;Tag Cloud&#x27;</span></span><br><span class="line">        script(<span class="built_in">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>, charset=<span class="string">&#x27;utf-8&#x27;</span>, src=<span class="string">&#x27;/oj-code/js/tagcloud.js&#x27;</span>)</span><br><span class="line">        script(<span class="built_in">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>, charset=<span class="string">&#x27;utf-8&#x27;</span>, src=<span class="string">&#x27;/oj-code/js/tagcanvas.js&#x27;</span>)</span><br><span class="line">        <span class="comment">#myCanvasContainer.widget.tagcloud(align=&#x27;center&#x27;)</span></span><br><span class="line">            canvas<span class="comment">#resCanvas(width=&#x27;500&#x27;, height=&#x27;500&#x27;, style=&#x27;width=100%&#x27;)</span></span><br><span class="line">                !=tagcloud()</span><br><span class="line">            !=tagcloud()</span><br><span class="line">    +postList()</span><br></pre></td></tr></table></figure><h3 id="Step-3-Config-the-theme"><a href="#Step-3-Config-the-theme" class="headerlink" title="Step 3: Config the theme"></a>Step 3: Config the theme</h3><p>Locate the config file in your theme folder <code>bash _config.yml </code></p><p>Adding new lines below in the end of the config file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line">tag_cloud:</span><br><span class="line">    textFont: Trebuchet MS, Helvetica</span><br><span class="line">    textColor: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    textHeight: 25</span><br><span class="line">    outlineColor: <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">    maxSpeed: 0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NeXt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.7 UncaughtException</title>
      <link href="/2019/06/20/3.7.1%20uncaughtException/"/>
      <url>/2019/06/20/3.7.1%20uncaughtException/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>相信所有 Node.js 开发者都对 <code>TypeError: Cannot read property &#39;xxx&#39; of undefined/null</code> 这种错误并不陌生，这是因为期望从一个对象上获取 xxx 属性，结果这个对象的值是 undefined 或者 null。</p><h2 id="3-7-1-uncaughtException"><a href="#3-7-1-uncaughtException" class="headerlink" title="3.7.1 uncaughtException"></a>3.7.1 uncaughtException</h2><p>看一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const article = &#123; title: &#x27;Node.js&#x27;, content: &#x27;Hello, Node.js&#x27; &#125;</span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(article.author.name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行以上代码打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/nswbmw/Desktop/test/app.js:3</span><br><span class="line">  console.log(article.author.name)</span><br><span class="line">                             ^</span><br><span class="line">TypeError: Cannot read property &#x27;name&#x27; of undefined</span><br><span class="line">    at Timeout.setInterval [as _onTimeout] (/Users/nswbmw/Desktop/test/app.js:3:30)</span><br><span class="line">    at ontimeout (timers.js:475:11)</span><br><span class="line">    at tryOnTimeout (timers.js:310:5)</span><br><span class="line">    at Timer.listOnTimeout (timers.js:270:5)</span><br></pre></td></tr></table></figure><p>article 是一个文章对象有 title 和 content 属性，没有 author 属性，所以 article.author 是 undefined，调用 article.author.name 会报错。而且这个运行时错误是在一个异步函数（setImmediate）内抛出的，所以这个错误是一个 “uncaught exception”，如果没有 process.on(‘uncaughtException’, () &#x3D;&gt; {}) 事件监听器的话程序会 crash。</p><p>调试这种错误没有比较好的方法，通常只能添加 console.log 打印出 article 的值。但是我们前面介绍过 llnode 的用法，是否可以使用 llnode 调试这类问题呢？答案是肯定的。</p><h2 id="3-7-2-llnode"><a href="#3-7-2-llnode" class="headerlink" title="3.7.2 llnode"></a>3.7.2 llnode</h2><p>我们添加 –abort-on-uncaught-exception 参数重新运行程序，当程序 crash 的时候，会自动 Core Dump。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -c unlimited</span><br><span class="line">$ node --abort-on-uncaught-exception app.js</span><br><span class="line">Uncaught TypeError: Cannot read property &#x27;name&#x27; of undefined</span><br><span class="line"></span><br><span class="line">FROM</span><br><span class="line">Immediate.setImmediate (/home/nswbmw/test/app.js:1:1)</span><br><span class="line">runCallback (timers.js:1:1)</span><br><span class="line">tryOnImmediate (timers.js:1:1)</span><br><span class="line">processImmediate [as _immediateCallback] (timers.js:1:1)</span><br><span class="line">Illegal instruction (core dumped)</span><br></pre></td></tr></table></figure><p>此时生成一个 core 文件，我们使用 llnode 加载并诊断这个 core 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lldb-4.0 -c ./core</span><br><span class="line">(lldb) target create --core &quot;./core&quot;</span><br><span class="line">Core file &#x27;/home/nswbmw/test/./core&#x27; (x86_64) was loaded.</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><p>使用 <code>v8 bt</code> 查看最近的 backtrace。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) v8 bt</span><br><span class="line"> * thread #1: tid = 4750, 0x00007ffd905d5b39 node`v8::base::OS::Abort() + 9, name = &#x27;node&#x27;, stop reason = signal SIGILL</span><br><span class="line">  * frame #0: 0x00007ffd905d5b39 node`v8::base::OS::Abort() + 9</span><br><span class="line">    frame #1: 0x00007ffd900a4d19 node`v8::internal::Isolate::Throw(v8::internal::Object*, v8::internal::MessageLocation*) + 489</span><br><span class="line">    frame #2: 0x00007ffd9005e7f9 node`v8::internal::LoadIC::Load(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;) + 569</span><br><span class="line">    frame #3: 0x00007ffd9005f759 node`v8::internal::Runtime_LoadIC_Miss(int, v8::internal::Object**, v8::internal::Isolate*) + 633</span><br><span class="line">    frame #4: 0x000018e6e710463d &lt;exit&gt;</span><br><span class="line">    frame #5: 0x000018e6e71ecce4 &lt;stub&gt;</span><br><span class="line">    frame #6: 0x000018e6e71bf9ce setImmediate(this=0x0000154a3ae09429:&lt;Object: Immediate&gt;) at /home/nswbmw/test/app.js:2:14 fn=0x0000154a3ae09281</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：在 frame #4 处程序触发 exit，往上追溯到 frame #6 有一个 setImmediate 抛出了错误，在 app.js 第 2 行，符合打印出的错误信息。setImmediate 的回调函数的地址为 0x0000154a3ae09281，我们使用 <code>v8 i</code> 检索这个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) v8 i 0x0000154a3ae09281</span><br><span class="line">0x0000154a3ae09281:&lt;function: setImmediate at /home/nswbmw/test/app.js:2:14</span><br><span class="line">  context=0x0000154a3ae09199&#123;</span><br><span class="line">    (previous)=0x000017849b703d89</span><br><span class="line">    (closure)=0x0000154a3ae08d81 &#123;&lt;function: (anonymous) at /home/nswbmw/test/app.js:1:10&gt;&#125;,</span><br><span class="line">    article=0x0000154a3ae091d1:&lt;Object: Object&gt;&#125;&gt;</span><br><span class="line">(lldb) v8 i 0x0000154a3ae091d1</span><br><span class="line">0x0000154a3ae091d1:&lt;Object: Object properties &#123;</span><br><span class="line">    .title=0x000014117e04c9e9:&lt;String: &quot;Node.js&quot;&gt;,</span><br><span class="line">    .content=0x000014117e04ca09:&lt;String: &quot;Hello, Node.js&quot;&gt;&#125;&gt;</span><br></pre></td></tr></table></figure><p>setImmediate 函数内有一个 article 对象，然后我们继续通过 <code>v8 i</code> 检索得知 article 的值为 { title: “Node.js”, content: “Hello, Node.js” }，并没有 author 属性，真相大白。</p><h2 id="3-7-3-ReDoS"><a href="#3-7-3-ReDoS" class="headerlink" title="3.7.3 ReDoS"></a>3.7.3 ReDoS</h2><p>DoS（Denial of Service）全称是拒绝服务攻击，ReDoS（RegExp Denial of Service）即是正则表达式拒绝服务攻击。ReDoS 是由于正则表达式写得有缺陷，所以使用正则匹配时，会出现大量占用 CPU 的情况，导致服务不可用，而导致正则表达式匹配 “卡住” 的原因正是正则表达式的 “回溯” 特性。</p><p>看一个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/a.*b/g.test(&#x27;aaaf&#x27;)</span><br></pre></td></tr></table></figure><p>匹配过程如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.7.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.7.1.png" alt="img"></a></p><p><strong>可以看出</strong>：因为 * 是贪婪匹配，所以第 3 步 <code>.*</code> 匹配了字符串末尾，由于剩下一个 <code>b</code> 无法匹配所以 “吐” 出一个字符再尝试匹配（第 4 步），仍然不匹配（第 5 步），继续 “吐” 出一个字符…这个 “吐” 一个字符的过程就是回溯（backtrack）。</p><p>再看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const reg = /(a*)+b/</span><br><span class="line"></span><br><span class="line">console.time(&#x27;reg&#x27;)</span><br><span class="line">reg.test(&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaf&#x27;) // reg: 2572.022ms</span><br><span class="line">// reg.test(&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaf&#x27;) // reg: 5048.735ms</span><br><span class="line">// reg.test(&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaf&#x27;) // reg: 10710.070ms</span><br><span class="line">console.timeEnd(&#x27;reg&#x27;)</span><br></pre></td></tr></table></figure><p>运行以上代码，每添加一个字母 a，程序的运行时间就翻倍，这正是由于正则表达式的回溯导致的，这个正则表达式的时间复杂度为 O(2^n)。</p><p>平时写出具有回溯的正则表达式是比较常见的，这个时候程序会 “卡住”，使用 llnode 也可以调试这类问题。</p><p>运行以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;/(a*)+b/.test(&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaf&#x27;)&quot; &gt; app.js</span><br><span class="line">$ node --abort-on-uncaught-exception app.js &amp;</span><br><span class="line">$ kill -BUS `pgrep -n node`</span><br></pre></td></tr></table></figure><p>生成 core 文件，使用 llnode 调试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ lldb-4.0 -c ./core</span><br><span class="line">(lldb) target create --core &quot;./core&quot;</span><br><span class="line">Core file &#x27;/home/nswbmw/test/./core&#x27; (x86_64) was loaded.</span><br><span class="line">(lldb) v8 bt</span><br><span class="line"> * thread #1: tid = 5381, 0x000036a6db804f6b, name = &#x27;node&#x27;, stop reason = signal SIGBUS</span><br><span class="line">  * frame #0: 0x000036a6db804f6b &lt;builtin&gt;</span><br><span class="line">    ...</span><br><span class="line">    frame #6: 0x000036a6db68463d &lt;exit&gt;</span><br><span class="line">    frame #7: 0x000036a6db7135f4 test(this=0x0000038344709119:&lt;JSRegExp source=/(a*)+b/&gt;, 0x0000098ccdb4c9e9:&lt;String: &quot;aaaaaaaaaaaaaaaa...&quot;&gt;) at (no script) fn=0x0000183ca0c134a1</span><br><span class="line">    ...</span><br><span class="line">(lldb) v8 i -F 0x0000098ccdb4c9e9</span><br><span class="line">0x0000098ccdb4c9e9:&lt;String: &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaf&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：在程序退出前，程序在执行一个正则表达式（<code>/(a*)+b/</code>）的 test 方法，参数是字符串(<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaf</code>)。</p><p>减少正则表达式回溯的简单方法就是合并不必要的量词，如将上面的正则表达式 <code>/(a*)+b/</code> 修改为 <code>/a*b/</code>。</p><h2 id="3-7-4-参考链接"><a href="#3-7-4-参考链接" class="headerlink" title="3.7.4 参考链接"></a>3.7.4 参考链接</h2><ul><li><a href="https://www.rawidn.com/posts/ddos-and-ddos-in-regular-expression.html">https://www.rawidn.com/posts/ddos-and-ddos-in-regular-expression.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.6 What is event loop?</title>
      <link href="/2019/05/28/3.6.1%20%E4%BB%80%E4%B9%88%E6%98%AF%20Event%20Loop%EF%BC%9F/"/>
      <url>/2019/05/28/3.6.1%20%E4%BB%80%E4%B9%88%E6%98%AF%20Event%20Loop%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>事件循环（Event Loop）是 Node.js 最核心的概念，所以理解 Event Loop 如何运作对于写出正确的代码和调试是非常重要的。比如考虑以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;hi&#x27;)</span><br><span class="line">&#125;, 1000)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们期望程序运行 1s 后打印出 hi，但是实际情况可能是远大于 1s 后才打印出 hi。这个时候如果理解 Event Loop 就可以轻易发现问题，否则任凭怎么调试都是发现不了问题的。</p><h2 id="3-6-1-什么是-Event-Loop？"><a href="#3-6-1-什么是-Event-Loop？" class="headerlink" title="3.6.1 什么是 Event Loop？"></a>3.6.1 什么是 Event Loop？</h2><p>Event Loop 可以简单理解为：</p><ol><li>所有任务都在主线程上执行，形成一个执行栈（Execution Context Stack）。</li><li>主线程之外，还存在一个 “任务队列”（Task Queue）。系统把异步任务放到 “任务队列” 之中，然后主线程继续执行后续的任务。</li><li>一旦 “执行栈” 中的所有任务执行完毕，系统就会读取 “任务队列”。如果这个时候，异步任务已经结束了等待状态，就会从 “任务队列” 进入执行栈，恢复执行。</li><li>主线程不断重复上面的第三步。</li></ol><p><strong>小提示</strong>：我们常说 Node.js 是单线程的，但为何能达到高并发呢？原因就在于底层的 Libuv 维护一个 I&#x2F;O 线程池（即上述的 “任务队列”），结合 Node.js 异步 I&#x2F;O 的特性，单线程也能达到高并发啦。</p><p>上面提到了 “读取任务队列”，这样讲有点笼统，其实 Event Loop 的 “读取任务队列” 有 6 个阶段，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure><p>每个阶段都有一个 <strong>FIFO</strong> 的回调队列（queue），当 Event Loop 执行到这个阶段时，会从当前阶段的队列里拿出一个任务放到栈中执行，当队列任务清空，或者执行的回调数量达到上限后，Event Loop 会进入下个阶段。</p><p>每个阶段（phase）的作用：</p><ul><li>timers：执行 setTimeout() 和 setInterval() 中到期的 callback。</li><li>I&#x2F;O callbacks：上一轮循环中有少数的 I&#x2F;O callback 会被延迟到这一轮的这一阶段执行。</li><li>idle, prepare：仅内部使用。</li><li>poll：最重要的阶段，执行 I&#x2F;O callback，在适当的条件下 node 会阻塞在这个阶段。</li><li>check：执行 setImmediate() 的 callback。</li><li>close callbacks：执行 close 事件的 callback，例如 socket.on(‘close’,func)。</li></ul><h2 id="3-6-2-poll-阶段"><a href="#3-6-2-poll-阶段" class="headerlink" title="3.6.2 poll 阶段"></a>3.6.2 poll 阶段</h2><p>poll 阶段主要有两个功能：</p><ol><li>当 timers 的定时器到期后，执行定时器（setTimeout 和 setInterval）的 callback。</li><li>执行 poll 队列里面的 I&#x2F;O callback。</li></ol><p>如果 Event Loop 进入了 poll 阶段，且代码未设定 timer，可能发生以下情况：</p><ul><li>如果 poll queue 不为空，Event Loop 将同步的执行 queue 里的 callback，直至 queue 为空，或者执行的 callback 到达系统上限。</li><li>如果 poll queue 为空，可能发生以下情况：<ul><li>如果代码使用 setImmediate() 设定了 callback，Event Loop 将结束 poll 阶段进入 check 阶段，并执行 check 阶段的 queue。</li><li>如果代码没有使用 setImmediate()，Event Loop 将阻塞在该阶段等待 callbacks 加入 poll queue，如果有 callback 进来则立即执行。</li></ul></li></ul><p>一旦 poll queue 为空，Event Loop 将检查 timers，如果有 timer 的时间到期，Event Loop 将回到 timers 阶段，然后执行 timer queue。</p><h2 id="3-6-3-process-nextTick"><a href="#3-6-3-process-nextTick" class="headerlink" title="3.6.3 process.nextTick()"></a>3.6.3 process.nextTick()</h2><p>上面的 6 个阶段并没有出现 process.nextTick()，process.nextTick() 不在 Event Loop 的任何阶段执行，而是在各个阶段切换的中间执行，即从一个阶段切换到下个阶段前执行。这里还需要提一下 macrotask 和 microtask 的概念，macrotask（宏任务）指 Event Loop 每个阶段执行的任务，microtask（微任务）指每个阶段之间执行的任务。即上述 6 个阶段都属于 macrotask，process.nextTick() 属于 microtask。</p><p><strong>小提示</strong>：process.nextTick() 的实现和 v8 的 microtask 并无关系，是 Node.js 层面的东西，应该说 process.nextTick() 的行为接近为 microtask。Promise.then 也属于 microtask 的一种。</p><p>最后，放出一张关于 Event Loop 非常直观的图：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.6.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.6.1.png" alt="img"></a></p><p>绿色小块表示 Event Loop 的各个阶段，执行的是 macrotask，macrotask 中间的粉红箭头表示执行的是 microtask。</p><h2 id="3-6-4-六道题"><a href="#3-6-4-六道题" class="headerlink" title="3.6.4 六道题"></a>3.6.4 六道题</h2><p>下面我们以六道题巩固一下前面讲到的 Event Loop 的知识。</p><h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setTimeout&#x27;)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setImmediate&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setImmediate</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout</span><br><span class="line">setImmediate</span><br></pre></td></tr></table></figure><p>为什么结果不确定呢？</p><p><strong>解释</strong>：setTimeout&#x2F;setInterval 的第 2 个参数取值范围是：[1, 2^31 - 1]，如果超过这个范围则会初始化为 1，即 setTimeout(fn, 0) &#x3D;&#x3D;&#x3D; setTimeout(fn, 1)。我们知道 setTimeout 的回调函数在 timer 阶段执行，setImmediate 的回调函数在 check 阶段执行，event loop 的开始会先检查 timer 阶段，但是在开始之前到 timer 阶段会消耗一定时间，所以就会出现两种情况：</p><ol><li>timer 前的准备时间超过 1ms，满足 loop-&gt;time &gt;&#x3D; 1，则执行 timer 阶段（setTimeout）的回调函数。</li><li>timer 前的准备时间小于 1ms，则先执行 check 阶段（setImmediate）的回调函数，下一次 event loop 执行 timer 阶段（setTimeout）的回调函数。</li></ol><p>再看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setTimeout&#x27;)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setImmediate&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const start = Date.now()</span><br><span class="line">while (Date.now() - start &lt; 10);</span><br></pre></td></tr></table></figure><p>运行结果一定是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout</span><br><span class="line">setImmediate</span><br></pre></td></tr></table></figure><h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;setTimeout&#x27;)</span><br><span class="line">  &#125;, 0)</span><br><span class="line"></span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;setImmediate&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setImmediate</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：fs.readFile 的回调函数执行完后：</p><ol><li>注册 setTimeout 的回调函数到 timer 阶段。</li><li>注册 setImmediate 的回调函数到 check 阶段。</li><li>event loop 从 pool 阶段出来继续往下一个阶段执行，恰好是 check 阶段，所以 setImmediate 的回调函数先执行。</li><li>本次 event loop 结束后，进入下一次 event loop，执行 setTimeout 的回调函数。</li></ol><p>所以，在 I&#x2F;O Callbacks 中注册的 setTimeout 和 setImmediate，永远都是 setImmediate 先执行。</p><h3 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setInterval&#x27;)</span><br><span class="line">&#125;, 100)</span><br><span class="line"></span><br><span class="line">process.nextTick(function tick () &#123;</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：setInterval 永远不会打印出来。</p><p><strong>解释</strong>：process.nextTick 会无限循环，将 event loop 阻塞在 microtask 阶段，导致 event loop 上其他 macrotask 阶段的回调函数没有机会执行。</p><p>解决方法通常是用 setImmediate 替代 process.nextTick，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setInterval&#x27;)</span><br><span class="line">&#125;, 100)</span><br><span class="line"></span><br><span class="line">setImmediate(function immediate () &#123;</span><br><span class="line">  setImmediate(immediate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：每 100ms 打印一次 setInterval。</p><p><strong>解释</strong>：process.nextTick 内执行 process.nextTick 仍然将 tick 函数注册到当前 microtask 的尾部，所以导致 microtask 永远执行不完； setImmediate 内执行 setImmediate 会将 immediate 函数注册到下一次 event loop 的 check 阶段，而不是当前正在执行的 check 阶段，所以给了 event loop 上其他 macrotask 执行的机会。</p><p>再看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setImmediate1&#x27;)</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;setImmediate2&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;nextTick&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setImmediate3&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setImmediate1</span><br><span class="line">setImmediate3</span><br><span class="line">nextTick</span><br><span class="line">setImmediate2</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：并不是说 setImmediate 可以完全代替 process.nextTick，process.nextTick 在特定场景下还是无法被代替的，比如我们就想将一些操作放到最近的 microtask 里执行。</p><h3 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const promise = Promise.resolve()</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    return promise</span><br><span class="line">  &#125;)</span><br><span class="line">promise.catch(console.error)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="line">    at &lt;anonymous&gt;</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:188:7)</span><br><span class="line">    at Function.Module.runMain (module.js:667:11)</span><br><span class="line">    at startup (bootstrap_node.js:187:16)</span><br><span class="line">    at bootstrap_node.js:607:3</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：Promise A+ 的规范里规定 promise 不能返回自己。仔细想想，即使规范里不规定，promise.then 类似于 process.nextTick，都会将回调函数注册到 microtask 阶段。上面代码也会导致死循环，类似前面提到的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(function tick () &#123;</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const promise = Promise.resolve()</span><br><span class="line"></span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;promise&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;nextTick&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nextTick</span><br><span class="line">promise</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：promise.then 虽然和 process.nextTick 一样，都将回调函数注册到 microtask，但优先级不一样。process.nextTick 的 microtask queue 总是优先于 promise 的 microtask queue 执行。</p><h3 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">&#125;, 0)</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(2)</span><br><span class="line">  for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">    i === 9999 &amp;&amp; resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(3)</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">  console.log(4)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(5)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：Promise 构造函数是同步执行的，所以先打印 2、3，然后打印 5，接下来 event loop 进入执行 microtask 阶段，执行 promise.then 的回调函数打印出 4，然后执行下一个 macrotask，恰好是 timer 阶段的 setTimeout 的回调函数，打印出 1。</p><h3 id="题目六"><a href="#题目六" class="headerlink" title="题目六"></a>题目六</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">  &#125;, 100)</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(4)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(() =&gt; &#123;</span><br><span class="line">  console.log(5)</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(6)</span><br><span class="line">  &#125;, 100)</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(7)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(8)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(9)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>process.nextTick、setTimeout 和 setImmediate 的组合，请读者自行推理吧。</p><h2 id="3-6-5-参考链接"><a href="#3-6-5-参考链接" class="headerlink" title="3.6.5 参考链接"></a>3.6.5 参考链接</h2><ul><li><a href="https://cnodejs.org/topic/57d68794cb6f605d360105bf">https://cnodejs.org/topic/57d68794cb6f605d360105bf</a></li><li><a href="https://cnodejs.org/topic/5a9108d78d6e16e56bb80882">https://cnodejs.org/topic/5a9108d78d6e16e56bb80882</a></li><li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a></li><li><a href="https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c">https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js Tutorial</title>
      <link href="/2019/05/21/Nuxtjs%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/05/21/Nuxtjs%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://link.segmentfault.com/?enc=yQ8lENTmwnYOjAcdGWYdHg==.qBZchJpLuLMLzRDxyeXVf6UVQ25JAxbNuYLPFEPnro/p541xocWwP+kE4eVkOX6oSsfN8k4d1lqwyg1sByVw+w==">原文链接</a></p><p>Vue 开发一个单页面应用，相信很多前端工程师都已经学会了，但是单页面应用有一个致命的缺点，就是 SEO 极不友好。除非，vue 能在服务端渲染（ssr）并直接返回已经渲染好的页面，而并非只是一个单纯的 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。</p><p><a href="https://link.segmentfault.com/?enc=oKAZXiPKJ8/UBeXAg0oxiQ==.6cm3QKXDeEFzjZvUTIl8ZIVO9VzX9U3Ie/L9nEcOVTg=">Nuxt.js</a> 就是一个极简的 vue 版的 ssr 框架。基于它，我们可以快速开发一个基于 vue 的 ssr 单页面应用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Nuxt.js 官方提供了一个模板，可以使用 vue-cli 直接安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init nuxt-community/starter-template &lt;project-name&gt;</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README<span class="selector-class">.md</span></span><br><span class="line">├── assets</span><br><span class="line">├── components</span><br><span class="line">├── layouts</span><br><span class="line">├── middleware</span><br><span class="line">├── node_modules</span><br><span class="line">├── nuxt<span class="selector-class">.config</span><span class="selector-class">.js</span></span><br><span class="line">├── package<span class="selector-class">.json</span></span><br><span class="line">├── pages</span><br><span class="line">├── plugins</span><br><span class="line">├── static</span><br><span class="line">├── store</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>其中：</p><ol><li><strong>assets</strong>: 资源文件。放置需要经过 webpack 打包处理的资源文件，如 scss，图片，字体等。</li><li><strong>components</strong>: 组件。这里存放在页面中，可以复用的组件。</li><li><strong>layouts</strong>: 布局。页面都需要有一个布局，默认为 default。它规定了一个页面如何布局页面。所有页面都会加载在布局页面中的 <code>&lt;nuxt /&gt;</code> 标签中。如果需要在普通页面中使用下级路由，则需要在页面中添加 <code>&lt;nuxt-child /&gt;</code>。<strong>该目录名为Nuxt.js保留的，不可更改。</strong></li><li><strong>middleware</strong>: 中间件。存放中间件。可以在页面中调用： <code>middleware: &#39;middlewareName&#39;</code> 。</li><li><strong>pages</strong>: 页面。一个 vue 文件即为一个页面。index.vue 为根页面。<ol><li>若需要二级页面，则添加文件夹即可。</li><li>如果页面的名称类似于 <code>_id.vue</code> （以 <code>_</code> 开头），则为动态路由页面，<code>_</code> 后为匹配的变量（params）。</li><li>若变量是必须的，则在文件夹下建立空文件 <code>index.vue</code>。更多的配置请移步至 <a href="https://link.segmentfault.com/?enc=dqP8fiwxvWcDQejYsgVfnQ==.y26NO9RNGsx08RI8Gi7Imhg7B3G7QLbeJXY0U4CsVIHZ9YnGGZLnh+xUVeE0oWah">官网</a> 。</li></ol></li><li><strong>plugin</strong>: 插件。用于组织那些需要在 <code>根vue.js应用</code> 实例化之前需要运行的 Javascript 插件。<strong>需要注意的是，在任何 Vue 组件的<a href="https://link.segmentfault.com/?enc=CuYf1e6VrH3SxMCC649nww==.QcZmNcZIQPcT+7faNXV4O9TUsr6jlU05cNgm73fDzNVi1aqdlnZmdzcdJq536xrUKJD0LCAGWxh5KnXKj/ztLA==">生命周期</a>内， 只有 <code>beforeCreate</code> 和 <code>created</code> 这两个钩子方法会在 *客户端和服务端均被调用*。其他钩子方法仅在客户端被调用。</strong></li><li><strong>static</strong>: 静态文件。放置不需要经过 webpack 打包的静态资源。如一些 js, css 库。</li><li><strong>store</strong>: 状态管理。具体使用请移步至 <a href="https://link.segmentfault.com/?enc=AoDbP9LRa208Jyhj1oUPIA==.HxvxiMQv3Ou9U/o63GW1kHUDxq1nayYomZ4NobYa53IoUibLC+hvDekNvNidL7jG">官网</a>。</li><li><strong>nuxt.config.js</strong>: <code>nuxt.config.js</code> 文件用于组织Nuxt.js 应用的个性化配置，以便覆盖默认配置。具体配置请移步至 <a href="https://link.segmentfault.com/?enc=Jc3I+GhOcRlE+zP4oHVOSg==.kIVDMKTG/k4jeQsbrBeoBQGx0XP8cxDpRRJHmiXoxH5OpCLe8ayNBuoii6KFqGgq">官网</a>。</li></ol><h3 id="Nuxt-特有函数"><a href="#Nuxt-特有函数" class="headerlink" title="Nuxt 特有函数"></a>Nuxt 特有函数</h3><p>首先，了解一下在 nuxt 的页面中独有的函数&#x2F;变量：</p><h4 id="asyncData-context"><a href="#asyncData-context" class="headerlink" title="asyncData(context)"></a>asyncData(context)</h4><p><code>asyncData</code>方法使得你能够在渲染组件之前异步获取数据。该方法在<strong>服务端</strong>中执行的，所以，请求数据时，<strong>不存在跨域问题</strong>。返回的数据将与 <code>data()</code> 返回的数据进行合并。<strong>由于<code>asyncData</code>方法是在组件 *初始化* 前被调用的，所以在方法内是没有办法通过 <code>this</code> 来引用组件的实例对象。</strong></p><p><code>context</code> 变量的可用属性一览：</p><table><thead><tr><th>属性字段</th><th>类型</th><th>可用</th><th>描述</th></tr></thead><tbody><tr><td><code>isClient</code></td><td>Boolean</td><td>客户端 &amp; 服务端</td><td>是否来自客户端渲染</td></tr><tr><td><code>isServer</code></td><td>Boolean</td><td>客户端 &amp; 服务端</td><td>是否来自服务端渲染</td></tr><tr><td><code>isDev</code></td><td>Boolean</td><td>客户端 &amp; 服务端</td><td>是否是开发(dev) 模式，在生产环境的数据缓存中用到</td></tr><tr><td><code>route</code></td><td><a href="https://link.segmentfault.com/?enc=EhSnyiweglWgdpqp8ODgIA==.xjoo8ztbhJUNMXi8fVa4u6h//LajKkgw1HOL5ujMVjnX3CR3TahY6+KyvRTTsMDJtnopcWfyF1QQSJMQQos5xQ==">vue-router 路由</a></td><td>客户端 &amp; 服务端</td><td><code>vue-router</code> 路由实例。</td></tr><tr><td><code>store</code></td><td><a href="https://link.segmentfault.com/?enc=olAv4D/AKolrJdt3ilarDQ==.bddJZIl0ZP2wddJojIjmNaJDX2OlzVNvn1NmE10RfoGJS0Ar71/FrJYwr/o4auKrfkq6GmKEOsOaZiU0Rnp5Wyv9uG7cjoZhn1ZQ5fM8Ttg=">vuex 数据流</a></td><td>客户端 &amp; 服务端</td><td><code>Vuex.Store</code> 实例。<strong>只有vuex 数据流存在相关配置时可用。</strong></td></tr><tr><td><code>env</code></td><td>Object</td><td>客户端 &amp; 服务端</td><td><code>nuxt.config.js</code> 中配置的环境变量, 见 <a href="https://link.segmentfault.com/?enc=WqVZrMizdFRyKc5oV5TwAA==.ZmzeAp9RGrg/dlq+JbdEFa+oV7cQus/k5ZcttCWkKczqXqEVe2dWUndbwwPnhb9U">环境变量 api</a></td></tr><tr><td><code>params</code></td><td>Object</td><td>客户端 &amp; 服务端</td><td>route.params 的别名</td></tr><tr><td><code>query</code></td><td>Object</td><td>客户端 &amp; 服务端</td><td>route.query 的别名</td></tr><tr><td><code>req</code></td><td><a href="https://link.segmentfault.com/?enc=ZTcor6Gj8DnBDdIL0JP1BA==.9T6jIC+XMg64OYEopDFLdfj8RDbJTh+rVGu/mOUtVHneBypb5FKeZJgfgRLt3BnnzkU1bN8XfLSZFqSgeuBt/w5JDh+7LtP+j7zKLls4Nfk=">http.Request</a></td><td>服务端</td><td>Node.js API 的 Request 对象。如果 nuxt 以中间件形式使用的话，这个对象就根据你所使用的框架而定。<em>nuxt generate 不可用</em>。</td></tr><tr><td><code>res</code></td><td><a href="https://link.segmentfault.com/?enc=4efLqkj2Z6mUjgYtyftj8g==.V5Ao0Iz1WlMXw3MS6p/8lUrhqRm0S3KbPVd4IxipJLLMgrmiCF2anjMVzTUNDC28tVxxDa29s5H/sj8FIwwEDg==">http.Response</a></td><td>服务端</td><td>Node.js API 的 Response 对象。如果 nuxt 以中间件形式使用的话，这个对象就根据你所使用的框架而定。<em>nuxt generate 不可用</em>。</td></tr><tr><td><code>redirect</code></td><td>Function</td><td>客户端 &amp; 服务端</td><td>用这个方法重定向用户请求到另一个路由。状态码在服务端被使用，默认 302。<code>redirect([status,] path [, query])</code></td></tr><tr><td><code>error</code></td><td>Function</td><td>客户端 &amp; 服务端</td><td>用这个方法展示错误页：<code>error(params)</code>。<code>params</code> 参数应该包含 <code>statusCode</code> 和 <code>message</code> 字段。</td></tr></tbody></table><h4 id="fetch-context"><a href="#fetch-context" class="headerlink" title="fetch(context)"></a>fetch(context)</h4><p><em>fetch 方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。为了让获取过程可以异步，<strong>你需要返回一个 Promise</strong>，Nuxt.js 会等这个 promise 完成后再渲染组件。</em></p><p><strong>fetch 会在组件每次加载前被调用（在服务端或切换至目标路由之前）。</strong></p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>Nuxt.js 使用了 <a href="https://link.segmentfault.com/?enc=z6lYOgCdPjX1K5Jdxp8h1Q==.pkZ+oJXV11McTaHeBz5VzvEOW83qsrnpj4Kh8neloASuQu9JDPRFAe28LThj4GM7"><code>vue-meta</code></a> 更新应用的 <code>头部标签(Head)</code> 和 <code>html 属性</code>。</p><p>用于更新 头部信息。如 title，descripe 等。<strong>在 <code>head</code> 方法里可通过 <code>this</code> 关键字来获取组件的数据。</strong></p><h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><p>指定该页面使用哪个布局文件。默认值为 <code>default</code>。</p><h4 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h4><p>需要执行的中间件，如鉴权的 <code>auth</code>等。</p><h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h4><p>指定页面切换时的动画效果。支持传入 <code>String</code>, <code>Object</code>, <code>Function</code>。具体配置请移步至 <a href="https://link.segmentfault.com/?enc=RAWcYpUuPwFcTZWtz55mOQ==.X5ahD5RlPNbcwUQpDybb35s/FHUq9+tr9RwAAbKkjKuWRmWH1+dwf7WCyuMZwwzq">官网</a> 。</p><h4 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h4><p>Nuxt.js 可以让你在动态路由对应的页面组件中配置一个校验方法用于校验动态路由参数的有效性。</p><p>返回 <code>true</code> 说明路由有效，则进入路由页面。返回不是 <code>true</code> 则显示 404 页面。</p><h3 id="Begin-Coding"><a href="#Begin-Coding" class="headerlink" title="Begin Coding"></a>Begin Coding</h3><h4 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h4><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><p>在这里，我们使用 <a href="https://link.segmentfault.com/?enc=Di/FwQuM2z/4k3Sv0z6aUg==.ajZ69v213SEpzGGycaj2JGU/UEOTNpdc9RopP9MQZdg=">CNode API</a> 进行开发 Demo.</p><h5 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h5><p>请求数据，我们使用 Nuxt 官方提供的 <a href="https://link.segmentfault.com/?enc=b16sKUKlk8RKYn8eU5okEw==.GyeT/0Ge3PyKQBq1AVcsgZnvPKpuWgzktdQevhrJcrSoT85hRHV766C/s4oRo8vZ">@nuxtjs&#x2F;axios</a> 安装后，在 nuxt.config.js 中加上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">modules</span>: [</span><br><span class="line">    <span class="string">&#x27;@nuxtjs/axios&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">axios</span>: &#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://cnodejs.org/api/v1&#x27;</span>,</span><br><span class="line">    <span class="comment">// or other axios configs.</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以在页面中通过 <code>this.$axios.$get</code> 来获取数据，不需要在每个页面都单独引入 axios.</p><h5 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h5><p>需要先安装 sass-loader 和 node-sass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$    yarn add sass-loader node-sass --dev</span><br></pre></td></tr></table></figure><p>如果需要在项目中全局使用某个 scss 文件（如 mixins, vars 等），需要借助 sass-resources-loader : <code>yarn add sass-resources-loader —dev</code>， 还需要在 nuxt.config.js 的 build 配置中调整导出的 loader 配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="title function_">extend</span>(<span class="params">config, &#123; isDev, isClient &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sassResourcesLoader = &#123;  </span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;sass-resources-loader&#x27;</span>,  </span><br><span class="line">        <span class="attr">options</span>: &#123;  </span><br><span class="line">          <span class="attr">resources</span>: [</span><br><span class="line">            <span class="comment">// 填写需要全局注入 scss 的文件。引入后，所有页面均有效。</span></span><br><span class="line">            <span class="string">&#x27;assets/styles/mixins.scss&#x27;</span>  </span><br><span class="line">          ]</span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 修改 scss sass 引用的 loader。</span></span><br><span class="line">      config.<span class="property">module</span>.<span class="property">rules</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">rule</span>) =&gt;</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (rule.<span class="property">test</span>.<span class="title function_">toString</span>() === <span class="string">&#x27;/\\.vue$/&#x27;</span>) &#123;  </span><br><span class="line">          rule.<span class="property">options</span>.<span class="property">loaders</span>.<span class="property">sass</span>.<span class="title function_">push</span>(sassResourcesLoader)  </span><br><span class="line">          rule.<span class="property">options</span>.<span class="property">loaders</span>.<span class="property">scss</span>.<span class="title function_">push</span>(sassResourcesLoader)  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">&#x27;/\\.sass$/&#x27;</span>, <span class="string">&#x27;/\\.scss$/&#x27;</span>].<span class="title function_">indexOf</span>(rule.<span class="property">test</span>.<span class="title function_">toString</span>()) !== -<span class="number">1</span>) &#123;  </span><br><span class="line">          rule.<span class="property">use</span>.<span class="title function_">push</span>(sassResourcesLoader)  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;)  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p>首页一般只需要简单的获取首页数据并渲染即可。</p><p>主要 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">asyncData</span>(<span class="params">&#123;app, query&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(query)</span><br><span class="line">  <span class="comment">// 根据不用的标签获取不同的数据，最后返回话题列表。</span></span><br><span class="line">  <span class="keyword">return</span> app.<span class="property">$axios</span>.$get(<span class="string">`topics?tab=<span class="subst">$&#123;query.tab || <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(res)</span></span><br><span class="line">    <span class="comment">// console.log(JSON.parse(res))</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">list</span>: res.<span class="property">data</span>&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当进入首页时，该函数会被执行， nuxt 会等到获取数据后再和组件的 data 合并，进而渲染数据。在模板中，可以直接使用 list 变量获取数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card fluid topic&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;topic in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;topic.id&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;topic-id&#x27;, params: &#123;id: topic.id&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;topic-title&quot;</span>&gt;</span>&#123;&#123;topic.title&#125;&#125;<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;topic-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mark</span> <span class="attr">v-if</span>=<span class="string">&quot;topic.top&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tertiary&quot;</span>&gt;</span>精华<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mark</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;tabsObj[topic.tab]&#125;&#125;<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;topic.author.avatar_url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;topic.author.loginname&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里提及一下， <code>&lt;nuxt-link /&gt;</code> 和 <code>&lt;a /&gt;</code> 的区别是： <code>nuxt-link</code> 走的是 vue-router 的路由，即网页已为单页面，并且浏览器不会重定向。而 <code>a</code> 标签走的是 <code>window.location.href</code>，每一次点击 <code>a</code> 标签后的页面，都会进行一次服务端渲染，和普通的 PHP 混合开发没有太大的区别。</p><p>在这里使用了 <code>nuxt-link</code> 是因为 CNode 的 API 不存在跨域问题，因此可以作为一个单页面应用，体验更好。</p><p>因为列表页数据类型有多种，该页面可能会被复用，所以当路由对象发生变化时，需要重新获取数据，这时可以监听路由的变化以做出响应：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;$route&#x27;</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;$route has changed.&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 seo 优化（这里只是单纯的复制罢了，demo 使用，侵删）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">head</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span> + (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">tab</span> ? <span class="string">`- <span class="subst">$&#123;<span class="variable language_">this</span>.tabsObj[<span class="variable language_">this</span>.$route.query.tab]&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: [&#123;</span><br><span class="line">      <span class="attr">hid</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;CNode：Node.js专业中文社区&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="话题详情"><a href="#话题详情" class="headerlink" title="话题详情"></a>话题详情</h4><p>同样的，使用 <code>asyncData</code> 函数进行获取数据，再渲染页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">asyncData</span>(<span class="params">&#123;app, params&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">  <span class="keyword">return</span> app.<span class="property">$axios</span>.$get(<span class="string">&#x27;topic/&#x27;</span> + params.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// let data = res.data instanceof String ? JSON.parse(res.data) : res.data</span></span><br><span class="line">    <span class="keyword">let</span> data = res.<span class="property">data</span></span><br><span class="line">    <span class="comment">// console.log(res)</span></span><br><span class="line">    <span class="comment">// let div = document.createElement(&#x27;div&#x27;)</span></span><br><span class="line">    <span class="comment">// div.innerHTML = res.data.data.content</span></span><br><span class="line">    <span class="comment">// res.data.summary = div.innerText.substr(0, 120)</span></span><br><span class="line">    data.<span class="property">summary</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">&quot;&quot;</span>).<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">120</span>).<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">detail</span>: data&#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;axios.get failed.&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，踩过坑。想使用 div 的 innerText 来过滤掉正文中的 HTML 标签，但是，如果用户是直接进入这个页面的时候，执行 <code>asyncData</code> 时，<code>document</code> 对象是不存在的，从而会报错。也就是说，<strong>当 <code>asyncData</code> 在服务端执行时，是没有 <code>document</code> 和 <code>window</code> 对象的</strong>，请大家注意一下。</p><p>作为一个社区，seo 尤为重要，倘若每个页面都需要写一大堆的 head 对象，就会显得尤其的繁琐。所以可以借助 nuxt 的 plugin 机制，将其封装成一个函数，并注入到每一个页面当中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/global.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 必传 标题，描述。其他的 meta 标签通过 payload 注入，其中，每个 meta 的 hid 需要是唯一的。</span></span><br><span class="line">    $seo(title, content, payload = []) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        title,</span><br><span class="line">        <span class="attr">meta</span>: [&#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          content</span><br><span class="line">        &#125;].<span class="title function_">concat</span>(payload)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 nuxt.config.js 中加上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">&#x27;~plugins/global.js&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只需要在页面的 <code>head</code> 的函数中，返回该函数即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">head</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.$seo(<span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">title</span>, <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">summary</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fo5dh2n4k5j314k0nq0vu.jpg" alt="详情页 seo"></p><p>可见，详情页已经成功的设置了部分 seo 的标签。</p><p>以上是 Nuxt 的一些基础配置及应用。</p><p>我再去研究一下， fetch 和 store 的结合，将该 demo 继续完善。</p><p><a href="https://link.segmentfault.com/?enc=331HKnZd3kx5B1qCBrwcXA==./hS2koJfqK9p6Gks+EtJzWApn0CRW6/euao2ucSNO4Mlp2aqxoM5kTRsykytJaym">Demo 线上地址</a><br><a href="https://link.segmentfault.com/?enc=HarIRi3qPBbQoNhoQ7QVUw==.WKJ82vJ2UfufyamtZ8nOA4OyetwRWtPtxu3dG4SdihXLLbdB0Ak0qa2gft6EYq13">GitHub 地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Nuxt </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.5 Evironment</title>
      <link href="/2019/05/16/3.5.1%20%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/05/16/3.5.1%20%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>我们知道，Node.js 不适合 CPU 密集型计算的场景，通常的解决方法是用 C&#x2F;C++ 编写 Node.js 的扩展（Addons）。以前只能用 C&#x2F;C++，现在我们有了新的选择——Rust。</p><h2 id="3-5-1-环境"><a href="#3-5-1-环境" class="headerlink" title="3.5.1 环境"></a>3.5.1 环境</h2><ul><li><a href="mailto:&#x6e;&#x6f;&#100;&#x65;&#x40;&#56;&#x2e;&#x39;&#x2e;&#52;">&#x6e;&#x6f;&#100;&#x65;&#x40;&#56;&#x2e;&#x39;&#x2e;&#52;</a></li><li><a href="mailto:rust@1.26.0-nightly">rust@1.26.0-nightly</a></li></ul><h2 id="3-5-2-Rust"><a href="#3-5-2-Rust" class="headerlink" title="3.5.2 Rust"></a>3.5.2 Rust</h2><p>Rust 是 Mozilla 开发的注重安全、性能和并发的现代编程语言。相比较于其他常见的编程语言，它有 3 个独特的概念：</p><ol><li>所有权</li><li>借用</li><li>生命周期</li></ol><p>正是这 3 个特性保证了 Rust 是内存安全的，这里不会展开讲解，有兴趣的读者可以去了解一下。</p><p>接下来，我们通过三种方式使用 Rust 编写 Node.js 的扩展。</p><h2 id="3-5-3-FFI"><a href="#3-5-3-FFI" class="headerlink" title="3.5.3 FFI"></a>3.5.3 <a href="https://github.com/node-ffi/node-ffi">FFI</a></h2><p>FFI 的全称是 Foreign Function Interface，即可以用 Node.js 调用动态链接库。</p><p>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cargo new ffi-demo &amp;&amp; cd ffi-demo</span><br><span class="line">$ npm init -y</span><br><span class="line">$ npm i ffi --save</span><br><span class="line">$ touch index.js</span><br></pre></td></tr></table></figure><p>部分文件修改如下：</p><p><strong>src&#x2F;lib.rs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#[no_mangle]</span><br><span class="line">pub extern fn fib(n: i64) -&gt; i64 &#123;</span><br><span class="line">  return match n &#123;</span><br><span class="line">    1 | 2 =&gt; 1,</span><br><span class="line">    n =&gt; fib(n - 1) + fib(n - 2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Cargo.toml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;ffi-demo&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line"></span><br><span class="line">[lib]</span><br><span class="line">name = &quot;ffi&quot;</span><br><span class="line">crate-type = [&quot;dylib&quot;]</span><br></pre></td></tr></table></figure><p>Cargo.toml 是 Rust 项目的配置文件，相当于 Node.js 中的 package.json。这里指定编译生成的类型是 dylib（动态链接库），名字在 *inux 下是 libffi，Windows 下是 ffi。</p><p>使用 cargo 编译代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cargo build #开发环境用</span><br><span class="line">或者</span><br><span class="line">$ cargo build --release #生产环境用，编译器做了更多优化，但编译慢</span><br></pre></td></tr></table></figure><p>cargo 是 Rust 的构建工具和包管理工具，负责构建代码、下载依赖库并编译它们。此时会生成一个 target 的目录，该目录下会有 debug（不加 –release）或者 release（加 –release）目录，存放了生成的动态链接库。</p><p><strong>index.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const ffi = require(&#x27;ffi&#x27;)</span><br><span class="line">const isWin = /^win/.test(process.platform)</span><br><span class="line"></span><br><span class="line">const rust = ffi.Library(&#x27;target/debug/&#x27; + (!isWin ? &#x27;lib&#x27; : &#x27;&#x27;) + &#x27;ffi&#x27;, &#123;</span><br><span class="line">  fib: [&#x27;int&#x27;, [&#x27;int&#x27;]]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function fib(n) &#123;</span><br><span class="line">  if (n === 1 || n === 2) &#123;</span><br><span class="line">    return 1</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">console.time(&#x27;node&#x27;)</span><br><span class="line">console.log(fib(40))</span><br><span class="line">console.timeEnd(&#x27;node&#x27;)</span><br><span class="line"></span><br><span class="line">// rust</span><br><span class="line">console.time(&#x27;rust&#x27;)</span><br><span class="line">console.log(rust.fib(40))</span><br><span class="line">console.timeEnd(&#x27;rust&#x27;)</span><br></pre></td></tr></table></figure><p>运行 index.js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">102334155</span><br><span class="line">node: 1053.743ms</span><br><span class="line">102334155</span><br><span class="line">rust: 1092.570ms</span><br></pre></td></tr></table></figure><p>将 index.js 中 debug 改为 release，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cargo build --release</span><br><span class="line">$ node index.js</span><br><span class="line">102334155</span><br><span class="line">node: 1050.467ms</span><br><span class="line">102334155</span><br><span class="line">rust: 273.508ms</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：添加了 –release 编译后的代码，执行效率提升十分明显。</p><h2 id="3-5-4-Neon"><a href="#3-5-4-Neon" class="headerlink" title="3.5.4 Neon"></a>3.5.4 <a href="https://github.com/neon-bindings/neon">Neon</a></h2><p>官方介绍：</p><blockquote><p>Rust bindings for writing safe and fast native Node.js modules.</p></blockquote><p>使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ npm i neon-cli -g</span><br><span class="line">$ neon new neon-demo</span><br><span class="line">$ cd neon-demo</span><br><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── lib</span><br><span class="line">│   └── index.js</span><br><span class="line">├── native</span><br><span class="line">│   ├── Cargo.toml</span><br><span class="line">│   ├── build.rs</span><br><span class="line">│   └── src</span><br><span class="line">│       └── lib.rs</span><br><span class="line">└── package.json</span><br><span class="line"></span><br><span class="line">3 directories, 6 files</span><br><span class="line">$ npm i #触发 neon build</span><br><span class="line">$ node lib/index.js</span><br><span class="line">hello node</span><br></pre></td></tr></table></figure><p>接下来我们看看关键的代码文件。</p><p><strong>lib&#x2F;index.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var addon = require(&#x27;../native&#x27;);</span><br><span class="line">console.log(addon.hello());</span><br></pre></td></tr></table></figure><p><strong>native&#x2F;src&#x2F;lib.rs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#[macro_use]</span><br><span class="line">extern crate neon;</span><br><span class="line"></span><br><span class="line">use neon::vm::&#123;Call, JsResult&#125;;</span><br><span class="line">use neon::js::JsString;</span><br><span class="line"></span><br><span class="line">fn hello(call: Call) -&gt; JsResult&lt;JsString&gt; &#123;</span><br><span class="line">    let scope = call.scope;</span><br><span class="line">    Ok(JsString::new(scope, &quot;hello node&quot;).unwrap())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">register_module!(m, &#123;</span><br><span class="line">    m.export(&quot;hello&quot;, hello)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>native&#x2F;build.rs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">extern crate neon_build;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    neon_build::setup(); // must be called in build.rs</span><br><span class="line"></span><br><span class="line">    // add project-specific build logic here...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>native&#x2F;Cargo.toml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;neon-demo&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">authors = [&quot;nswbmw&quot;]</span><br><span class="line">license = &quot;MIT&quot;</span><br><span class="line">build = &quot;build.rs&quot;</span><br><span class="line"></span><br><span class="line">[lib]</span><br><span class="line">name = &quot;neon_demo&quot;</span><br><span class="line">crate-type = [&quot;dylib&quot;]</span><br><span class="line"></span><br><span class="line">[build-dependencies]</span><br><span class="line">neon-build = &quot;0.1.22&quot;</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">neon = &quot;0.1.22&quot;</span><br></pre></td></tr></table></figure><p>在运行 <code>neon build</code> 时，会根据 native&#x2F;Cargo.toml 中 build 字段指定的文件（这里是 build.rs）编译，并且生成的类型是 dylib（动态链接库）。native&#x2F;src&#x2F;lib.rs 存放了扩展的代码逻辑，通过 register_module 注册了一个 hello 方法，返回 hello node 字符串。</p><p>接下来测试原生 Node.js 和 Neon 编写的扩展运行斐波那契数列的执行效率。</p><p>修改对应文件如下：</p><p><strong>native&#x2F;src&#x2F;lib.rs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#[macro_use]</span><br><span class="line">extern crate neon;</span><br><span class="line"></span><br><span class="line">use neon::vm::&#123;Call, JsResult&#125;;</span><br><span class="line">use neon::mem::Handle;</span><br><span class="line">use neon::js::JsInteger;</span><br><span class="line"></span><br><span class="line">fn fib(call: Call) -&gt; JsResult&lt;JsInteger&gt; &#123;</span><br><span class="line">  let scope = call.scope;</span><br><span class="line">  let index: Handle&lt;JsInteger&gt; = try!(try!(call.arguments.require(scope, 0)).check::&lt;JsInteger&gt;());</span><br><span class="line">  let index: i32 = index.value() as i32;</span><br><span class="line">  let result: i32 = fibonacci(index);</span><br><span class="line">  Ok(JsInteger::new(scope, result))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn fibonacci(n: i32) -&gt; i32 &#123;</span><br><span class="line">  match n &#123;</span><br><span class="line">    1 | 2 =&gt; 1,</span><br><span class="line">    _ =&gt; fibonacci(n - 1) + fibonacci(n - 2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">register_module!(m, &#123;</span><br><span class="line">  m.export(&quot;fib&quot;, fib)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>lib&#x2F;index.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const rust = require(&#x27;../native&#x27;)</span><br><span class="line"></span><br><span class="line">function fib (n) &#123;</span><br><span class="line">  if (n === 1 || n === 2) &#123;</span><br><span class="line">    return 1</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">console.time(&#x27;node&#x27;)</span><br><span class="line">console.log(fib(40))</span><br><span class="line">console.timeEnd(&#x27;node&#x27;)</span><br><span class="line"></span><br><span class="line">// rust</span><br><span class="line">console.time(&#x27;rust&#x27;)</span><br><span class="line">console.log(rust.fib(40))</span><br><span class="line">console.timeEnd(&#x27;rust&#x27;)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ neon build</span><br><span class="line">$ node lib/index.js</span><br><span class="line">102334155</span><br><span class="line">node: 1030.681ms</span><br><span class="line">102334155</span><br><span class="line">rust: 270.417ms</span><br></pre></td></tr></table></figure><p>接下来看一个复杂点的例子，用 Neon 编写一个 User 类，可传入一个含有 first_name 和 last_name 的对象，暴露出一个 get_full_name 方法。</p><p>修改对应文件如下：</p><p><strong>native&#x2F;src&#x2F;lib.rs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#[macro_use]</span><br><span class="line">extern crate neon;</span><br><span class="line"></span><br><span class="line">use neon::js::&#123;JsFunction, JsString, Object, JsObject&#125;;</span><br><span class="line">use neon::js::class::&#123;Class, JsClass&#125;;</span><br><span class="line">use neon::mem::Handle;</span><br><span class="line">use neon::vm::Lock;</span><br><span class="line"></span><br><span class="line">pub struct User &#123;</span><br><span class="line">  first_name: String,</span><br><span class="line">  last_name: String,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare_types! &#123;</span><br><span class="line">  pub class JsUser for User &#123;</span><br><span class="line">    init(call) &#123;</span><br><span class="line">      let scope = call.scope;</span><br><span class="line">      let user = try!(try!(call.arguments.require(scope, 0)).check::&lt;JsObject&gt;());</span><br><span class="line">      let first_name: Handle&lt;JsString&gt; = try!(try!(user.get(scope, &quot;first_name&quot;)).check::&lt;JsString&gt;());</span><br><span class="line">      let last_name: Handle&lt;JsString&gt; = try!(try!(user.get(scope, &quot;last_name&quot;)).check::&lt;JsString&gt;());</span><br><span class="line"></span><br><span class="line">      Ok(User &#123;</span><br><span class="line">        first_name: first_name.value(),</span><br><span class="line">        last_name: last_name.value(),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    method get_full_name(call) &#123;</span><br><span class="line">      let scope = call.scope;</span><br><span class="line">      let first_name = call.arguments.this(scope).grab(|user| &#123; user.first_name.clone() &#125;);</span><br><span class="line">      let last_name = call.arguments.this(scope).grab(|user| &#123; user.last_name.clone() &#125;);</span><br><span class="line">      Ok(try!(JsString::new_or_throw(scope, &amp;(first_name + &amp;last_name))).upcast())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">register_module!(m, &#123;</span><br><span class="line">  let class: Handle&lt;JsClass&lt;JsUser&gt;&gt; = try!(JsUser::class(m.scope));</span><br><span class="line">  let constructor: Handle&lt;JsFunction&lt;JsUser&gt;&gt; = try!(class.constructor(m.scope));</span><br><span class="line">  try!(m.exports.set(&quot;User&quot;, constructor));</span><br><span class="line">  Ok(())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>lib&#x2F;index.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const rust = require(&#x27;../native&#x27;)</span><br><span class="line">const User = rust.User</span><br><span class="line"></span><br><span class="line">const user = new User(&#123;</span><br><span class="line">  first_name: &#x27;zhang&#x27;,</span><br><span class="line">  last_name: &#x27;san&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(user.get_full_name())</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ neon build</span><br><span class="line">$ node lib/index.js</span><br><span class="line">zhangsan</span><br></pre></td></tr></table></figure><h2 id="3-5-5-NAPI"><a href="#3-5-5-NAPI" class="headerlink" title="3.5.5 NAPI"></a>3.5.5 <a href="https://nodejs.org/api/n-api.html">NAPI</a></h2><p>不少 Node.js 开发者可能都遇到过升级 Node.js 版本导致程序运行不起来的情况，需要重新安装依赖解决，比如：node-sass 模块。因为之前编写 Node.js 扩展严重依赖于 V8 暴露的 API，而不同版本的 Node.js 依赖的 V8 版本可能不同，一旦升级 Node.js 版本，原先运行正常的 Node.js 的扩展就可能失效了。</p><p>NAPI 是 node@8 新添加的用于原生模块开发的接口，相较于以前的开发方式，NAPI 提供了稳定的 ABI 接口，消除了 Node.js 版本差异、引擎差异等编译后不兼容的问题，解决了编写 Node.js 插件最头疼的问题。</p><p>目前 NAPI 还处于试验阶段，所以相关资料并不多，笔者写了一个 demo 放到了 GitHub 上，这里直接 clone 下来运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/nswbmw/rust-napi-demo</span><br></pre></td></tr></table></figure><p>主要文件代码如下：</p><p><strong>src&#x2F;lib.rs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#[macro_use]</span><br><span class="line">extern crate napi;</span><br><span class="line">#[macro_use]</span><br><span class="line">extern crate napi_derive;</span><br><span class="line"></span><br><span class="line">use napi::&#123;NapiEnv, NapiNumber, NapiResult&#125;;</span><br><span class="line"></span><br><span class="line">#[derive(NapiArgs)]</span><br><span class="line">struct Args&lt;&#x27;a&gt; &#123;</span><br><span class="line">  n: NapiNumber&lt;&#x27;a&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn fibonacci&lt;&#x27;a&gt;(env: &amp;&#x27;a NapiEnv, args: &amp;Args&lt;&#x27;a&gt;) -&gt; NapiResult&lt;NapiNumber&lt;&#x27;a&gt;&gt; &#123;</span><br><span class="line">  let number = args.n.to_i32()?;</span><br><span class="line">  NapiNumber::from_i32(env, _fibonacci(number))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">napi_callback!(export_fibonacci, fibonacci);</span><br><span class="line"></span><br><span class="line">fn _fibonacci(n: i32) -&gt; i32 &#123;</span><br><span class="line">  match n &#123;</span><br><span class="line">    1 | 2 =&gt; 1,</span><br><span class="line">    _ =&gt; _fibonacci(n - 1) + _fibonacci(n - 2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const rust = require(&#x27;./build/Release/example.node&#x27;)</span><br><span class="line"></span><br><span class="line">function fib (n) &#123;</span><br><span class="line">  if (n === 1 || n === 2) &#123;</span><br><span class="line">    return 1</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">console.time(&#x27;node&#x27;)</span><br><span class="line">console.log(fib(40))</span><br><span class="line">console.timeEnd(&#x27;node&#x27;)</span><br><span class="line"></span><br><span class="line">// rust</span><br><span class="line">console.time(&#x27;rust&#x27;)</span><br><span class="line">console.log(rust.fibonacci(40))</span><br><span class="line">console.timeEnd(&#x27;rust&#x27;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line">102334155</span><br><span class="line">node: 1087.650ms</span><br><span class="line">102334155</span><br><span class="line">rust: 268.395ms</span><br><span class="line">(node:33302) Warning: N-API is an experimental feature and could change at any time.</span><br></pre></td></tr></table></figure><h2 id="3-5-6-参考链接"><a href="#3-5-6-参考链接" class="headerlink" title="3.5.6 参考链接"></a>3.5.6 参考链接</h2><ul><li><a href="https://github.com/neon-bindings/neon">https://github.com/neon-bindings/neon</a></li><li><a href="https://github.com/napi-rs/napi">https://github.com/napi-rs/napi</a></li><li><a href="https://zhuanlan.zhihu.com/p/27650526">https://zhuanlan.zhihu.com/p/27650526</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.4 Ignition + Turbofan</title>
      <link href="/2019/05/10/3.4.1%20Ignition%20+%20Turbofan/"/>
      <url>/2019/05/10/3.4.1%20Ignition%20+%20Turbofan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>如果你想以最简单的方式提升 Node.js 程序的性能，那就升级到 node@8+ 吧。这不是一个玩笑，多少 JavaScript 前辈们以血的教训总结出了一长列 “Optimization killers”，典型的有：</p><ol><li>在 try 里面不要写过多代码，V8 无法优化，最好将这些代码放到一个函数里，然后 try 这个函数。</li><li>少用 delete。</li><li>少用 arguments。</li><li>…</li></ol><p>然而，随着 V8 彻底换上了新的 JIT 编译器—— Turbofan，大多数 “Optimization killers” 都已经成了过去时。所以在本节中我们来看看哪些过去常见的 “Optimization killers” 已经可以被 V8 优化。</p><h2 id="3-4-1-Ignition-Turbofan"><a href="#3-4-1-Ignition-Turbofan" class="headerlink" title="3.4.1 Ignition + Turbofan"></a>3.4.1 Ignition + Turbofan</h2><p>之前 V8 使用的是名为 Crankshaft 的编译器，这个编译器后来逐渐暴露出一些缺点：</p><ol><li>Doesn’t scale to full, modern JavaScript (try-catch, for-of, generators, async&#x2F;await, …)</li><li>Defaults to deoptimization (performance cliffs, deoptimization loops)</li><li>Graph construction, inlining and optimization all mixed up</li><li>Tight coupling to fullcodegen &#x2F; brittle environment tracking</li><li>Limited optimization potential &#x2F; limited static analysis (i.e. type propagation)</li><li>High porting overhead</li><li>Mixed low-level and high-level semantics of instructions</li></ol><p>而引入 Turbofan 的好处是：</p><ol><li>Full ESnext language support (try-catch&#x2F;-finally, class literals, eval, generators, async functions, modules, destructuring, etc.)</li><li>Utilize and propagate (static) type information</li><li>Separate graph building from optimization &#x2F; inlining</li><li>No deoptimization loops &#x2F; deoptimization only when really beneficial</li><li>Sane environment tracking (also for lazy deoptimization)</li><li>Predictable peak performance</li></ol><p>Ignition 是 V8 新引入的解释器，用来将代码编译成简洁的字节码，而不是之前的机器码，这大大减少了结果代码，减少了系统的内存使用。由于字节码较小，所以可以编译全部源代码，而不用避免编译未使用的代码。也就是说，脚本只需要解析一次，而不是像之前的编译过程那样解析多次。</p><p>Ignition 与 TurboFan 的关系为：Ignition 解释器使用低级的、体系结构无关的 TurboFan 宏汇编指令为每个操作码生成字节码处理程序，TurboFan 将这些指令编译成目标平台的代码，并在这个过程中执行低级的指令选择和机器寄存器分配。</p><p>补充一点，之前的 V8 将代码编译成机器码执行，而新的 V8 将代码编译成字节码解释执行，动机是什么呢？可能是：</p><ol><li>减少机器码占用的内存空间，即牺牲时间换空间（主要动机）。</li><li>加快代码的启动速度。</li><li>对 V8 的代码进行重构，降低 V8 的代码复杂度。</li></ol><h2 id="3-4-2-版本对应关系"><a href="#3-4-2-版本对应关系" class="headerlink" title="3.4.2 版本对应关系"></a>3.4.2 版本对应关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node@6       -&gt; V8@5.1 -&gt; Crankshaft</span><br><span class="line">node@8.0-8.2 -&gt; V8@5.8 -&gt; Crankshaft + Turbofan</span><br><span class="line">                V8@5.9 -&gt; Turbofan</span><br><span class="line">node@8.3-8.4 -&gt; V8@6.0 -&gt; Turbofan</span><br></pre></td></tr></table></figure><h2 id="3-4-3-try-x2F-catch"><a href="#3-4-3-try-x2F-catch" class="headerlink" title="3.4.3 try&#x2F;catch"></a>3.4.3 try&#x2F;catch</h2><p>最著名的去优化之一是使用 try&#x2F;catch 代码块。下面通过 4 种场景比较在不同的 V8 版本下执行的效率：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">var benchmark = require(&#x27;benchmark&#x27;)</span><br><span class="line">var suite = new benchmark.Suite()</span><br><span class="line"></span><br><span class="line">function sum (base, max) &#123;</span><br><span class="line">  var total = 0</span><br><span class="line"></span><br><span class="line">  for (var i = base; i &lt; max; i++) &#123;</span><br><span class="line">    total += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;sum with try catch&#x27;, function sumTryCatch () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    var base = 0</span><br><span class="line">    var max = 65535</span><br><span class="line"></span><br><span class="line">    var total = 0</span><br><span class="line"></span><br><span class="line">    for (var i = base; i &lt; max; i++) &#123;</span><br><span class="line">      total += i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(err.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;sum without try catch&#x27;, function noTryCatch () &#123;</span><br><span class="line">  var base = 0</span><br><span class="line">  var max = 65535</span><br><span class="line"></span><br><span class="line">  var total = 0</span><br><span class="line"></span><br><span class="line">  for (var i = base; i &lt; max; i++) &#123;</span><br><span class="line">    total += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;sum wrapped&#x27;, function wrapped () &#123;</span><br><span class="line">  var base = 0</span><br><span class="line">  var max = 65535</span><br><span class="line"></span><br><span class="line">  try &#123;</span><br><span class="line">    sum(base, max)</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(err.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;sum function&#x27;, function func () &#123;</span><br><span class="line">  var base = 0</span><br><span class="line">  var max = 65535</span><br><span class="line"></span><br><span class="line">  sum(base, max)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.on(&#x27;complete&#x27;, require(&#x27;./print&#x27;))</span><br><span class="line">suite.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.4.1.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.4.1.jpg" alt="img"></a></p><p><strong>结论</strong>：在 <a href="mailto:&#x6e;&#x6f;&#x64;&#101;&#x40;&#56;&#x2e;&#51;">&#x6e;&#x6f;&#x64;&#101;&#x40;&#56;&#x2e;&#51;</a> 及以上版本中，在 try 块内写代码的性能损耗可以忽略不计。</p><h2 id="3-4-4-delete"><a href="#3-4-4-delete" class="headerlink" title="3.4.4 delete"></a>3.4.4 delete</h2><p>多年以来，delete 对于任何希望编写高性能 JavaScript 的人来说都是受限制的，我们通常用赋值 undefined 替代。delete 的问题归结为 V8 处理 JavaScript 对象的动态特性和原型链方式，使得属性查找在实现上变得复杂。下面通过 3 种场景比较在不同的 V8 版本下执行的效率：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">var benchmark = require(&#x27;benchmark&#x27;)</span><br><span class="line">var suite = new benchmark.Suite()</span><br><span class="line"></span><br><span class="line">function MyClass (x, y) &#123;</span><br><span class="line">  this.x = x</span><br><span class="line">  this.y = y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function MyClassLast (x, y) &#123;</span><br><span class="line">  this.y = y</span><br><span class="line">  this.x = x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;setting to undefined&#x27;, function undefProp () &#123;</span><br><span class="line">  var obj = new MyClass(2, 3)</span><br><span class="line">  obj.x = undefined</span><br><span class="line"></span><br><span class="line">  JSON.stringify(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;delete&#x27;, function deleteProp () &#123;</span><br><span class="line">  var obj = new MyClass(2, 3)</span><br><span class="line">  delete obj.x</span><br><span class="line"></span><br><span class="line">  JSON.stringify(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;delete last property&#x27;, function deleteProp () &#123;</span><br><span class="line">  var obj = new MyClassLast(2, 3)</span><br><span class="line">  delete obj.x</span><br><span class="line"></span><br><span class="line">  JSON.stringify(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;setting to undefined literal&#x27;, function undefPropLit () &#123;</span><br><span class="line">  var obj = &#123; x: 2, y: 3 &#125;</span><br><span class="line">  obj.x = undefined</span><br><span class="line"></span><br><span class="line">  JSON.stringify(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;delete property literal&#x27;, function deletePropLit () &#123;</span><br><span class="line">  var obj = &#123; x: 2, y: 3 &#125;</span><br><span class="line">  delete obj.x</span><br><span class="line"></span><br><span class="line">  JSON.stringify(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;delete last property literal&#x27;, function deletePropLit () &#123;</span><br><span class="line">  var obj = &#123; y: 3, x: 2 &#125;</span><br><span class="line">  delete obj.x</span><br><span class="line"></span><br><span class="line">  JSON.stringify(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.on(&#x27;complete&#x27;, require(&#x27;./print&#x27;))</span><br><span class="line">suite.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.4.2.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.4.2.jpg" alt="img"></a></p><p><strong>结论</strong>：在 node@8 及以上版本中，delete 一个对象上的属性比 node@6 快了一倍。在 <a href="mailto:&#x6e;&#x6f;&#x64;&#101;&#x40;&#x38;&#x2e;&#x33;">&#x6e;&#x6f;&#x64;&#101;&#x40;&#x38;&#x2e;&#x33;</a> 及以上版本中，delete 一个对象上最后一个属性几乎与赋值 undefined 同样快了。</p><h2 id="3-4-5-arguments"><a href="#3-4-5-arguments" class="headerlink" title="3.4.5 arguments"></a>3.4.5 arguments</h2><p>我们知道 arguments 是个类数组，所以通常我们要使用 <code>Array.prototype.slice.call(arguments)</code> 将它转化成数组再使用，这样会有一定的性能损耗。下面通过 4 种场景比较在不同的 V8 版本下执行的效率：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var benchmark = require(&#x27;benchmark&#x27;)</span><br><span class="line">var suite = new benchmark.Suite()</span><br><span class="line"></span><br><span class="line">function leakyArguments () &#123;</span><br><span class="line">  return other(arguments)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function copyArgs () &#123;</span><br><span class="line">  var array = new Array(arguments.length)</span><br><span class="line"></span><br><span class="line">  for (var i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">    array[i] = arguments[i]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return other(array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sliceArguments () &#123;</span><br><span class="line">  var array = Array.prototype.slice.apply(arguments)</span><br><span class="line">  return other(array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function spreadOp(...args) &#123;</span><br><span class="line">  return other(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function other (toSum) &#123;</span><br><span class="line">  var total = 0</span><br><span class="line">  for (var i = 0; i &lt; toSum.length; i++) &#123;</span><br><span class="line">    total += toSum[i]</span><br><span class="line">  &#125;</span><br><span class="line">  return total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;leaky arguments&#x27;, () =&gt; &#123;</span><br><span class="line">  leakyArguments(1, 2, 3)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;Array.prototype.slice arguments&#x27;, () =&gt; &#123;</span><br><span class="line">  sliceArguments(1, 2, 3)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;for-loop copy arguments&#x27;, () =&gt; &#123;</span><br><span class="line">  copyArgs(1, 2, 3)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;spread operator&#x27;, () =&gt; &#123;</span><br><span class="line">  spreadOp(1, 2, 3)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.on(&#x27;complete&#x27;, require(&#x27;./print&#x27;))</span><br><span class="line">suite.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.4.3.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.4.3.jpg" alt="img"></a></p><p><strong>结论</strong>：在 <a href="mailto:&#x6e;&#111;&#x64;&#101;&#64;&#x38;&#x2e;&#x33;">&#x6e;&#111;&#x64;&#101;&#64;&#x38;&#x2e;&#x33;</a> 及以上版本中，使用对象展开运算符是除直接使用 arguments 外最快的方案，对于 <a href="mailto:&#110;&#111;&#100;&#x65;&#x40;&#x38;&#46;&#x32;">&#110;&#111;&#100;&#x65;&#x40;&#x38;&#46;&#x32;</a> 及以下的版本，我们应该使用一个 for 循环将 key 从 arguments 复制到一个新的（预先分配的）数组中。总之，是时候抛弃 Array.prototype.slice.call 了。</p><h2 id="3-4-6-async-性能提升"><a href="#3-4-6-async-性能提升" class="headerlink" title="3.4.6 async 性能提升"></a>3.4.6 async 性能提升</h2><p>在 <a href="mailto:&#x56;&#x38;&#x40;&#x35;&#46;&#55;">&#x56;&#x38;&#x40;&#x35;&#46;&#55;</a> 发布后，原生的 async 函数与 Promise 一样快了，同时，Promise 的性能也比 <a href="mailto:&#86;&#x38;&#x40;&#53;&#x2e;&#54;">&#86;&#x38;&#x40;&#53;&#x2e;&#54;</a> 快了一倍。如图所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.4.4.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.4.4.jpg" alt="img"></a></p><h2 id="3-4-7-不会优化的特性"><a href="#3-4-7-不会优化的特性" class="headerlink" title="3.4.7 不会优化的特性"></a>3.4.7 不会优化的特性</h2><p>并不是说上了 Turbofan 就能优化所有的 JavaScript 语法，有些语法 V8 是不会去优化的（也没有必要），例如：</p><ol><li>debugger</li><li>eval</li><li>with</li></ol><p>我们以 debugger 为例，比较使用和不使用 debugger 时的性能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var benchmark = require(&#x27;benchmark&#x27;)</span><br><span class="line">var suite = new benchmark.Suite()</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;with debugger&#x27;, function withDebugger () &#123;</span><br><span class="line">  var base = 0</span><br><span class="line">  var max = 65535</span><br><span class="line"></span><br><span class="line">  var total = 0</span><br><span class="line"></span><br><span class="line">  for (var i = base; i &lt; max; i++) &#123;</span><br><span class="line">    debugger</span><br><span class="line">    total += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.add(&#x27;without debugger&#x27;, function withoutDebugger () &#123;</span><br><span class="line">  var base = 0</span><br><span class="line">  var max = 65535</span><br><span class="line"></span><br><span class="line">  var total = 0</span><br><span class="line"></span><br><span class="line">  for (var i = base; i &lt; max; i++) &#123;</span><br><span class="line">    total += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">suite.on(&#x27;complete&#x27;, require(&#x27;./print&#x27;))</span><br><span class="line">suite.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.4.5.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.4.5.jpg" alt="img"></a></p><p><strong>结论</strong>：在所有测试的 V8 版本中，debugger 一直都很慢，所以记得在打断点测试完后一定要删掉 debugger。</p><h2 id="3-4-8-总结"><a href="#3-4-8-总结" class="headerlink" title="3.4.8 总结"></a>3.4.8 总结</h2><ol><li>使用最新 LTS 版本的 Node.js。</li><li>关注 V8 团队的博客——<a href="https://v8project.blogspot.com/">https://v8project.blogspot.com</a>，了解第一手资讯。</li><li>清晰的代码远比使用一些奇技淫巧提升的一点性能重要得多。</li></ol><h2 id="3-4-9-参考链接"><a href="#3-4-9-参考链接" class="headerlink" title="3.4.9 参考链接"></a>3.4.9 参考链接</h2><ul><li><a href="https://github.com/davidmarkclements/v8-perf">https://github.com/davidmarkclements/v8-perf</a></li><li><a href="http://www.infoq.com/cn/news/2016/08/v8-ignition-javascript-inteprete">http://www.infoq.com/cn/news/2016/08/v8-ignition-javascript-inteprete</a></li><li><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.g18ceb14729_0_59">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.g18ceb14729_0_59</a></li><li><a href="https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan">https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan</a></li><li><a href="https://zhuanlan.zhihu.com/p/26669846">https://zhuanlan.zhihu.com/p/26669846</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.3 Stack Trace</title>
      <link href="/2019/05/02/3.3.1%20Stack%20Trace/"/>
      <url>/2019/05/02/3.3.1%20Stack%20Trace/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>对于 JavaScript 中的 Error，想必大家已经很熟悉了，毕竟天天与它打交道。</p><p>Node.js 内置的 Error 类型有：</p><ol><li><a href="https://nodejs.org/api/errors.html%23errors_class_error">Error</a>：通用的错误类型，例如：<code>new Error(&#39;error!!!&#39;)</code>。</li><li><a href="https://nodejs.org/api/errors.html%23errors_class_syntaxerror">SyntaxError</a>：语法错误，例如：<code>require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;)</code>。</li><li><a href="https://nodejs.org/api/errors.html%23errors_class_referenceerror">ReferenceError</a>：引用错误，如引用一个未定义的变量，例如：<code>doesNotExist</code>。</li><li><a href="https://nodejs.org/api/errors.html%23errors_class_typeerror">TypeError</a>：类型错误，例如：<code>require(&#39;url&#39;).parse(() =&gt; &#123;&#125;)</code>。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError">URIError</a>：全局的 URI 处理函数抛出的错误，例如：<code>encodeURI(&#39;\uD800&#39;)</code>。</li><li><a href="https://nodejs.org/api/errors.html%23errors_class_assertionerror">AssertError</a>：使用 assert 模块时抛出的错误，例如：<code>assert(false)</code>。</li></ol><p>每个 Error 对象通常有 name、message、stack、constructor 等属性。当程序抛出异常时，我们需要根据错误栈（error.stack）定位到出错代码。希望本节能够帮助读者理解并玩转错误栈，写出错误栈清晰的代码，方便调试。</p><h2 id="3-3-1-Stack-Trace"><a href="#3-3-1-Stack-Trace" class="headerlink" title="3.3.1 Stack Trace"></a>3.3.1 Stack Trace</h2><p>错误栈本质上就是调用栈（或者叫：堆栈追踪）。所以我们先复习一下 JavaScript 中调用栈的概念。</p><p><strong>调用栈</strong>：每当有一个函数调用，就会将其压入栈顶，在调用结束的时候再将其从栈顶移出。</p><p>来看一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function c () &#123;</span><br><span class="line">  console.log(&#x27;c&#x27;)</span><br><span class="line">  console.trace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b () &#123;</span><br><span class="line">  console.log(&#x27;b&#x27;)</span><br><span class="line">  c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a () &#123;</span><br><span class="line">  console.log(&#x27;a&#x27;)</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>执行后打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">Trace</span><br><span class="line">    at c (/Users/nswbmw/Desktop/test/app.js:3:11)</span><br><span class="line">    at b (/Users/nswbmw/Desktop/test/app.js:8:3)</span><br><span class="line">    at a (/Users/nswbmw/Desktop/test/app.js:13:3)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:16:1)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：c 函数中 console.trace() 打印出的堆栈追踪依次为 c、b、a，即 a 调用了 b，b 调用了 c。</p><p>稍微修改下上面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function c () &#123;</span><br><span class="line">  console.log(&#x27;c&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b () &#123;</span><br><span class="line">  console.log(&#x27;b&#x27;)</span><br><span class="line">  c()</span><br><span class="line">  console.trace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a () &#123;</span><br><span class="line">  console.log(&#x27;a&#x27;)</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>执行后打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">Trace</span><br><span class="line">    at b (/Users/nswbmw/Desktop/test/app.js:8:11)</span><br><span class="line">    at a (/Users/nswbmw/Desktop/test/app.js:13:3)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:16:1)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：c() 在 console.trace() 之前执行完毕，从栈中移除，所以栈中从上往下为 b、a。</p><p>上面示例的代码过于简单，在实际情况下错误栈并没有这么直观。以常用的 <a href="https://www.npmjs.com/package/mongoose">mongoose</a> 为例，mongoose 的错误栈并不友好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&#x27;mongoose&#x27;)</span><br><span class="line">const Schema = mongoose.Schema</span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost/test&#x27;)</span><br><span class="line"></span><br><span class="line">const UserSchema = new Schema(&#123;</span><br><span class="line">  id: mongoose.Schema.Types.ObjectId</span><br><span class="line">&#125;)</span><br><span class="line">const User = mongoose.model(&#x27;User&#x27;, UserSchema)</span><br><span class="line">User</span><br><span class="line">  .create(&#123; id: &#x27;xxx&#x27; &#125;)</span><br><span class="line">  .then(console.log)</span><br><span class="line">  .catch(console.error)</span><br></pre></td></tr></table></figure><p>运行后打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123; ValidationError: User validation failed: id: Cast to ObjectID failed for value &quot;xxx&quot; at path &quot;id&quot;</span><br><span class="line">    at ValidationError.inspect (/Users/nswbmw/Desktop/test/node_modules/mongoose/lib/error/validation.js:56:24)</span><br><span class="line">    at ...</span><br><span class="line">  errors:</span><br><span class="line">   &#123; id:</span><br><span class="line">      &#123; CastError: Cast to ObjectID failed for value &quot;xxx&quot; at path &quot;id&quot;</span><br><span class="line">    at new CastError (/Users/nswbmw/Desktop/test/node_modules/mongoose/lib/error/cast.js:27:11)</span><br><span class="line">    at model.$set (/Users/nswbmw/Desktop/test/node_modules/mongoose/lib/document.js:792:7)</span><br><span class="line">    at ...</span><br><span class="line">        message: &#x27;Cast to ObjectID failed for value &quot;xxx&quot; at path &quot;id&quot;&#x27;,</span><br><span class="line">        name: &#x27;CastError&#x27;,</span><br><span class="line">        stringValue: &#x27;&quot;xxx&quot;&#x27;,</span><br><span class="line">        kind: &#x27;ObjectID&#x27;,</span><br><span class="line">        value: &#x27;xxx&#x27;,</span><br><span class="line">        path: &#x27;id&#x27;,</span><br><span class="line">        reason: [Object] &#125; &#125;,</span><br><span class="line">  _message: &#x27;User validation failed&#x27;,</span><br><span class="line">  name: &#x27;ValidationError&#x27; &#125;</span><br></pre></td></tr></table></figure><p>从 mongoose 给出的 error.stack 中看不到任何有用的信息，error.message 告诉我们 “xxx” 不匹配 User 这个 Model 的 id（ObjectID）的类型，其他的字段基本上也是这个结论的补充，却没有给出我们最关心的问题：<strong>我写的代码中，到底哪一行出了问题？</strong></p><p>如何解决这个问题呢？我们先看看 Error.captureStackTrace 的用法。</p><h2 id="3-3-2-Error-captureStackTrace"><a href="#3-3-2-Error-captureStackTrace" class="headerlink" title="3.3.2 Error.captureStackTrace"></a>3.3.2 Error.captureStackTrace</h2><p>Error.captureStackTrace 是 V8 提供的一个 API，可以传入两个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error.captureStackTrace(targetObject[, constructorOpt])</span><br></pre></td></tr></table></figure><p>Error.captureStackTrace 会在 targetObject 中添加一个 stack 属性，对该属性进行访问时，将以字符串的形式返回 Error.captureStackTrace() 语句被调用时的代码位置信息（即：调用栈历史）。</p><p>举个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myObject = &#123;&#125;</span><br><span class="line">Error.captureStackTrace(myObject)</span><br><span class="line">console.log(myObject.stack)</span><br><span class="line">// 输出</span><br><span class="line">Error</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:2:7)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p>除了 targetObject，captureStackTrace 还接收一个类型为 function 的可选参数 constructorOpt，当传递该参数时，调用栈中所有 constructorOpt 函数之上的信息(包括 constructorOpt 函数自身)，都会在访问 targetObject.stack 时被忽略。当需要对终端用户隐藏内部的实现细节时，constructorOpt 参数会很有用。传入第 2 个参数通常用于自定义错误，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function MyError() &#123;</span><br><span class="line">  Error.captureStackTrace(this, MyError)</span><br><span class="line">  this.name = this.constructor.name</span><br><span class="line">  this.message = &#x27;you got MyError&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myError = new MyError()</span><br><span class="line">console.log(myError)</span><br><span class="line">console.log(myError.stack)</span><br><span class="line">// 输出</span><br><span class="line">MyError &#123; name: &#x27;MyError&#x27;, message: &#x27;you got MyError&#x27; &#125;</span><br><span class="line">Error</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:7:17)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p>如果去掉 captureStackTrace 的第 2 个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function MyError() &#123;</span><br><span class="line">  Error.captureStackTrace(this)</span><br><span class="line">  this.name = this.constructor.name</span><br><span class="line">  this.message = &#x27;you got MyError&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myError = new MyError()</span><br><span class="line">console.log(myError)</span><br><span class="line">console.log(myError.stack)</span><br><span class="line">// 输出</span><br><span class="line">MyError &#123; name: &#x27;MyError&#x27;, message: &#x27;you got MyError&#x27; &#125;</span><br><span class="line">Error</span><br><span class="line">    at new MyError (/Users/nswbmw/Desktop/test/app.js:2:9)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:7:17)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：出现了 MyError 相关的调用栈，但我们并不关心 MyError 及其内部是如何实现的。</p><p>captureStackTrace 的第 2 个参数可以传入调用链上的其他函数，不一定是当前函数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const myObj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">function c () &#123;</span><br><span class="line">  Error.captureStackTrace(myObj, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b () &#123;</span><br><span class="line">  c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a () &#123;</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()</span><br><span class="line">console.log(myObj.stack)</span><br><span class="line">// 输出</span><br><span class="line">Error</span><br><span class="line">    at a (/Users/nswbmw/Desktop/test/app.js:12:3)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:15:1)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：captureStackTrace 的第 2 个参数传入了函数 b，调用栈中隐藏了 b 函数及其以上所有的堆栈帧。</p><p>讲到这里，相信读者都明白了 captureStackTrace 的用法。但这具体有什么用呢？其实上面提到了：<strong>隐藏内部的实现细节，优化错误栈</strong>。</p><p>下面以笔者写的一个模块 <a href="https://github.com/mongolass/mongolass">Mongolass</a> 为例，讲解如何应用 captureStackTrace。</p><blockquote><p><a href="https://github.com/mongolass/mongolass">Mongolass</a> 是一个轻量且优雅的连接 MongoDB 的模块。</p></blockquote><h2 id="3-3-3-captureStackTrace-在-Mongolass-中的应用"><a href="#3-3-3-captureStackTrace-在-Mongolass-中的应用" class="headerlink" title="3.3.3 captureStackTrace 在 Mongolass 中的应用"></a>3.3.3 captureStackTrace 在 Mongolass 中的应用</h2><p>这里先大体讲讲 Mongolass 的用法。Mongolass 与 Mongoose 类似，有 Model 的概念，Model 上挂载的方法对应对 MongoDB 的 collections 的操作，例如：<code>User.insert</code>。User 是一个 Model 实例，<code>User.insert</code> 方法返回的是一个 Query 实例。Query 的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Query &#123;</span><br><span class="line">  constructor(op, args) &#123;</span><br><span class="line">    Error.captureStackTrace(this, this.constructor);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用 Error.captureStackTrace 隐藏了 Query 内部的错误栈细节，但这样带来一个问题：丢失了原来的 error.stack，在 Mongolass 中可以自定义插件，而插件函数的执行是在 Query 内部，假如在插件中抛错，则会丢失相关错误栈信息。</p><p>如何弥补呢？Mongolass 的做法是：当 Query 内部抛出错误（error）时，截取有用的 error.stack，然后拼接到 Query 实例通过 Error.captureStackTrace 生成的 stack 上。</p><p>来看一段 Mongolass 的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const Mongolass = require(&#x27;mongolass&#x27;)</span><br><span class="line">const Schema = Mongolass.Schema</span><br><span class="line">const mongolass = new Mongolass(&#x27;mongodb://localhost:27017/test&#x27;)</span><br><span class="line"></span><br><span class="line">const UserSchema = new Schema(&#x27;UserSchema&#x27;, &#123;</span><br><span class="line">  name: &#123; type: &#x27;string&#x27; &#125;,</span><br><span class="line">  age: &#123; type: &#x27;number&#x27; &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const User = mongolass.model(&#x27;User&#x27;, UserSchema)</span><br><span class="line"></span><br><span class="line">User</span><br><span class="line">  .insertOne(&#123; name: &#x27;nswbmw&#x27;, age: &#x27;wrong age&#x27; &#125;)</span><br><span class="line">  .exec()</span><br><span class="line">  .then(console.log)</span><br><span class="line">  .catch(console.error)</span><br></pre></td></tr></table></figure><p>运行后打印的错误信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; TypeError: ($.age: &quot;wrong age&quot;) ✖ (type: number)</span><br><span class="line">    at Model.insertOne (/Users/nswbmw/Desktop/test/node_modules/mongolass/lib/query.js:104:16)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:12:4)</span><br><span class="line">    at ...</span><br><span class="line">  validator: &#x27;type&#x27;,</span><br><span class="line">  actual: &#x27;wrong age&#x27;,</span><br><span class="line">  expected: &#123; type: &#x27;number&#x27; &#125;,</span><br><span class="line">  path: &#x27;$.age&#x27;,</span><br><span class="line">  schema: &#x27;UserSchema&#x27;,</span><br><span class="line">  model: &#x27;User&#x27;,</span><br><span class="line">  op: &#x27;insertOne&#x27;,</span><br><span class="line">  args: [ &#123; name: &#x27;nswbmw&#x27;, age: &#x27;wrong age&#x27; &#125; ],</span><br><span class="line">  pluginName: &#x27;MongolassSchema&#x27;,</span><br><span class="line">  pluginOp: &#x27;beforeInsertOne&#x27;,</span><br><span class="line">  pluginArgs: [] &#125;</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：app.js 第 12 行的 insertOne 报错，报错原因是 age 字段是字符串 “wrong age”，而我们期望的是 number 类型的值。</p><h2 id="3-3-4-Error-prepareStackTrace"><a href="#3-3-4-Error-prepareStackTrace" class="headerlink" title="3.3.4 Error.prepareStackTrace"></a>3.3.4 Error.prepareStackTrace</h2><p>V8 暴露了另外一个接口——Error.prepareStackTrace。简单来讲，它的作用就是：<strong>定制 stack</strong>。用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error.prepareStackTrace(error, structuredStackTrace)</span><br></pre></td></tr></table></figure><p>第 1 个参数是个 Error 对象，第 2 个参数是一个数组，每一项都是一个 CallSite 对象，包含错误的函数名、行数等信息。对比以下两种代码：</p><p>正常的 throw error：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function c () &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b () &#123;</span><br><span class="line">  c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a () &#123;</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  a()</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log(e.stack)</span><br><span class="line">&#125;</span><br><span class="line">// 输出</span><br><span class="line">Error: error!!!</span><br><span class="line">    at c (/Users/nswbmw/Desktop/test/app.js:2:9)</span><br><span class="line">    at b (/Users/nswbmw/Desktop/test/app.js:6:3)</span><br><span class="line">    at a (/Users/nswbmw/Desktop/test/app.js:10:3)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/test/app.js:14:3)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p>使用 Error.prepareStackTrace 格式化 stack：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Error.prepareStackTrace = function (error, callSites) &#123;</span><br><span class="line">  return error.toString() + &#x27;\n&#x27; + callSites.map(callSite =&gt; &#123;</span><br><span class="line">    return &#x27;    -&gt; &#x27; + callSite.getFunctionName() + &#x27; (&#x27;</span><br><span class="line">      + callSite.getFileName() + &#x27;:&#x27;</span><br><span class="line">      + callSite.getLineNumber() + &#x27;:&#x27;</span><br><span class="line">      + callSite.getColumnNumber() + &#x27;)&#x27;</span><br><span class="line">  &#125;).join(&#x27;\n&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function c () &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b () &#123;</span><br><span class="line">  c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a () &#123;</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  a()</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log(e.stack)</span><br><span class="line">&#125;</span><br><span class="line">// 输出</span><br><span class="line">Error: error!!!</span><br><span class="line">    -&gt; c (/Users/nswbmw/Desktop/test/app.js:11:9)</span><br><span class="line">    -&gt; b (/Users/nswbmw/Desktop/test/app.js:15:3)</span><br><span class="line">    -&gt; a (/Users/nswbmw/Desktop/test/app.js:19:3)</span><br><span class="line">    -&gt; null (/Users/nswbmw/Desktop/test/app.js:23:3)</span><br><span class="line">    -&gt; ...</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：我们自定义了一个 Error.prepareStackTrace 格式化了 stack 并打印出来。</p><p>CallSite 对象还有许多 API，例如：getThis、getTypeName、getFunction、getFunctionName、getMethodName、getFileName、getLineNumber、getColumnNumber、getEvalOrigin、isToplevel、isEval、isNative 和 isConstructor，这里不一一介绍了，有兴趣的读者可查看参考链接。</p><p>在使用 Error.prepareStackTrace 时需要注意两点：</p><ol><li>这个方法是 V8 暴露出来的，所以只能在基于 V8 的 Node.js 或者 Chrome 里才能使用。</li><li>这个方法会修改全局 Error 的行为。</li></ol><h2 id="3-3-5-Error-prepareStackTrace-的其他用法"><a href="#3-3-5-Error-prepareStackTrace-的其他用法" class="headerlink" title="3.3.5 Error.prepareStackTrace 的其他用法"></a>3.3.5 Error.prepareStackTrace 的其他用法</h2><p>Error.prepareStackTrace 除了格式化错误栈外还有什么作用呢？<a href="https://github.com/sindresorhus">sindresorhus</a> 大神还写了一个 <a href="https://github.com/sindresorhus/callsites">callsites</a> 的模块，可以用来获取函数调用相关的信息，例如获取执行该函数所在的文件名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const callsites = require(&#x27;callsites&#x27;)</span><br><span class="line"></span><br><span class="line">function getFileName() &#123;</span><br><span class="line">  console.log(callsites()[0].getFileName())</span><br><span class="line">  //=&gt; &#x27;/Users/nswbmw/Desktop/test/app.js&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFileName()</span><br></pre></td></tr></table></figure><p>我们来看一下源代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = () =&gt; &#123;</span><br><span class="line">  const _ = Error.prepareStackTrace</span><br><span class="line">  Error.prepareStackTrace = (_, stack) =&gt; stack</span><br><span class="line">  const stack = new Error().stack.slice(1)</span><br><span class="line">  Error.prepareStackTrace = _</span><br><span class="line">  return stack</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意以下几点：</p><ol><li>因为修改 Error.prepareStackTrace 会全局生效，所以将原来的 Error.prepareStackTrace 存到一个变量中，函数执行完后再重置回去，避免影响全局的 Error。</li><li>Error.prepareStackTrace 函数直接返回 CallSite 对象数组，而不是格式化后的 stack 字符串。</li><li>new 一个 Error，stack 是返回的 CallSite 对象数组，因为第 1 项是 callsites，它总是这个模块的 CallSite，所以通过 slice(1) 去掉。</li></ol><p>假如我们想获取当前函数的父函数名，则可以这样用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const callsites = require(&#x27;callsites&#x27;)</span><br><span class="line"></span><br><span class="line">function b () &#123;</span><br><span class="line">  console.log(callsites()[1].getFunctionName())</span><br><span class="line">  // =&gt; &#x27;a&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a () &#123;</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><h2 id="3-3-6-Error-stackTraceLimit"><a href="#3-3-6-Error-stackTraceLimit" class="headerlink" title="3.3.6 Error.stackTraceLimit"></a>3.3.6 Error.stackTraceLimit</h2><p>Node.js 还暴露了一个 Error.stackTraceLimit 的设置，可以通过设置这个值来改变输出的 stack 的行数，默认值是 10。</p><h2 id="3-3-7-Long-Stack-Trace"><a href="#3-3-7-Long-Stack-Trace" class="headerlink" title="3.3.7 Long Stack Trace"></a>3.3.7 Long Stack Trace</h2><p>stack trace 也有短板，问题出在异步操作上。若在异步回调中抛错，就会丢失绑定回调前的调用栈信息，来看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const foo = function () &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">const bar = function () &#123;</span><br><span class="line">  setTimeout(foo)</span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br><span class="line">// 输出</span><br><span class="line">/Users/nswbmw/Desktop/test/app.js:2</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: error!!!</span><br><span class="line">    at Timeout.foo [as _onTimeout] (/Users/nswbmw/Desktop/test/app.js:2:9)</span><br><span class="line">    at ontimeout (timers.js:469:11)</span><br><span class="line">    at tryOnTimeout (timers.js:304:5)</span><br><span class="line">    at Timer.listOnTimeout (timers.js:264:5)</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：丢失了 bar 的调用栈。</p><p>在实际开发过程中，异步回调的例子数不胜数，如果不能知道异步回调之前的触发位置，则会给 debug 带来很大的难度。这时，出现了一个叫 long Stack Trace 的概念。</p><p>long Stack Trace 并不是 JavaScript 原生就支持的功能，所以要拥有这样的功能，就需要我们做一些 hack，幸好在 V8 环境下，所有 hack 所需的 API，V8 都已经提供了。</p><p>对于异步回调，目前能做的就是在所有会产生异步操作的 API 上做一些手脚，这些 API 包括：</p><ul><li>setTimeout, setInterval, setImmediate。</li><li>nextTick, nextDomainTick。</li><li>EventEmitter.addEventListener。</li><li>EventEmitter.on。</li><li>Ajax XHR。</li></ul><p>Long Stack Trace 相关的库可以参考：</p><ol><li><a href="https://github.com/AndreasMadsen/trace">AndreasMadsen&#x2F;trace</a></li><li><a href="https://github.com/mattinsler/longjohn">mattinsler&#x2F;longjohn</a></li><li><a href="https://github.com/tlrobinson/long-stack-traces">tlrobinson&#x2F;long-stack-traces</a></li></ol><p>node@8+ 提供了强大的 async_hooks 模块，在本书的后面章节会介绍如何使用。</p><h2 id="3-3-8-参考链接"><a href="#3-3-8-参考链接" class="headerlink" title="3.3.8 参考链接"></a>3.3.8 参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25338849">https://zhuanlan.zhihu.com/p/25338849</a></li><li><a href="https://segmentfault.com/a/1190000007076507">https://segmentfault.com/a/1190000007076507</a></li><li><a href="https://github.com/v8/v8/wiki/Stack-Trace-API">https://github.com/v8/v8/wiki/Stack-Trace-API</a></li><li><a href="https://www.jianshu.com/p/1d5120ad62bb">https://www.jianshu.com/p/1d5120ad62bb</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.2 Async and Await</title>
      <link href="/2019/04/28/3.2.1%20async%20+%20await/"/>
      <url>/2019/04/28/3.2.1%20async%20+%20await/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>笔者在很长一段时间内都在使用 koa@1 +（generator|bluebird）+ sequelize 这个组合，这个组合并没有什么问题，也很常见，但是到了滥用的地步，导致后来维护和调试起来都很痛苦。若排除 sequelize 这个我们不得不用的模块，从调试 cpuprofile 的角度讲讲为什么笔者认为应该用 async&#x2F;await + Promise 替代 co + generator|bluebird。</p><p>笔者的观点是：<strong>使用原生模块具有更清晰的调用栈</strong>。</p><p>下面用 4 个例子进行对比，看看实现相同逻辑的不同代码生成的 cpuprofile 中调用栈的信息。</p><h2 id="3-2-1-async-await"><a href="#3-2-1-async-await" class="headerlink" title="3.2.1 async + await"></a>3.2.1 async + await</h2><p><strong>async.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const profiler = require(&#x27;v8-profiler&#x27;)</span><br><span class="line"></span><br><span class="line">async function A () &#123;</span><br><span class="line">  return await Promise.resolve(&#x27;A&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function B () &#123;</span><br><span class="line">  return await A()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async function asyncWrap () &#123;</span><br><span class="line">  const start = Date.now()</span><br><span class="line">  profiler.startProfiling()</span><br><span class="line">  while (Date.now() - start &lt; 10000) &#123;</span><br><span class="line">    await B()</span><br><span class="line">  &#125;</span><br><span class="line">  const profile = profiler.stopProfiling()</span><br><span class="line">  profile.export()</span><br><span class="line">    .pipe(fs.createWriteStream(&#x27;async.cpuprofile&#x27;))</span><br><span class="line">    .on(&#x27;finish&#x27;, () =&gt; &#123;</span><br><span class="line">      profile.delete()</span><br><span class="line">      console.error(&#x27;async.cpuprofile export success&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>加载运行后生成的 async.cpuprofile，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.1.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.1.1.png" alt="img"></a></p><p><strong>可以看出</strong>：asyncWrap 中调用了 B 函数，B 函数调用了 A 函数，A 函数中 resolve 了一个值。在 asyncWrap 中还调用了 stopProfiling 函数。</p><h2 id="3-2-2-co-yield"><a href="#3-2-2-co-yield" class="headerlink" title="3.2.2 co + yield"></a>3.2.2 co + yield</h2><p><strong>co.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const co = require(&#x27;co&#x27;)</span><br><span class="line">const profiler = require(&#x27;v8-profiler&#x27;)</span><br><span class="line"></span><br><span class="line">function * A () &#123;</span><br><span class="line">  return yield Promise.resolve(&#x27;A&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function * B () &#123;</span><br><span class="line">  return yield A()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">co(function * coWrap () &#123;</span><br><span class="line">  const start = Date.now()</span><br><span class="line">  profiler.startProfiling()</span><br><span class="line">  while (Date.now() - start &lt; 10000) &#123;</span><br><span class="line">    yield B()</span><br><span class="line">  &#125;</span><br><span class="line">  const profile = profiler.stopProfiling()</span><br><span class="line">  profile.export()</span><br><span class="line">    .pipe(fs.createWriteStream(&#x27;co.cpuprofile&#x27;))</span><br><span class="line">    .on(&#x27;finish&#x27;, () =&gt; &#123;</span><br><span class="line">      profile.delete()</span><br><span class="line">      console.error(&#x27;co.cpuprofile export success&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加载运行后生成的 co.cpuprofile，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.1.2.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.1.2.png" alt="img"></a></p><p><strong>可以看出</strong>：调用栈非常深，有太多没有用的 co 相关的调用栈。如果 n 个 generator 层层嵌套，就会出现 n 倍的 (anonymous)-&gt;onFullfiled-&gt;next-&gt;toPromise-&gt;co-&gt;Promise-&gt;(anonymous) 调用栈。如果你读过 co 的源码，就可能知道，这是 co 将 generator 解包的过程。其实这个可以通过将 <code>yield generator</code> 替换成 <code>yield* generator</code> 来优化。</p><h2 id="3-2-3-co-yield"><a href="#3-2-3-co-yield" class="headerlink" title="3.2.3 co + yield*"></a>3.2.3 co + yield*</h2><p><strong>co_better.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const co = require(&#x27;co&#x27;)</span><br><span class="line">const profiler = require(&#x27;v8-profiler&#x27;)</span><br><span class="line"></span><br><span class="line">function * A () &#123;</span><br><span class="line">  return yield Promise.resolve(&#x27;A&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function * B () &#123;</span><br><span class="line">  return yield * A()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">co(function * coWrap () &#123;</span><br><span class="line">  const start = Date.now()</span><br><span class="line">  profiler.startProfiling()</span><br><span class="line">  while (Date.now() - start &lt; 10000) &#123;</span><br><span class="line">    yield * B()</span><br><span class="line">  &#125;</span><br><span class="line">  const profile = profiler.stopProfiling()</span><br><span class="line">  profile.export()</span><br><span class="line">    .pipe(fs.createWriteStream(&#x27;co_better.cpuprofile&#x27;))</span><br><span class="line">    .on(&#x27;finish&#x27;, () =&gt; &#123;</span><br><span class="line">      profile.delete()</span><br><span class="line">      console.error(&#x27;co_better.cpuprofile export success&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加载运行后生成的 co_better.cpuprofile，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.1.3.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.1.3.png" alt="img"></a></p><p><strong>可以看出</strong>：与 co.js 相比，调用栈清晰了很多，不过与使用 async&#x2F;await 相比，还是多了些 onFulfilled、next。</p><h2 id="3-2-4-co-bluebird"><a href="#3-2-4-co-bluebird" class="headerlink" title="3.2.4 co + bluebird"></a>3.2.4 co + bluebird</h2><p><strong>co_bluebird.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const co = require(&#x27;co&#x27;)</span><br><span class="line">const Promise = require(&#x27;bluebird&#x27;)</span><br><span class="line">const profiler = require(&#x27;v8-profiler&#x27;)</span><br><span class="line"></span><br><span class="line">function * A () &#123;</span><br><span class="line">  return yield Promise.resolve(&#x27;A&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function * B () &#123;</span><br><span class="line">  return yield * A()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">co(function * coBluebirdWrap () &#123;</span><br><span class="line">  const start = Date.now()</span><br><span class="line">  profiler.startProfiling()</span><br><span class="line">  while (Date.now() - start &lt; 10000) &#123;</span><br><span class="line">    yield * B()</span><br><span class="line">  &#125;</span><br><span class="line">  const profile = profiler.stopProfiling()</span><br><span class="line">  profile.export()</span><br><span class="line">    .pipe(fs.createWriteStream(&#x27;co_bluebird.cpuprofile&#x27;))</span><br><span class="line">    .on(&#x27;finish&#x27;, () =&gt; &#123;</span><br><span class="line">      profile.delete()</span><br><span class="line">      console.error(&#x27;co_bluebird.cpuprofile export success&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加载运行后生成的 co_bluebird.cpuprofile，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/3.1.4.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/3.1.4.png" alt="img"></a></p><p><strong>可以看出</strong>：与 co_better.js 相比，调用栈中多了许多 bluebird 模块的无用信息。而且这只是非常简单的示例代码，要是在复杂的业务逻辑中大量使用 bluebird 代码生成的 cpuprofile，就几乎没法看了。</p><p><strong>结论</strong>：使用 async&#x2F;await + Promise + 命名函数，具有更清晰的调用栈，让分析 cpuprofile 时不再痛苦。</p><p>聪明的你可能会问：</p><ol><li>为什么不建议用 bluebird？因为：<ol><li>随着 V8 不断优化，原生 Promise 性能逐渐提高，bluebird 的性能优势不明显。</li><li>原生 Promise 的 API 足够用，至少能覆盖大部分使用场景，而且还在不断完善，未来还会添加新的 API，例如：Promise.prototype.finally。</li><li>具有更清晰的调用栈。</li></ol></li><li>由于历史遗留原因，现在代码中大量使用了 yield + generator 怎么办？可以：<ol><li>将所有 yield generator 替换成 yield * generator。</li><li>升级到 node@8+，逐步用 async&#x2F;await 替换，毕竟 async 函数调用后返回的也是一个 promise，也是 yieldable 的。</li></ol></li><li>性能比较呢？<ol><li>node@8+ 下 async&#x2F;await 完胜 co。</li></ol></li></ol><h2 id="3-2-5-yield-gt-yield-遇到的坑"><a href="#3-2-5-yield-gt-yield-遇到的坑" class="headerlink" title="3.2.5 yield -&gt; yield* 遇到的坑"></a>3.2.5 yield -&gt; yield* 遇到的坑</h2><p>上面讲到，可以将 yield generator 改成 yield * generator，这里面有一个坑，是由于不明白 co 的原理而滥用 co 导致的。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const co = require(&#x27;co&#x27;)</span><br><span class="line"></span><br><span class="line">function * genFunc () &#123;</span><br><span class="line">  return Promise.resolve(&#x27;genFunc&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">co(function * () &#123;</span><br><span class="line">  console.log(yield genFunc()) // =&gt; genFunc</span><br><span class="line">  console.log(yield * genFunc()) // =&gt; Promise &#123; &#x27;genFunc&#x27; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：genFunc 这个 generatorFunction 在执行后会返回一个 promise，当使用 <code>yield genFunc()</code> 的时候，co 判断返回了一个 promise 会继续帮我们调用它的 then 从而得到真正的字符串。如果使用 <code>yield * genFunc()</code>，就用了语言原生的特性而不经过 co，直接返回一个 promise。</p><p><strong>解决方法（任选其一）</strong>：</p><ol><li><code>function * genFunc</code> -&gt; <code>function genFunc</code>，用 <code>yield genFunc()</code>。</li><li><code>return Promise.resolve(&#39;genFunc&#39;)</code> -&gt; <code>return yield Promise.resolve(&#39;genFunc&#39;)</code>，用 <code>yield* genFunc()</code>。</li></ol><p>不过，建议最终转换到 async&#x2F;await + Promise 上来，毕竟 co + generator 只是一个过渡产物。</p><h2 id="3-2-6-async-bluebird"><a href="#3-2-6-async-bluebird" class="headerlink" title="3.2.6 async + bluebird"></a>3.2.6 async + bluebird</h2><p>如果是使用 async&#x2F;await + bluebird 的情况呢？代码如下：</p><p><strong>async_bluebird.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const profiler = require(&#x27;v8-profiler&#x27;)</span><br><span class="line">const Promise = require(&#x27;bluebird&#x27;)</span><br><span class="line"></span><br><span class="line">async function A () &#123;</span><br><span class="line">  return await Promise.resolve(&#x27;A&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function B () &#123;</span><br><span class="line">  return await A()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async function asyncBluebirdWrap () &#123;</span><br><span class="line">  const start = Date.now()</span><br><span class="line">  profiler.startProfiling()</span><br><span class="line">  while (Date.now() - start &lt; 10000) &#123;</span><br><span class="line">    await B()</span><br><span class="line">  &#125;</span><br><span class="line">  const profile = profiler.stopProfiling()</span><br><span class="line">  profile.export()</span><br><span class="line">    .pipe(fs.createWriteStream(&#x27;async_bluebird.cpuprofile&#x27;))</span><br><span class="line">    .on(&#x27;finish&#x27;, () =&gt; &#123;</span><br><span class="line">      profile.delete()</span><br><span class="line">      console.error(&#x27;async_bluebird.cpuprofile export success&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：调用栈比 co_blueblird.js 的还乱。</p><h2 id="3-2-7-参考链接"><a href="#3-2-7-参考链接" class="headerlink" title="3.2.7 参考链接"></a>3.2.7 参考链接</h2><ul><li><a href="https://medium.com/@markherhold/generators-vs-async-await-performance-806d8375a01a">https://medium.com/@markherhold/generators-vs-async-await-performance-806d8375a01a</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 3.1 PromiseA standard</title>
      <link href="/2019/04/21/3.1.1%20PromiseA+%20%E8%A7%84%E8%8C%83/"/>
      <url>/2019/04/21/3.1.1%20PromiseA+%20%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>如何写出清晰优雅的代码也是调试重要的一部分，而在过去很长一段时间内，JavaScript 最令人吐槽的就是回调地狱（callback hell）了。先看一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">step1(function  (err, value1) &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    ...</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  step2(value1, function (err, value2) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    step3(value2, function (err, value3) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        ...</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      // Do something with value3</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码依次执行 step1、step2、step3，且后一个函数用到了前一个函数执行的结果。这只是一个简单的例子，真实环境下可能会写出嵌套更深的回调函数，代码形成一个倒金字塔。如果使用 Promise，代码就优雅很多了，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">step1()</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .catch((e) =&gt; &#123;</span><br><span class="line">    // Do something with error</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Promise 的出现就是为了解决回调地狱的问题，它最早是由社区提出和实现的，衍生的规范也有很多，最终 ES6 采用了 Promise&#x2F;A+ 规范，并将其写进了语言标准，统一了用法。</p><h2 id="3-1-1-Promise-x2F-A-规范"><a href="#3-1-1-Promise-x2F-A-规范" class="headerlink" title="3.1.1 Promise&#x2F;A+ 规范"></a>3.1.1 Promise&#x2F;A+ 规范</h2><p>Promise 规范有很多，如 Promise&#x2F;A，Promise&#x2F;B，Promise&#x2F;D 以及 Promise&#x2F;A 的升级版 Promise&#x2F;A+，细节各有不同，最终 ES6 中采用了 Promise&#x2F;A+ 规范。在讲解 Promise 实现之前，当然要先了解 Promise&#x2F;A+ 规范，Promise&#x2F;A+ 规范参考：</p><ul><li>英文版：<a href="https://promisesaplus.com/">https://promisesaplus.com/</a></li><li>中文版：<a href="http://www.ituring.com.cn/article/66566">http://www.ituring.com.cn/article/66566</a></li></ul><p>规范虽然不长，但细节也比较多，笔者挑出几个要点简单说明一下：</p><ol><li>Promise 本质是一个状态机。每个 promise 只能是 3 种状态中的一种：pending、fulfilled 或 rejected。状态转变只能是 pending -&gt; fulfilled 或者 pending -&gt; rejected。状态转变不可逆。</li><li>then 方法可以被同一个 promise 调用多次。</li><li>then 方法必须返回一个 promise，从而可以实现链式调用。</li><li>值穿透。下面会讲。</li></ol><p>Promise 的 API 并不多，但是 Promise 并不简单，如何彻底理解并玩转 Promise 呢？当然是从头实现一遍 Promise 啦。我们假设读者已经熟悉了 Promise 的基本用法，本节内容分为两部分：第一部分讲解如何从零开始实现一个 Promise，第二部分通过十道题巩固读者对 Promise 的理解。</p><h2 id="3-1-2-从零开始实现-Promise"><a href="#3-1-2-从零开始实现-Promise" class="headerlink" title="3.1.2 从零开始实现 Promise"></a>3.1.2 从零开始实现 Promise</h2><p>我们知道 Promise 是本质是一个构造函数，需要用 new 调用，并有以下几个 api：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Promise (resolver) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.then = function () &#123;&#125;</span><br><span class="line">Promise.prototype.catch = function () &#123;&#125;</span><br><span class="line"></span><br><span class="line">Promise.resolve = function () &#123;&#125;</span><br><span class="line">Promise.reject = function () &#123;&#125;</span><br><span class="line">Promise.all = function () &#123;&#125;</span><br><span class="line">Promise.race = function () &#123;&#125;</span><br></pre></td></tr></table></figure><p>创建以下初始代码，然后开始一步一步构建完整的 Promise 实现。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function INTERNAL () &#123;&#125;</span><br><span class="line">function isFunction (func) &#123;</span><br><span class="line">  return typeof func === &#x27;function&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function isObject (obj) &#123;</span><br><span class="line">  return typeof obj === &#x27;object&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function isArray (arr) &#123;</span><br><span class="line">  return Array.isArray(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const PENDING = &#x27;pending&#x27;</span><br><span class="line">const FULFILLED = &#x27;fulfilled&#x27;</span><br><span class="line">const REJECTED = &#x27;rejected&#x27;</span><br><span class="line"></span><br><span class="line">module.exports = Promise</span><br><span class="line"></span><br><span class="line">function Promise (resolver) &#123;</span><br><span class="line">  if (!isFunction(resolver)) &#123;</span><br><span class="line">    throw new TypeError(&#x27;resolver must be a function&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  this.state = PENDING</span><br><span class="line">  this.value = void 0</span><br><span class="line">  this.queue = []</span><br><span class="line">  if (resolver !== INTERNAL) &#123;</span><br><span class="line">    safelyResolveThen(this, resolver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：以下 promise 均指代 Promise 实例。</p><p>INTERNAL 就是一个空函数，后面会用来传入 Promise 构造函数生成一个 promise 实例。定义了 3 个辅助函数：isFunction、isObject 和 isArray。定义了 3 种状态：PENDING、FULFILLED 和 REJECTED。safelyResolveThen 后面会讲。promise 内部有三个变量：</p><ol><li>state：当前 promise 的状态，初始值为 PENDING。状态改变只能是 PENDING -&gt; FULFILLED 或 PENDING -&gt; REJECTED。</li><li>value：初始值是 void 0（即 undefined），当 state 是 FULFILLED 时存储返回值，当 state 是 REJECTED 时存储错误。</li><li>queue：promise 内部的回调队列，后面会讲它的作用。</li></ol><h2 id="3-1-3-Promise-实现原理"><a href="#3-1-3-Promise-实现原理" class="headerlink" title="3.1.3 Promise 实现原理"></a>3.1.3 Promise 实现原理</h2><p>笔者发布了一个 Promise&#x2F;A+ 规范实现的模块——appoint，我们拿这个模块研究一下它是如何实现 Promise 的。看一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const Promise = require(&#x27;appoint&#x27;)</span><br><span class="line">const promise = new Promise((resolve) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">const a = promise.then(function onSuccess () &#123;&#125;)</span><br><span class="line">const b = promise.catch(function onError () &#123;&#125;)</span><br><span class="line">console.dir(promise, &#123; depth: 10 &#125;)</span><br><span class="line">console.log(promise.queue[0].promise === a)</span><br><span class="line">console.log(promise.queue[1].promise === b)</span><br></pre></td></tr></table></figure><p>运行后打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Promise &#123;</span><br><span class="line">  state: &#x27;pending&#x27;,</span><br><span class="line">  value: undefined,</span><br><span class="line">  queue:</span><br><span class="line">   [ QueueItem &#123;</span><br><span class="line">       promise: Promise &#123; state: &#x27;pending&#x27;, value: undefined, queue: [] &#125;,</span><br><span class="line">       callFulfilled: [Function],</span><br><span class="line">       callRejected: [Function] &#125;,</span><br><span class="line">     QueueItem &#123;</span><br><span class="line">       promise: Promise &#123; state: &#x27;pending&#x27;, value: undefined, queue: [] &#125;,</span><br><span class="line">       callFulfilled: [Function],</span><br><span class="line">       callRejected: [Function] &#125; ] &#125;</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：原生 Promise 是没有 queue 属性的，appoint 的实现中添加了这个属性。</p><p>可以看出，queue 数组中有两个对象。因为规范中规定：<strong>then 方法可以被同一个 promise 调用多次</strong>。上例中在调用 .then 和 .catch 时 promise 并没有被 resolve，所以将 .then 和 .catch 生成的新 promise（a 和 b） 和正确时的回调（onSuccess 包装成 callFulfilled）和错误时的回调（onError 包装成 callRejected）生成一个 QueueItem 实例并 push 到 queue 数组里，所以两个 console.log 都打印 true。当 promise 状态改变时遍历内部 queue 数组，统一执行成功（callFulfilled）或失败（callRejected）的回调（传入 promise 的 value 值），生成的结果分别设置 a 和 b 的 state 和 value，这就是 Promise 实现的基本原理。 再来看另一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const Promise = require(&#x27;appoint&#x27;)</span><br><span class="line">const promise = new Promise((resolve) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">promise</span><br><span class="line">  .then(() =&gt; &#123;&#125;)</span><br><span class="line">  .then(() =&gt; &#123;&#125;)</span><br><span class="line">  .then(() =&gt; &#123;&#125;)</span><br><span class="line">console.dir(promise, &#123; depth: 10 &#125;)</span><br></pre></td></tr></table></figure><p>打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Promise &#123;</span><br><span class="line">  state: &#x27;pending&#x27;,</span><br><span class="line">  value: undefined,</span><br><span class="line">  queue:</span><br><span class="line">   [ QueueItem &#123;</span><br><span class="line">       promise:</span><br><span class="line">        Promise &#123;</span><br><span class="line">          state: &#x27;pending&#x27;,</span><br><span class="line">          value: undefined,</span><br><span class="line">          queue:</span><br><span class="line">           [ QueueItem &#123;</span><br><span class="line">               promise:</span><br><span class="line">                Promise &#123;</span><br><span class="line">                  state: &#x27;pending&#x27;,</span><br><span class="line">                  value: undefined,</span><br><span class="line">                  queue:</span><br><span class="line">                   [ QueueItem &#123;</span><br><span class="line">                       promise: Promise &#123; state: &#x27;pending&#x27;, value: undefined, queue: [] &#125;,</span><br><span class="line">                       callFulfilled: [Function],</span><br><span class="line">                       callRejected: [Function] &#125; ] &#125;,</span><br><span class="line">               callFulfilled: [Function],</span><br><span class="line">               callRejected: [Function] &#125; ] &#125;,</span><br><span class="line">       callFulfilled: [Function],</span><br><span class="line">       callRejected: [Function] &#125; ] &#125;</span><br></pre></td></tr></table></figure><p>链式调用了 3 次 .then，每次调用 .then 将它生成的 promise 放到了调用它的 promise 队列里，形成了 3 层调用关系。当最外层的 promise 状态改变时，遍历它的 queue 数组调用对应的回调，设置子 promise 的 state 和 value 并遍历它的 queue 数组调用对应的回调……以此类推。</p><p><strong>注意</strong>：这里 queue 是嵌套的，而不是像上个例子中 queue 是平铺的。</p><h2 id="3-1-4-safelyResolveThen"><a href="#3-1-4-safelyResolveThen" class="headerlink" title="3.1.4 safelyResolveThen"></a>3.1.4 safelyResolveThen</h2><p>接下来完成 safelyResolveThen 的逻辑，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function safelyResolveThen (self, then) &#123;</span><br><span class="line">  let called = false</span><br><span class="line">  try &#123;</span><br><span class="line">    then(function (value) &#123;</span><br><span class="line">      if (called) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      called = true</span><br><span class="line">      doResolve(self, value)</span><br><span class="line">    &#125;, function (error) &#123;</span><br><span class="line">      if (called) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      called = true</span><br><span class="line">      doReject(self, error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    if (called) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    called = true</span><br><span class="line">    doReject(self, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safelyResolveThen 顾名思义用来 “安全的执行 then 函数”，这里的 then 函数指 “第一个参数是 resolve 函数第二个参数是 reject 函数的函数”，适用于以下两种情况：</p><ol><li>构造函数的参数，即这里的 resolver：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function resolver (resolve, reject) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>promise 的 then：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(resolve, reject)</span><br></pre></td></tr></table></figure><p>safelyResolveThen 有 3 个作用：</p><ol><li>try…catch 用来捕获函数内抛出的异常，如构造函数内抛出异常：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function resolver (resolve, reject) &#123;</span><br><span class="line">  throw new Error(&#x27;Oops&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>called 控制 resolve 或 reject 只执行一次，多次调用没有任何作用。即：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Promise = require(&#x27;appoint&#x27;)</span><br><span class="line">const promise = new Promise(function resolver (resolve, reject) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">  reject(&#x27;error&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(console.log)</span><br><span class="line">promise.catch(console.error)</span><br></pre></td></tr></table></figure><p>打印 error，不会再打印 haha。</p><ol><li>没有错误则执行 doResolve，有错误则执行 doReject。</li></ol><h2 id="3-1-5-doResolve-和-doReject"><a href="#3-1-5-doResolve-和-doReject" class="headerlink" title="3.1.5 doResolve 和 doReject"></a>3.1.5 doResolve 和 doReject</h2><p>doResolve 和 doReject 相关代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function doResolve (self, value) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const then = getThen(value)</span><br><span class="line">    if (then) &#123;</span><br><span class="line">      safelyResolveThen(self, then)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      self.state = FULFILLED</span><br><span class="line">      self.value = value</span><br><span class="line">      self.queue.forEach(function (queueItem) &#123;</span><br><span class="line">        queueItem.callFulfilled(value)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return self</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    return doReject(self, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doReject (self, error) &#123;</span><br><span class="line">  self.state = REJECTED</span><br><span class="line">  self.value = error</span><br><span class="line">  self.queue.forEach(function (queueItem) &#123;</span><br><span class="line">    queueItem.callRejected(error)</span><br><span class="line">  &#125;)</span><br><span class="line">  return self</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doReject 用来设置 promise 的 state 为 REJECTED，value 为 error，然后遍历 queue，设置所有子 promise 的状态为 REJECTED 和值为 error。doResolve 结合 safelyResolveThen 使用不断地解包 promise，直至返回值是非 promise 对象后，设置 promise 的状态和值，然后设置子 promise 的状态和值。</p><p>这里有个辅助函数 getThen：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getThen (promise) &#123;</span><br><span class="line">  const then = promise &amp;&amp; promise.then</span><br><span class="line">  if (promise &amp;&amp; (isObject(promise) || isFunction(promise)) &amp;&amp; isFunction(then)) &#123;</span><br><span class="line">    return function applyThen () &#123;</span><br><span class="line">      then.apply(promise, arguments)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getThen 实现了规范中规定的：<strong>如果 then 是函数，将 x（即被调用的 promise） 作为函数的 this 调用。</strong></p><h2 id="3-1-6-Promise-prototype-then-和-Promise-prototype-catch"><a href="#3-1-6-Promise-prototype-then-和-Promise-prototype-catch" class="headerlink" title="3.1.6 Promise.prototype.then 和 Promise.prototype.catch"></a>3.1.6 Promise.prototype.then 和 Promise.prototype.catch</h2><p>接下来实现 Promise.prototype.then 和 Promise.prototype.catch，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Promise.prototype.then = function (onFulfilled, onRejected) &#123;</span><br><span class="line">  if ((!isFunction(onFulfilled) &amp;&amp; this.state === FULFILLED) ||</span><br><span class="line">    (!isFunction(onRejected) &amp;&amp; this.state === REJECTED)) &#123;</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line">  const promise = new this.constructor(INTERNAL)</span><br><span class="line">  if (this.state !== PENDING) &#123;</span><br><span class="line">    const resolver = this.state === FULFILLED ? onFulfilled : onRejected</span><br><span class="line">    unwrap(promise, resolver, this.value)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    this.queue.push(new QueueItem(promise, onFulfilled, onRejected))</span><br><span class="line">  &#125;</span><br><span class="line">  return promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.catch = function (onRejected) &#123;</span><br><span class="line">  return this.then(null, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的 <code>return this</code> 实现了值穿透，后面会细讲。可以看出，then 方法中生成了一个新的 promise 然后返回。如果 promise 的状态改变了，则调用 unwrap，否则将生成的 promise 加入到当前 promise 的回调队列 queue 里，之前已经讲解了如何消费 queue。有 3 点需要讲解：</p><ol><li>Promise 构造函数传入了一个 INTERNAL 空函数，因为这个新产生的 promise 可以认为是内部的 promise，需要根据外部的 promise 的状态和值产生自身的状态和值，不需要传入回调函数，而外部 Promise 需要传入回调函数决定它的状态和值，所以之前 Promise 的构造函数里做了判断区分外部调用还是内部调用：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (resolver !== INTERNAL) &#123;</span><br><span class="line">  safelyResolveThen(this, resolver)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>QueueItem 代码如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function QueueItem (promise, onFulfilled, onRejected) &#123;</span><br><span class="line">  this.promise = promise</span><br><span class="line">  this.callFulfilled = function (value) &#123;</span><br><span class="line">    doResolve(this.promise, value)</span><br><span class="line">  &#125;</span><br><span class="line">  this.callRejected = function (error) &#123;</span><br><span class="line">    doReject(this.promise, error)</span><br><span class="line">  &#125;</span><br><span class="line">  if (isFunction(onFulfilled)) &#123;</span><br><span class="line">    this.callFulfilled = function (value) &#123;</span><br><span class="line">      unwrap(this.promise, onFulfilled, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (isFunction(onRejected)) &#123;</span><br><span class="line">    this.callRejected = function (error) &#123;</span><br><span class="line">      unwrap(this.promise, onRejected, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>promise 为 then 生成的新 promise，onFulfilled 和 onRejected 即是 then 参数中的 onFulfilled 和 onRejected。从上面代码可以看出：当 promise 状态变为 FULFILLED 时，之前注册的 then 函数通过 callFulfilled 调用 unwrap 进行解包最终得出 promise 的状态和值；之前注册的 catch 函数，用 callRejected 直接调用 doReject，设置队列里 promise 的状态和值。当 promise 状态变为 REJECTED 类似。</p><ol><li>unwrap 代码如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function unwrap (promise, func, value) &#123;</span><br><span class="line">  process.nextTick(function () &#123;</span><br><span class="line">    let returnValue</span><br><span class="line">    try &#123;</span><br><span class="line">      returnValue = func(value)</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">      return doReject(promise, error)</span><br><span class="line">    &#125;</span><br><span class="line">    if (returnValue === promise) &#123;</span><br><span class="line">      doReject(promise, new TypeError(&#x27;Cannot resolve promise with itself&#x27;))</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      doResolve(promise, returnValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unwrap 函数从名字也可以看出是用来解包的，即拿到父 promise 的结果设置当前 promise 的状态和值。第一个参数是 promise，第二个参数是父 promise 的 then 的回调（onFulfilled&#x2F;onRejected），第三个参数是父 promise 的值（正常值&#x2F;错误）。有 3 点需要说明：</p><ol><li>使用 process.nextTick 将代码异步执行，这也是规范里明确规定的。看一段代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const Promise = require(&#x27;appoint&#x27;)</span><br><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">  promise.then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;1&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&#x27;2&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印 2 1，去掉 process.nextTick 则打印 1 2。</p><ol><li>try…catch 用来捕获 then&#x2F;catch 函数内抛出的异常，并调用 doReject，如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">  throw new Error(&#x27;haha&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">promise.catch(() =&gt; &#123;</span><br><span class="line">  throw new Error(&#x27;haha&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>返回的值不能是 promise 本身，否则会造成死循环，如下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">const a = promise.then(() =&gt; &#123;</span><br><span class="line">  return a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">a.catch(console.log)// [TypeError: Chaining cycle detected for promise #&lt;Promise&gt;]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：promise.catch(onRejected) 就是 promise.then(null, onRejected) 的语法糖。</p><p>至此，Promise 的核心部分就实现完了。</p><h2 id="3-1-7-值穿透"><a href="#3-1-7-值穿透" class="headerlink" title="3.1.7 值穿透"></a>3.1.7 值穿透</h2><p>上面提到过好几次值穿透，什么是值穿透呢？上面的 Promise.prototype.then 的实现中有这么一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Promise.prototype.then = function (onFulfilled, onRejected) &#123;</span><br><span class="line">  if ((!isFunction(onFulfilled) &amp;&amp; this.state === FULFILLED) ||</span><br><span class="line">    (!isFunction(onRejected) &amp;&amp; this.state === REJECTED)) &#123;</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>值穿透即传入 then&#x2F;catch 的参数如果不为函数，则忽略该值，返回上一个 promise 的结果。看一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">promise</span><br><span class="line">  .then(&#x27;hehe&#x27;)</span><br><span class="line">  .then(console.log)</span><br></pre></td></tr></table></figure><p>最终打印 haha 而不是 hehe。</p><p>通过 <code>return this</code> 只实现了值穿透的一种情况，其实值穿透有两种情况：</p><ol><li>promise 已经是 FULFILLED&#x2F;REJECTED 时，通过 <code>return this</code> 实现的值穿透：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Promise = require(&#x27;appoint&#x27;)</span><br><span class="line">const promise = new Promise(function (resolve) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">  promise.then().then((res) =&gt; &#123;// (1)</span><br><span class="line">    console.log(res)// haha</span><br><span class="line">  &#125;)</span><br><span class="line">  promise.catch().then((res) =&gt; &#123;// (2)</span><br><span class="line">    console.log(res)// haha</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(promise.then() === promise.catch())// true</span><br><span class="line">  console.log(promise.then(1) === promise.catch(&#123; name: &#x27;nswbmw&#x27; &#125;))// true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述代码 (1)、(2) 处 promise 已经是 FULFILLED 了符合条件所以执行了 <code>return this</code>。</p><ol><li>promise 是 PENDING 时，通过生成新的 promise 加入到父 promise 的 queue，父 promise 状态改变时调用 callFulfilled-&gt;doResolve 或 callRejected-&gt;doReject（因为 then&#x2F;catch 传入的参数不是函数）设置子 promise 的状态和值为父 promise 的状态和值。看一段代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const Promise = require(&#x27;appoint&#x27;)</span><br><span class="line">const promise = new Promise((resolve) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;haha&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">const a = promise.then()</span><br><span class="line">a.then((res) =&gt; &#123;</span><br><span class="line">  console.log(res)// haha</span><br><span class="line">&#125;)</span><br><span class="line">const b = promise.catch()</span><br><span class="line">b.then((res) =&gt; &#123;</span><br><span class="line">  console.log(res)// haha</span><br><span class="line">&#125;)</span><br><span class="line">console.log(a === b)// false</span><br></pre></td></tr></table></figure><h2 id="3-1-8-Promise-resolve-和-Promise-reject"><a href="#3-1-8-Promise-resolve-和-Promise-reject" class="headerlink" title="3.1.8 Promise.resolve 和 Promise.reject"></a>3.1.8 Promise.resolve 和 Promise.reject</h2><p>Promise.resolve 和 Promise.reject 是 Promise 的两个静态方法，用来快捷的生成一个状态为 fulfilled 或者 rejected 的 promise 实例。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve = resolve</span><br><span class="line">function resolve (value) &#123;</span><br><span class="line">  if (value instanceof this) &#123;</span><br><span class="line">    return value</span><br><span class="line">  &#125;</span><br><span class="line">  return doResolve(new this(INTERNAL), value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.reject = reject</span><br><span class="line">function reject (reason) &#123;</span><br><span class="line">  return doReject(new this(INTERNAL), reason)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 Promise.resolve 参数是一个 promise 时，直接返回该值。</p><h2 id="3-1-9-Promise-all"><a href="#3-1-9-Promise-all" class="headerlink" title="3.1.9 Promise.all"></a>3.1.9 Promise.all</h2><p>Promise.all 接收一个数组，用来并行执行一组 promise。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Promise.all = all</span><br><span class="line">function all (iterable) &#123;</span><br><span class="line">  const self = this</span><br><span class="line">  if (!isArray(iterable)) &#123;</span><br><span class="line">    return this.reject(new TypeError(&#x27;must be an array&#x27;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const len = iterable.length</span><br><span class="line">  let called = false</span><br><span class="line">  if (!len) &#123;</span><br><span class="line">    return this.resolve([])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const values = new Array(len)</span><br><span class="line">  let resolved = 0</span><br><span class="line">  let i = -1</span><br><span class="line">  const promise = new this(INTERNAL)</span><br><span class="line"></span><br><span class="line">  while (++i &lt; len) &#123;</span><br><span class="line">    allResolver(iterable[i], i)</span><br><span class="line">  &#125;</span><br><span class="line">  return promise</span><br><span class="line">  function allResolver (value, i) &#123;</span><br><span class="line">    self.resolve(value).then(resolveFromAll, function (error) &#123;</span><br><span class="line">      if (!called) &#123;</span><br><span class="line">        called = true</span><br><span class="line">        doReject(promise, error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    function resolveFromAll (outValue) &#123;</span><br><span class="line">      values[i] = outValue</span><br><span class="line">      if (++resolved === len &amp;&amp; !called) &#123;</span><br><span class="line">        called = true</span><br><span class="line">        doResolve(promise, values)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise.all 用来并行执行多个 promise&#x2F;值，当所有 promise&#x2F;值执行完毕或有一个 promise 状态变为 rejected 时返回。以上代码可以看出：</p><ol><li>Promise.all 内部生成了一个新的 promise 返回。</li><li>called 用来控制即使有多个 promise rejected 也只有第一个生效。</li><li>values 用来存储执行结果。</li><li>当最后一个 promise 状态改变后，使用 doResolve(promise, values) 设置 promise 的 state 为 FULFILLED，value 为结果数组 values。</li></ol><h2 id="3-1-10-Promise-race"><a href="#3-1-10-Promise-race" class="headerlink" title="3.1.10 Promise.race"></a>3.1.10 Promise.race</h2><p>Promise.race 接收一个数组，当数组中有一个 promise 状态发生改变（ pending -&gt; fulfilled&#x2F;rejected）时返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Promise.race = race</span><br><span class="line">function race (iterable) &#123;</span><br><span class="line">  const self = this</span><br><span class="line">  if (!isArray(iterable)) &#123;</span><br><span class="line">    return this.reject(new TypeError(&#x27;must be an array&#x27;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const len = iterable.length</span><br><span class="line">  let called = false</span><br><span class="line">  if (!len) &#123;</span><br><span class="line">    return this.resolve([])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let i = -1</span><br><span class="line">  const promise = new this(INTERNAL)</span><br><span class="line"></span><br><span class="line">  while (++i &lt; len) &#123;</span><br><span class="line">    resolver(iterable[i])</span><br><span class="line">  &#125;</span><br><span class="line">  return promise</span><br><span class="line">  function resolver (value) &#123;</span><br><span class="line">    self.resolve(value).then(function (response) &#123;</span><br><span class="line">      if (!called) &#123;</span><br><span class="line">        called = true</span><br><span class="line">        doResolve(promise, response)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, function (error) &#123;</span><br><span class="line">      if (!called) &#123;</span><br><span class="line">        called = true</span><br><span class="line">        doReject(promise, error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise.race 与 Promise.all 代码相近，只不过这里用 called 控制只要有任何一个 promise 状态改变则立即去设置返回的 promise 的状态和值。</p><p>至此，Promise 的实现全部讲解完毕。</p><h2 id="3-1-11-十道题"><a href="#3-1-11-十道题" class="headerlink" title="3.1.11 十道题"></a>3.1.11 十道题</h2><p>现在，我们以十道题巩固一下前面所学到的 Promise 的知识点。</p><h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">  resolve()</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">  console.log(3)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：Promise 构造函数是同步执行的，promise.then 中的函数是异步执行的。</p><h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const promise1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;success&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">const promise2 = promise1.then(() =&gt; &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;promise1&#x27;, promise1)</span><br><span class="line">console.log(&#x27;promise2&#x27;, promise2)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;promise1&#x27;, promise1)</span><br><span class="line">  console.log(&#x27;promise2&#x27;, promise2)</span><br><span class="line">&#125;, 2000)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promise1 Promise &#123; &lt;pending&gt; &#125;</span><br><span class="line">promise2 Promise &#123; &lt;pending&gt; &#125;</span><br><span class="line">(node:50928) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: error!!!</span><br><span class="line">(node:50928) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</span><br><span class="line">promise1 Promise &#123; &#x27;success&#x27; &#125;</span><br><span class="line">promise2 Promise &#123;</span><br><span class="line">  &lt;rejected&gt; Error: error!!!</span><br><span class="line">    at promise.then (...)</span><br><span class="line">    at &lt;anonymous&gt; &#125;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：promise 有 3 种状态：pending、fulfilled 或 rejected。状态改变只能是 pending-&gt;fulfilled 或者 pending-&gt;rejected，状态一旦改变则不能再变。上面的 promise2 并不是 promise1，而是返回的一个新的 Promise 实例。</p><h3 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  resolve(&#x27;success1&#x27;)</span><br><span class="line">  reject(&#x27;error&#x27;)</span><br><span class="line">  resolve(&#x27;success2&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;then: &#x27;, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;catch: &#x27;, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">then: success1</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：构造函数中的 resolve 或 reject 只有在第 1 次执行时有效，多次调用没有任何作用，再次印证代码二的结论：promise 状态一旦改变则不能再变。</p><p>再看两个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">  return Promise.reject(new Error(&#x27;haha&#x27;))</span><br><span class="line">&#125;)</span><br><span class="line">promise.then((res) =&gt; &#123;</span><br><span class="line">  console.log(2, res)</span><br><span class="line">&#125;).catch((err) =&gt; &#123;</span><br><span class="line">  console.error(3, err)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4)</span><br><span class="line">console.log(promise)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">Promise &#123; &lt;pending&gt; &#125;</span><br><span class="line">(node:22493) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: haha</span><br><span class="line">(node:22493) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</span><br><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">  throw new Error(&#x27;haha&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then((res) =&gt; &#123;</span><br><span class="line">  console.log(2, res)</span><br><span class="line">&#125;).catch((err) =&gt; &#123;</span><br><span class="line">  console.error(3, err)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4)</span><br><span class="line">console.log(promise)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">Promise &#123;</span><br><span class="line">  &lt;rejected&gt; Error: haha</span><br><span class="line">    at Promise (/Users/nswbmw/Desktop/test/app.js:6:9)</span><br><span class="line">    ...</span><br><span class="line">3 Error: haha</span><br><span class="line">    at Promise (/Users/nswbmw/Desktop/test/app.js:6:9)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：构造函数内只能通过调用 resolve(pending-&gt;fullfiled) 或者 reject(pending-&gt;rejected) 或者 throw 一个 error(pending-&gt;rejected) 改变状态。所以第一个例子的 promise 状态是 pending，也就不会调用 .then&#x2F;.catch。</p><h3 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(1)</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    return 2</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    return 3</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：promise 可以链式调用。提起链式调用我们通常会想到通过 return this 实现，不过 Promise 并不是这样实现的。promise 在每次调用 .then 或者 .catch 时都会返回一个新的 promise，从而可以实现链式调用。</p><h3 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;once&#x27;)</span><br><span class="line">    resolve(&#x27;success&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const start = Date.now()</span><br><span class="line">promise.then((res) =&gt; &#123;</span><br><span class="line">  console.log(res, Date.now() - start)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then((res) =&gt; &#123;</span><br><span class="line">  console.log(res, Date.now() - start)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">once</span><br><span class="line">success 1005</span><br><span class="line">success 1007</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说，promise 内部状态一经改变，并且有了一个值，则后续在每次调用 .then 或者 .catch 时都会直接拿到该值。</p><h3 id="题目六"><a href="#题目六" class="headerlink" title="题目六"></a>题目六</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve()</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    return new Error(&#x27;error!!!&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;then: &#x27;, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;catch: &#x27;, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">then: Error: error!!!</span><br><span class="line">    at Promise.resolve.then (...)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：.then 或者 .catch 中 return 一个 error 对象并不会抛出错误，所以不会被后续的 .catch 捕获，需要改成如下其中一种：</p><ol><li>return Promise.reject(new Error(‘error!!!’))</li><li>throw new Error(‘error!!!’)</li></ol><p>因为返回任意一个非 promise 的值都会被包裹成 promise 对象，即 <code>return new Error(&#39;error!!!&#39;)</code> 等价于 <code>return Promise.resolve(new Error(&#39;error!!!&#39;))</code>。</p><h3 id="题目七"><a href="#题目七" class="headerlink" title="题目七"></a>题目七</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const promise = Promise.resolve()</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    return promise</span><br><span class="line">  &#125;)</span><br><span class="line">promise.catch(console.error)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="line">    at &lt;anonymous&gt;</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:188:7)</span><br><span class="line">    at Function.Module.runMain (module.js:667:11)</span><br><span class="line">    at startup (bootstrap_node.js:187:16)</span><br><span class="line">    at bootstrap_node.js:607:3</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。类似于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(function tick () &#123;</span><br><span class="line">  console.log(&#x27;tick&#x27;)</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="题目八"><a href="#题目八" class="headerlink" title="题目八"></a>题目八</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(1)</span><br><span class="line">  .then(2)</span><br><span class="line">  .then(Promise.resolve(3))</span><br><span class="line">  .then(console.log)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。</p><h3 id="题目九"><a href="#题目九" class="headerlink" title="题目九"></a>题目九</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve()</span><br><span class="line">  .then(function success (res) &#123;</span><br><span class="line">    throw new Error(&#x27;error&#x27;)</span><br><span class="line">  &#125;, function fail1 (e) &#123;</span><br><span class="line">    console.error(&#x27;fail1: &#x27;, e)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function fail2 (e) &#123;</span><br><span class="line">    console.error(&#x27;fail2: &#x27;, e)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fail2: Error: error</span><br><span class="line">    at success (...)</span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：.then 可以接收两个参数，第 1 个是处理成功的函数，第 2 个是处理错误的函数。.catch 是 .then 第 2 个参数的简便写法，但是在用法上有一点需要注意：.then 的第 2 个处理错误的函数（fail1）捕获不了第 1 个处理成功的函数（success）抛出的错误，而后续的 .catch 方法（fail2）可以捕获之前的错误。当然，以下代码也可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve()</span><br><span class="line">  .then(function success1 (res) &#123;</span><br><span class="line">    throw new Error(&#x27;error&#x27;)</span><br><span class="line">  &#125;, function fail1 (e) &#123;</span><br><span class="line">    console.error(&#x27;fail1: &#x27;, e)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function success2 (res) &#123;</span><br><span class="line">  &#125;, function fail2 (e) &#123;</span><br><span class="line">    console.error(&#x27;fail2: &#x27;, e)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="题目十"><a href="#题目十" class="headerlink" title="题目十"></a>题目十</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve()</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;then&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">process.nextTick(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;nextTick&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setImmediate&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#x27;end&#x27;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">end</span><br><span class="line">nextTick</span><br><span class="line">then</span><br><span class="line">setImmediate</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：process.nextTick 和 promise.then 都属于 microtask（但 process.nextTick 的优先级大于 promise.then），而 setImmediate 属于 macrotask，在事件循环的 check 阶段执行。事件循环的每个阶段（macrotask）之间都会执行 microtask，以上代码本身（macrotask）在执行完后会执行一次 microtask。</p><h2 id="3-1-12-参考链接"><a href="#3-1-12-参考链接" class="headerlink" title="3.1.12 参考链接"></a>3.1.12 参考链接</h2><ul><li><a href="http://es6.ruanyifeng.com/#docs/promise">http://es6.ruanyifeng.com/#docs/promise</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li><li><a href="https://promisesaplus.com/">https://promisesaplus.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 2.4 Cpu-memory monitor</title>
      <link href="/2019/04/18/2.4.1%20%E4%BD%BF%E7%94%A8%20cpu-memory-monitor/"/>
      <url>/2019/04/18/2.4.1%20%E4%BD%BF%E7%94%A8%20cpu-memory-monitor/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>前面介绍了 heapdump 和 memwatch-next 的用法，但在实际使用时并不那么方便，我们总不能一直盯着服务器的状况，在发现内存持续增长并超过心里的阈值时，再手动去触发 Core Dump 吧？在大多数情况下发现问题时，就已经错过了现场。所以，我们可能需要 <a href="https://github.com/nswbmw/cpu-memory-monitor">cpu-memory-monitor</a>。顾名思义，这个模块可以用来监控 CPU 和 Memory 的使用情况，并可以根据配置策略自动 dump CPU 的使用情况（cpuprofile）和内存快照（heapsnapshot）。</p><h2 id="2-4-1-使用-cpu-memory-monitor"><a href="#2-4-1-使用-cpu-memory-monitor" class="headerlink" title="2.4.1 使用 cpu-memory-monitor"></a>2.4.1 使用 cpu-memory-monitor</h2><p>我们先来看看如何使用 cpu-memory-monitor，其实很简单，只需在进程启动的入口文件中引入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;cpu-memory-monitor&#x27;)(&#123;</span><br><span class="line">  cpu: &#123;</span><br><span class="line">    interval: 1000,</span><br><span class="line">    duration: 30000,</span><br><span class="line">    threshold: 60,</span><br><span class="line">    profileDir: &#x27;/tmp&#x27;,</span><br><span class="line">    counter: 3,</span><br><span class="line">    limiter: [5, &#x27;hour&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>上述代码的作用是</strong>：每 <strong>1000ms</strong>(interval)检查一次 CPU 的使用情况，如果发现连续 <strong>3</strong>(counter)次 CPU 使用率大于 <strong>60%</strong>(threshold)，则 dump <strong>30000ms</strong>(duration) CPU 的使用情况，生成 <code>cpu-$&#123;process.pid&#125;-$&#123;Date.now()&#125;.cpuprofile</code> 到 <strong>&#x2F;tmp</strong>(profileDir) 目录下，<strong>1</strong>(limiter[1]) 小时最多 dump <strong>5</strong>(limiter[0]) 次。</p><p>以上是自动 dump CPU 使用情况的策略。dump Memory 使用情况的策略同理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;cpu-memory-monitor&#x27;)(&#123;</span><br><span class="line">  memory: &#123;</span><br><span class="line">    interval: 1000,</span><br><span class="line">    threshold: &#x27;1.2gb&#x27;,</span><br><span class="line">    profileDir: &#x27;/tmp&#x27;,</span><br><span class="line">    counter: 3,</span><br><span class="line">    limiter: [3, &#x27;hour&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>上述代码的作用是</strong>：每 <strong>1000ms</strong>(interval) 检查一次 Memory 的使用情况，如果发现连续 <strong>3</strong>(counter) 次 Memory 大于 <strong>1.2gb</strong>(threshold)，则 dump 一次 Memory，生成 <code>memory-$&#123;process.pid&#125;-$&#123;Date.now()&#125;.heapsnapshot</code> 到 <strong>&#x2F;tmp</strong>(profileDir) 目录下，<strong>1</strong>(limiter[1]) 小时最多 dump <strong>3</strong>(limiter[0]) 次。</p><p><strong>注意</strong>：memory 的配置没有 duration 参数，因为 Memroy 的 dump 只是某一时刻的，而不是一段时间的。</p><p>聪明的你肯定会问了：能不能将 cpu 和 memory 配置一块使用？比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;cpu-memory-monitor&#x27;)(&#123;</span><br><span class="line">  cpu: &#123;</span><br><span class="line">    interval: 1000,</span><br><span class="line">    duration: 30000,</span><br><span class="line">    threshold: 60,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  memory: &#123;</span><br><span class="line">    interval: 10000,</span><br><span class="line">    threshold: &#x27;1.2gb&#x27;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>答案是：可以，但不要这么做。因为这样做可能会出现这种情况：内存高了且达到设定的阈值 -&gt; 触发 Memory Dump&#x2F;GC -&gt; 导致 CPU 使用率高且达到设定的阈值 -&gt; 触发 CPU Dump -&gt; 导致堆积的请求越来越多（比如内存中堆积了很多 SQL 查询）-&gt; 触发 Memory Dump -&gt; 导致雪崩。</p><p>通常情况下，只使用其中一种就可以了。</p><h2 id="2-4-2-源码解读"><a href="#2-4-2-源码解读" class="headerlink" title="2.4.2 源码解读"></a>2.4.2 源码解读</h2><p>cpu-memory-monitor 的源代码不过百余行，大体逻辑如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">const processing = &#123;</span><br><span class="line">  cpu: false,</span><br><span class="line">  memory: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const counter = &#123;</span><br><span class="line">  cpu: 0,</span><br><span class="line">  memory: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function dumpCpu(cpuProfileDir, cpuDuration) &#123; ... &#125;</span><br><span class="line">function dumpMemory(memProfileDir) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">module.exports = function cpuMemoryMonitor(options = &#123;&#125;) &#123;</span><br><span class="line">  ...</span><br><span class="line">  if (options.cpu) &#123;</span><br><span class="line">    const cpuTimer = setInterval(() =&gt; &#123;</span><br><span class="line">      if (processing.cpu) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      pusage.stat(process.pid, (err, stat) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">          clearInterval(cpuTimer)</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        if (stat.cpu &gt; cpuThreshold) &#123;</span><br><span class="line">          counter.cpu += 1</span><br><span class="line">          if (counter.cpu &gt;= cpuCounter) &#123;</span><br><span class="line">            memLimiter.removeTokens(1, (limiterErr, remaining) =&gt; &#123;</span><br><span class="line">              if (limiterErr) &#123;</span><br><span class="line">                return</span><br><span class="line">              &#125;</span><br><span class="line">              if (remaining &gt; -1) &#123;</span><br><span class="line">                dumpCpu(cpuProfileDir, cpuDuration)</span><br><span class="line">                counter.cpu = 0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            counter.cpu = 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, cpuInterval)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (options.memory) &#123;</span><br><span class="line">    ...</span><br><span class="line">    memwatch.on(&#x27;leak&#x27;, () =&gt; &#123;</span><br><span class="line">      dumpMemory(...)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：cpu-memory-monitor 没有用到什么新鲜的东西，还是之前讲解过的 v8-profiler、heapdump、memwatch-next 的组合使用而已。</p><p>有以下几点需要注意：</p><ol><li>只有传入了 cpu 或者 memory 的配置，才会去监听相应的 CPU 或者 Memory。</li><li>在传入 memory 配置时，因为用 memwatch-next 额外监听了 leak 事件，也会 dump Memory，格式是 <code>leak-memory-$&#123;process.pid&#125;-$&#123;Date.now()&#125;.heapsnapshot</code>。</li><li>顶部引入了 heapdump，所以即使没有 memory 配置，也可以通过 <code>kill -USR2 &lt;PID&gt;</code> 手动触发 Memory Dump。</li></ol><h2 id="2-4-3-参考链接"><a href="#2-4-3-参考链接" class="headerlink" title="2.4.3 参考链接"></a>2.4.3 参考链接</h2><ul><li><a href="https://github.com/node-inspector/v8-profiler">https://github.com/node-inspector/v8-profiler</a></li><li><a href="https://github.com/bnoordhuis/node-heapdump">https://github.com/bnoordhuis/node-heapdump</a></li><li><a href="https://github.com/marcominetti/node-memwatch">https://github.com/marcominetti/node-memwatch</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 2.3 How to use memwatch-next</title>
      <link href="/2019/04/13/2.3.1%20%E4%BD%BF%E7%94%A8%20memwatch-next/"/>
      <url>/2019/04/13/2.3.1%20%E4%BD%BF%E7%94%A8%20memwatch-next/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p><a href="https://github.com/marcominetti/node-memwatch">memwatch-next</a>（以下简称 memwatch）是一个用来监测 Node.js 的内存泄漏和堆信息比较的模块。下面我们以一段事件监听器导致内存泄漏的代码为例，讲解如何使用 memwatch。</p><h2 id="2-3-1-使用-memwatch-next"><a href="#2-3-1-使用-memwatch-next" class="headerlink" title="2.3.1 使用 memwatch-next"></a>2.3.1 使用 memwatch-next</h2><p>测试代码如下：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let count = 1</span><br><span class="line">const memwatch = require(&#x27;memwatch-next&#x27;)</span><br><span class="line">memwatch.on(&#x27;stats&#x27;, (stats) =&gt; &#123; </span><br><span class="line">  console.log(count++, stats)</span><br><span class="line">&#125;)</span><br><span class="line">memwatch.on(&#x27;leak&#x27;, (info) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;---&#x27;)</span><br><span class="line">  console.log(info)</span><br><span class="line">  console.log(&#x27;---&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123;</span><br><span class="line">  for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">    server.on(&#x27;request&#x27;, function leakEventCallback() &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.end(&#x27;Hello World&#x27;)</span><br><span class="line">  global.gc()</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure><p>在每个请求到来时，在 server 上注册 10000 个 request 事件的监听函数（大量的事件监听函数存储到内存中，从而造成了内存泄漏），然后手动触发一次 GC。</p><p>运行该程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node --expose-gc app.js</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里添加 –expose-gc 参数启动程序，这样我们才可以在程序中手动触发 GC。</p><p>memwatch 监听以下两个事件：</p><ol><li><p>stats：GC 事件，每执行一次 GC，都会触发该函数，打印 heap 相关的信息。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  num_full_gc: 1,// 完整的垃圾回收次数</span><br><span class="line">  num_inc_gc: 1,// 增长的垃圾回收次数</span><br><span class="line">  heap_compactions: 1,// 内存压缩次数</span><br><span class="line">  usage_trend: 0,// 使用趋势</span><br><span class="line">  estimated_base: 5350136,// 预期基数</span><br><span class="line">  current_base: 5350136,// 当前基数</span><br><span class="line">  min: 0,// 最小值</span><br><span class="line">  max: 0// 最大值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>leak：可疑的内存泄露事件，触发该事件的条件是：内存在连续 5 次 GC 后都是增长的。打印如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  growth: 4051464,</span><br><span class="line">  reason: &#x27;heap growth over 5 consecutive GCs (2s) - -2147483648 bytes/hr&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ab -c 1 -n 5 http://localhost:3000/</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(node:20989) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 request listeners added. Use emitter.setMaxListeners() to increase limit</span><br><span class="line">1 &#123; num_full_gc: 1,</span><br><span class="line">  num_inc_gc: 1,</span><br><span class="line">  heap_compactions: 1,</span><br><span class="line">  usage_trend: 0,</span><br><span class="line">  estimated_base: 5720064,</span><br><span class="line">  current_base: 5720064,</span><br><span class="line">  min: 0,</span><br><span class="line">  max: 0 &#125;</span><br><span class="line">2 &#123; num_full_gc: 2,</span><br><span class="line">  num_inc_gc: 1,</span><br><span class="line">  heap_compactions: 2,</span><br><span class="line">  usage_trend: 0,</span><br><span class="line">  estimated_base: 7073824,</span><br><span class="line">  current_base: 7073824,</span><br><span class="line">  min: 0,</span><br><span class="line">  max: 0 &#125;</span><br><span class="line">3 &#123; num_full_gc: 3,</span><br><span class="line">  num_inc_gc: 1,</span><br><span class="line">  heap_compactions: 3,</span><br><span class="line">  usage_trend: 0,</span><br><span class="line">  estimated_base: 7826368,</span><br><span class="line">  current_base: 7826368,</span><br><span class="line">  min: 7826368,</span><br><span class="line">  max: 7826368 &#125;</span><br><span class="line">4 &#123; num_full_gc: 4,</span><br><span class="line">  num_inc_gc: 1,</span><br><span class="line">  heap_compactions: 4,</span><br><span class="line">  usage_trend: 0,</span><br><span class="line">  estimated_base: 8964784,</span><br><span class="line">  current_base: 8964784,</span><br><span class="line">  min: 7826368,</span><br><span class="line">  max: 8964784 &#125;</span><br><span class="line">---</span><br><span class="line">&#123; growth: 3820272,</span><br><span class="line">  reason: &#x27;heap growth over 5 consecutive GCs (0s) - -2147483648 bytes/hr&#x27; &#125;</span><br><span class="line">---</span><br><span class="line">5 &#123; num_full_gc: 5,</span><br><span class="line">  num_inc_gc: 1,</span><br><span class="line">  heap_compactions: 5,</span><br><span class="line">  usage_trend: 0,</span><br><span class="line">  estimated_base: 9540336,</span><br><span class="line">  current_base: 9540336,</span><br><span class="line">  min: 7826368,</span><br><span class="line">  max: 9540336 &#125;</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：Node.js 已经警告我们事件监听器超过了 11 个，可能造成内存泄露。连续 5 次内存增长触发 leak 事件打印出增长了多少内存（bytes）和预估每小时增长多少 bytes。</p><h2 id="2-3-2-Heap-Diffing"><a href="#2-3-2-Heap-Diffing" class="headerlink" title="2.3.2 Heap Diffing"></a>2.3.2 Heap Diffing</h2><p>memwatch 有一个 HeapDiff 函数，用来对比并计算出两次堆快照的差异。修改测试代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const memwatch = require(&#x27;memwatch-next&#x27;)</span><br><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123;</span><br><span class="line">  for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">    server.on(&#x27;request&#x27;, function leakEventCallback() &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.end(&#x27;Hello World&#x27;)</span><br><span class="line">  global.gc()</span><br><span class="line">&#125;).listen(3000)</span><br><span class="line"></span><br><span class="line">const hd = new memwatch.HeapDiff()</span><br><span class="line">memwatch.on(&#x27;leak&#x27;, (info) =&gt; &#123;</span><br><span class="line">  const diff = hd.end()</span><br><span class="line">  console.dir(diff, &#123; depth: 10 &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行这段代码并执行同样的 ab 命令，打印如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123; before: &#123; nodes: 35727, size_bytes: 4725128, size: &#x27;4.51 mb&#x27; &#125;,</span><br><span class="line">  after: &#123; nodes: 87329, size_bytes: 8929792, size: &#x27;8.52 mb&#x27; &#125;,</span><br><span class="line">  change:</span><br><span class="line">   &#123; size_bytes: 4204664,</span><br><span class="line">     size: &#x27;4.01 mb&#x27;,</span><br><span class="line">     freed_nodes: 862,</span><br><span class="line">     allocated_nodes: 52464,</span><br><span class="line">     details:</span><br><span class="line">      [ ...</span><br><span class="line">        &#123; what: &#x27;Array&#x27;,</span><br><span class="line">          size_bytes: 530200,</span><br><span class="line">          size: &#x27;517.77 kb&#x27;,</span><br><span class="line">          &#x27;+&#x27;: 1023,</span><br><span class="line">          &#x27;-&#x27;: 510 &#125;,</span><br><span class="line">        &#123; what: &#x27;Closure&#x27;,</span><br><span class="line">          size_bytes: 3599856,</span><br><span class="line">          size: &#x27;3.43 mb&#x27;,</span><br><span class="line">          &#x27;+&#x27;: 50001,</span><br><span class="line">          &#x27;-&#x27;: 3 &#125;,</span><br><span class="line">        ...</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：内存由 4.51mb 涨到了 8.52mb，其中 Closure 和 Array 涨了绝大部分，而我们知道注册事件监听函数的本质就是将事件函数（Closure）push 到相应的数组（Array）里。</p><h2 id="2-3-3-结合-heapdump"><a href="#2-3-3-结合-heapdump" class="headerlink" title="2.3.3 结合 heapdump"></a>2.3.3 结合 heapdump</h2><p>memwatch 在结合 heapdump 使用时才能发挥更好的作用。通常用 memwatch 监测到内存泄漏，用 heapdump 导出多份堆快照，然后用 Chrome DevTools 分析和比较，定位内存泄漏的元凶。</p><p>修改代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const memwatch = require(&#x27;memwatch-next&#x27;)</span><br><span class="line">const heapdump = require(&#x27;heapdump&#x27;)</span><br><span class="line"></span><br><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123;</span><br><span class="line">  for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">    server.on(&#x27;request&#x27;, function leakEventCallback() &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.end(&#x27;Hello World&#x27;)</span><br><span class="line">  global.gc()</span><br><span class="line">&#125;).listen(3000)</span><br><span class="line"></span><br><span class="line">dump()</span><br><span class="line">memwatch.on(&#x27;leak&#x27;, () =&gt; &#123;</span><br><span class="line">  dump()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function dump() &#123;</span><br><span class="line">  const filename = `$&#123;__dirname&#125;/heapdump-$&#123;process.pid&#125;-$&#123;Date.now()&#125;.heapsnapshot`</span><br><span class="line"></span><br><span class="line">  heapdump.writeSnapshot(filename, () =&gt; &#123;</span><br><span class="line">    console.log(`$&#123;filename&#125; dump completed.`)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序在启动后先执行一次 heap dump，当触发 leak 事件时再执行一次 heap dump。运行这段代码并执行同样的 ab 命令，生成两个 heapsnapshot 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heapdump-21126-1519545957879.heapsnapshot</span><br><span class="line">heapdump-21126-1519545975702.heapsnapshot</span><br></pre></td></tr></table></figure><p>用 Chrome DevTools 加载这两个 heapsnapshot 文件，选择 comparison 比较视图，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/2.3.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/2.3.1.png" alt="img"></a></p><p><strong>可以看出</strong>：增加了 5 万个 leakEventCallback 函数，单击其中任意一个，可以从 Retainers 中看到更详细的信息，例如 GC path 和所在的文件等信息。</p><h2 id="2-3-4-参考链接"><a href="#2-3-4-参考链接" class="headerlink" title="2.3.4 参考链接"></a>2.3.4 参考链接</h2><ul><li><a href="https://github.com/marcominetti/node-memwatch">https://github.com/marcominetti/node-memwatch</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 2.2 About heapdump</title>
      <link href="/2019/04/12/2.2.1%20%E4%BD%BF%E7%94%A8%20heapdump/"/>
      <url>/2019/04/12/2.2.1%20%E4%BD%BF%E7%94%A8%20heapdump/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p><a href="https://github.com/bnoordhuis/node-heapdump">heapdump</a> 是一个 dump V8 堆信息的工具。<a href="https://github.com/node-inspector/v8-profiler">v8-profiler</a> 也包含了这个功能，这两个工具的原理都是一致的，都是 v8::Isolate::GetCurrent()-&gt;GetHeapProfiler()-&gt;TakeHeapSnapshot(title, control)，但是 heapdump 的使用简单些。下面我们以 heapdump 为例讲解如何分析 Node.js 的内存泄漏。</p><h2 id="2-2-1-使用-heapdump"><a href="#2-2-1-使用-heapdump" class="headerlink" title="2.2.1 使用 heapdump"></a>2.2.1 使用 heapdump</h2><p>这里以一段经典的内存泄漏代码作为测试代码：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const heapdump = require(&#x27;heapdump&#x27;)</span><br><span class="line">let leakObject = null</span><br><span class="line">let count = 0</span><br><span class="line"></span><br><span class="line">setInterval(function testMemoryLeak() &#123;</span><br><span class="line">  const originLeakObject = leakObject</span><br><span class="line">  const unused = function () &#123;</span><br><span class="line">    if (originLeakObject) &#123;</span><br><span class="line">      console.log(&#x27;originLeakObject&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  leakObject = &#123;</span><br><span class="line">    count: String(count++),</span><br><span class="line">    leakStr: new Array(1e7).join(&#x27;*&#x27;),</span><br><span class="line">    leakMethod: function () &#123;</span><br><span class="line">      console.log(&#x27;leakMessage&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><p>为什么这段程序会发生内存泄漏呢？首先我们要明白闭包的原理：<strong>同一个函数内部的闭包作用域只有一个，所有闭包共享。在执行函数的时候，如果遇到闭包，则会创建闭包作用域的内存空间，将该闭包所用到的局部变量添加进去，然后再遇到闭包时，会在之前创建好的作用域空间添加此闭包会用到而前闭包没用到的变量。函数结束时，会清除没有被闭包作用域引用的变量。</strong></p><p><strong>这段代码内存泄露原因是</strong>：在 testMemoryLeak 函数内有两个闭包：unused 和 leakMethod。unused 这个闭包引用了父作用域中的 originLeakObject 变量，如果没有后面的 leakMethod，则会在函数结束后被清除，闭包作用域也跟着被清除了。因为后面的 leakObject 是全局变量，即 leakMethod 是全局变量，它引用的闭包作用域（包含了 unused 所引用的 originLeakObject）不会释放。而随着 testMemoryLeak 不断的调用，originLeakObject 指向前一次的 leakObject，下次的 leakObject.leakMethod 又会引用之前的 originLeakObject，从而形成一个闭包引用链，而 leakStr 是一个大字符串，得不到释放，从而造成了内存泄漏。</p><p><strong>解决方法</strong>：在 testMemoryLeak 函数内部的最后添加 <code>originLeakObject = null</code> 即可。</p><p>运行测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app</span><br></pre></td></tr></table></figure><p>然后先后执行<strong>两</strong>次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kill -USR2 `pgrep -n node`</span><br></pre></td></tr></table></figure><p>在当前目录下生成了两个 heapsnapshot 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heapdump-100427359.61348.heapsnapshot</span><br><span class="line">heapdump-100438986.797085.heapsnapshot</span><br></pre></td></tr></table></figure><h2 id="2-2-2-Chrome-DevTools"><a href="#2-2-2-Chrome-DevTools" class="headerlink" title="2.2.2 Chrome DevTools"></a>2.2.2 Chrome DevTools</h2><p>我们使用 Chrome DevTools 来分析前面生成的 heapsnapshot 文件。调出 Chrome DevTools -&gt; Memory -&gt; Load，按顺序依次加载前面生成的 heapsnapshot 文件。单击第 2 个堆快照，在左上角有个下拉菜单，有如下 4 个选项：</p><ol><li>Summary：以构造函数名分类显示。</li><li>Comparison：比较多个快照之间的差异。</li><li>Containment：查看整个 GC 路径。</li><li>Statistics：以饼状图显示内存占用信息。</li></ol><p>通常我们只会用前两个选项；第 3 个选项一般用不到，因为在展开 Summary 和 Comparison 中的每一项时，都可以看到从 GC roots 到这个对象的路径；第 4 个选项只能看到内存占用比，如下图所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/2.2.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/2.2.1.png" alt="img"></a></p><p>切换到 Summary 页，可以看到有如下 5 个属性：</p><ol><li>Contructor：构造函数名，例如 Object、Module、Socket，(array)、(string)、(regexp) 等加了括号的分别代表内置的 Array、String 和 Regexp。</li><li>Distance：到 GC roots （GC 根对象）的距离。GC 根对象在浏览器中一般是 window 对象，在 Node.js 中是 global 对象，距离越大，则说明引用越深。</li><li>Objects Count：对象个数。</li><li>Shallow Size：对象自身的大小，不包括它引用的对象。</li><li>Retained Size：对象自身的大小和它引用的对象的大小，即该对象被 GC 之后所能回收的内存大小。</li></ol><p><strong>小提示</strong>：一个对象的 Retained Size &#x3D; 该对象的 Shallow Size + 该对象支配树上其子节点的 Retained Size 之和。Shallow Size &#x3D;&#x3D; Retained Size 的有 (boolean)、(number)、(string)，它们无法引用其他值，并且始终是叶子节点。</p><p>单击 Retained Size 选择降序展示，可以看到 (closure) 这一项引用的内容达到 98%，继续展开如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/2.2.2.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/2.2.2.png" alt="img"></a></p><p><strong>可以看出</strong>：一个 leakStr 占了 8% 的内存，而 leakMethod 引用了 81% 的内存。对象保留树（Retainers，老版本 Chrome 中叫 Object’s retaining tree）展示了对象的 GC path，单击如上图中的 leakStr（Distance 是 13），Retainers 会自动展开，Distance 从 13 递减到 1。</p><p>继续展开 leakMethod，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/2.2.3.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/2.2.3.png" alt="img"></a></p><p><strong>可以看出</strong>：有一个 count&#x3D;”10” 的 originLeakObject 的 leakMethod 函数的 context（即上下文） 引用了一个 count&#x3D;”9” 的 originLeakObject 对象，而这个 originLeakObject 对象的 leakMethod 函数的 context 又引用了 count&#x3D;”8” 的 originLeakObject 对象，以此类推。而每个 originLeakObject 对象上都有一个大字符串 leakStr（占用 8% 的内存），从而造成内存泄漏，符合我们之前的推断。</p><p><strong>小提示</strong>：如果背景色是黄色的，则表示这个对象在 JavaScript 中还存在引用，所以可能没有被清除。如果背景色是红色的，则表示这个对象在 JavaScript 中不存在引用，但是依然存活在内存中，一般常见于 DOM 对象，它们存放的位置和 JavaScript 中的对象还是有不同的，在 Node.js 中很少遇见。</p><h2 id="2-2-3-对比快照"><a href="#2-2-3-对比快照" class="headerlink" title="2.2.3 对比快照"></a>2.2.3 对比快照</h2><p>切换到 Comparison 视图下，可以看到 #New、#Deleted、#Delta 等属性，+ 和 - 表示相对于比较的堆快照而言。我们对比第 2 个快照和第 1 个快照，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/2.2.4.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/2.2.4.png" alt="img"></a></p><p><strong>可以看出</strong>：(string) 增加了 10 个，每个 string 大小为 10000024 字节。</p><h2 id="2-2-4-参考链接"><a href="#2-2-4-参考链接" class="headerlink" title="2.2.4 参考链接"></a>2.2.4 参考链接</h2><ul><li><a href="https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156">https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156</a></li><li><a href="https://www.zhihu.com/question/56806069">https://www.zhihu.com/question/56806069</a></li><li><a href="http://taobaofed.org/blog/2016/04/15/how-to-find-memory-leak/">http://taobaofed.org/blog/2016/04/15/how-to-find-memory-leak/</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101">https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 2.1 Core &amp; Core Dump</title>
      <link href="/2019/04/07/2.1.1%20Core%20&amp;%20Core%20Dump/"/>
      <url>/2019/04/07/2.1.1%20Core%20&amp;%20Core%20Dump/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><h2 id="2-1-1-Core-amp-Core-Dump"><a href="#2-1-1-Core-amp-Core-Dump" class="headerlink" title="2.1.1 Core &amp; Core Dump"></a>2.1.1 Core &amp; Core Dump</h2><p>在开始之前，我们先了解下什么是 Core 和 Core Dump。</p><p><strong>什么是 Core?</strong></p><blockquote><p>在使用半导体作为内存材料前，人类用线圈作为内存的材料，线圈就叫作 core ，用线圈做的内存就叫作 core memory。如今，半导体工业蓬勃发展，已经没有人用 core memory 了，不过在许多情况下，人们还是把记忆体叫作 core 。</p></blockquote><p><strong>什么是 Core Dump?</strong></p><blockquote><p>当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫作 Core Dump（中文翻译成 “核心转储”)。我们可以认为 Core Dump 是 “内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时 dump 下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。Core Dump 对于编程人员诊断和调试程序是非常有帮助的，因为有些程序中的错误是很难重现的，例如指针异常，而 Core Dump 文件可以再现程序出错时的情景。</p></blockquote><p><strong>测试环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux nswbmw-VirtualBox 4.13.0-36-generic #40~16.04.1-Ubuntu SMP Fri Feb 16 23:25:58 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p><strong>开启 Core Dump</strong></p><p>在终端中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -c</span><br></pre></td></tr></table></figure><p>查看允许 Core Dump 生成的文件的大小，如果是 0 则表示关闭了 Core Dump。使用以下命令开启 Core Dump，并且不限制 Core Dump 生成的文件大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -c unlimited</span><br></pre></td></tr></table></figure><p>以上命令只在当前终端环境下有效，如果想永久生效，就需要修改 &#x2F;etc&#x2F;security&#x2F;limits.conf 文件，如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/2.1.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/2.1.1.png" alt="img"></a></p><h2 id="2-1-2-gcore"><a href="#2-1-2-gcore" class="headerlink" title="2.1.2 gcore"></a>2.1.2 <a href="http://man7.org/linux/man-pages/man1/gcore.1.html">gcore</a></h2><p>使用 gcore 可以不重启程序而 dump 出特定进程的 core 文件。gcore 使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcore [-o filename] pid</span><br></pre></td></tr></table></figure><p>在 Core Dump 时，默认会在执行 gcore 命令的目录生成 core.<PID> 文件。</p><h2 id="2-1-3-llnode"><a href="#2-1-3-llnode" class="headerlink" title="2.1.3 llnode"></a>2.1.3 llnode</h2><p>什么是 llnode？</p><blockquote><p>Node.js v4.x+ C++ plugin for <a href="http://lldb.llvm.org/">LLDB</a> - a next generation, high-performance debugger.</p></blockquote><p>什么是 LLDB？</p><blockquote><p>LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.</p></blockquote><p>安装 llnode + lldb：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"># Clone llnode</span><br><span class="line">$ git clone https://github.com/nodejs/llnode.git ~/llnode &amp;&amp; cd ~/llnode</span><br><span class="line"></span><br><span class="line"># Install lldb and headers</span><br><span class="line">$ sudo apt-get install lldb-4.0 liblldb-4.0-dev</span><br><span class="line"></span><br><span class="line"># Initialize GYP</span><br><span class="line">$ git clone https://github.com/bnoordhuis/gyp.git tools/gyp</span><br><span class="line"></span><br><span class="line"># Configure</span><br><span class="line">$ ./gyp_llnode -Dlldb_dir=/usr/lib/llvm-4.0/</span><br><span class="line"></span><br><span class="line"># Build</span><br><span class="line">$ make -C out/ -j9</span><br><span class="line"></span><br><span class="line"># Install</span><br><span class="line">$ sudo make install-linux</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果 <code>sudo apt-get update</code> 遇到这种错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">W: GPG error: xxx stable Release: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 6DA62DE462C7DA6D</span><br></pre></td></tr></table></figure><p>可以用以下命令解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6DA62DE462C7DA6D</span><br></pre></td></tr></table></figure><p>–recv-keys 后面跟的是前面报错提示的 PUBKEY。</p><h2 id="2-1-4-测试-Core-Dump"><a href="#2-1-4-测试-Core-Dump" class="headerlink" title="2.1.4 测试 Core Dump"></a>2.1.4 测试 Core Dump</h2><p>下面用一个典型的全局变量缓存导致的内存泄漏的例子来测试 llnode 的用法。代码如下：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const leaks = []</span><br><span class="line"></span><br><span class="line">function LeakingClass() &#123;</span><br><span class="line">  this.name = Math.random().toString(36)</span><br><span class="line">  this.age = Math.floor(Math.random() * 100)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">  for (let i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">    leaks.push(new LeakingClass)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.warn(&#x27;Leaks: %d&#x27;, leaks.length)</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><p>运行该程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br></pre></td></tr></table></figure><p>等待几秒，打开另一个终端运行 gcore：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -c unlimited</span><br><span class="line">$ sudo gcore `pgrep -n node`</span><br></pre></td></tr></table></figure><p>生成 core.2763 文件。</p><h2 id="2-1-5-分析-Core-文件"><a href="#2-1-5-分析-Core-文件" class="headerlink" title="2.1.5 分析 Core 文件"></a>2.1.5 分析 Core 文件</h2><p>使用 lldb 加载刚才生成的 Core 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lldb-4.0 -c ./core.2763 </span><br><span class="line">(lldb) target create --core &quot;./core.2763&quot;</span><br><span class="line">Core file &#x27;/home/nswbmw/test/./core.2763&#x27; (x86_64) was loaded.</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure><p>输入 v8 查看使用文档，有以下几条命令：</p><ul><li>bt</li><li>findjsinstances</li><li>findjsobjects</li><li>findrefs</li><li>inspect</li><li>nodeinfo</li><li>print</li><li>source</li></ul><p>运行 <code>v8 findjsobjects</code> 查看所有对象实例及总共占内存大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) v8 findjsobjects</span><br><span class="line"> Instances  Total Size Name</span><br><span class="line"> ---------- ---------- ----</span><br><span class="line">       ...</span><br><span class="line">       2100      84000 LeakingClass</span><br><span class="line">       8834      39792 (String)</span><br><span class="line"> ---------- ---------- </span><br><span class="line">      12088     181320 </span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：LeakingClass 有 2100 个实例，占内存 84000 byte。使用 <code>v8 findjsinstances</code> 查看所有 LeakingClass 实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) v8 findjsinstances LeakingClass</span><br><span class="line">0x000022aaa118ab19:&lt;Object: LeakingClass&gt;</span><br><span class="line">0x000022aaa118acf9:&lt;Object: LeakingClass&gt;</span><br><span class="line">0x000022aaa118ade1:&lt;Object: LeakingClass&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 <code>v8 i</code> 检索实例的具体内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(lldb) v8 i 0x000022aaa118ab19</span><br><span class="line">0x000022aaa118ab19:&lt;Object: LeakingClass properties &#123;</span><br><span class="line">    .name=0x000022aaa118ab91:&lt;String: &quot;0.4tx00cipe8&quot;&gt;,</span><br><span class="line">    .age=&lt;Smi: 71&gt;&#125;&gt;</span><br><span class="line">(lldb) v8 i 0x000022aaa118acf9</span><br><span class="line">0x000022aaa118acf9:&lt;Object: LeakingClass properties &#123;</span><br><span class="line">    .name=0x000022aaa118ad71:&lt;String: &quot;0.48563ixsblf&quot;&gt;,</span><br><span class="line">    .age=&lt;Smi: 70&gt;&#125;&gt;</span><br><span class="line">(lldb) v8 i 0x000022aaa118ade1</span><br><span class="line">0x000022aaa118ade1:&lt;Object: LeakingClass properties &#123;</span><br><span class="line">    .name=0x000022aaa118ae59:&lt;String: &quot;0.w1nel407zj&quot;&gt;,</span><br><span class="line">    .age=&lt;Smi: 80&gt;&#125;&gt;</span><br></pre></td></tr></table></figure><p>可以看到每个 LeakingClass 实例的 name 和 age 字段的值。</p><p>使用 <code>v8 findrefs</code> 查看引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(lldb) v8 findrefs 0x000022aaa118ab19</span><br><span class="line">0x22aaa1189729: (Array)[0]=0x22aaa118ab19</span><br><span class="line">(lldb) v8 i 0x22aaa1189729</span><br><span class="line">0x000022aaa1189729:&lt;Array: length=2100 &#123;</span><br><span class="line">    [0]=0x000022aaa118ab19:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [1]=0x000022aaa118acf9:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [2]=0x000022aaa118ade1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [3]=0x000022aaa118aea1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [4]=0x000022aaa118af61:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [5]=0x000022aaa118b021:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [6]=0x000022aaa118b0e1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [7]=0x000022aaa118b1a1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [8]=0x000022aaa118b221:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [9]=0x000022aaa118b2a1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [10]=0x000022aaa118b321:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [11]=0x000022aaa118b3a1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [12]=0x000022aaa118b421:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [13]=0x000022aaa118b4a1:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [14]=0x000022aaa118b521:&lt;Object: LeakingClass&gt;,</span><br><span class="line">    [15]=0x000022aaa118b5a1:&lt;Object: LeakingClass&gt;&#125;&gt;</span><br></pre></td></tr></table></figure><p><strong>可以看出</strong>：通过一个 LeakingClass 实例的内存地址，我们使用 <code>v8 findrefs</code> 找到了引用它的数组的内存地址，然后通过这个地址去检索数组，得到这个数组长度为 2100，每一项都是一个 LeakingClass 实例，这不就是我们代码中的 leaks 数组吗？</p><p><strong>小提示</strong>: <code>v8 i</code> 是 <code>v8 inspect</code> 的缩写，<code>v8 p</code> 是 <code>v8 print</code> 的缩写。</p><h2 id="2-1-6-–abort-on-uncaught-exception"><a href="#2-1-6-–abort-on-uncaught-exception" class="headerlink" title="2.1.6 –abort-on-uncaught-exception"></a>2.1.6 –abort-on-uncaught-exception</h2><p>在 Node.js 程序启动时添加 –abort-on-uncaught-exception 参数，当程序 crash 的时候，会自动 Core Dump，方便 “死后验尸”。</p><p>添加 –abort-on-uncaught-exception 参数，启动测试程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -c unlimited</span><br><span class="line">$ node --abort-on-uncaught-exception app.js</span><br></pre></td></tr></table></figure><p>启动另外一个终端运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kill -BUS `pgrep -n node`</span><br></pre></td></tr></table></figure><p>第 1 个终端会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Leaks: 100</span><br><span class="line">Leaks: 200</span><br><span class="line">Leaks: 300</span><br><span class="line">Leaks: 400</span><br><span class="line">Leaks: 500</span><br><span class="line">Leaks: 600</span><br><span class="line">Leaks: 700</span><br><span class="line">Leaks: 800</span><br><span class="line">Bus error (core dumped)</span><br></pre></td></tr></table></figure><p>调试步骤与上面一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ lldb-4.0 -c ./core</span><br><span class="line">(lldb) target create --core &quot;./core&quot;</span><br><span class="line">Core file &#x27;/home/nswbmw/test/./core&#x27; (x86_64) was loaded.</span><br><span class="line">(lldb) v8 findjsobjects</span><br><span class="line"> Instances  Total Size Name</span><br><span class="line"> ---------- ---------- ----</span><br><span class="line">        ...</span><br><span class="line">        800      32000 LeakingClass</span><br><span class="line">       7519      38512 (String)</span><br><span class="line"> ---------- ---------- </span><br><span class="line">       9440     126368</span><br></pre></td></tr></table></figure><h2 id="2-1-7-总结"><a href="#2-1-7-总结" class="headerlink" title="2.1.7 总结"></a>2.1.7 总结</h2><p>我们的测试代码很简单，没有引用任何第三方模块，如果项目较大且引用的模块较多，则 <code>v8 findjsobjects</code> 的结果将难以甄别，这时可以多次使用 gcore 进行 Core Dump，对比发现增长的对象，再进行诊断。</p><h2 id="2-1-8-参考链接"><a href="#2-1-8-参考链接" class="headerlink" title="2.1.8 参考链接"></a>2.1.8 参考链接</h2><ul><li><a href="http://www.cnblogs.com/Anker/p/6079580.html">http://www.cnblogs.com/Anker/p/6079580.html</a></li><li><a href="http://www.brendangregg.com/blog/2016-07-13/llnode-nodejs-memory-leak-analysis.html">http://www.brendangregg.com/blog/2016-07-13/llnode-nodejs-memory-leak-analysis.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 1.3 Tick Processor</title>
      <link href="/2019/04/01/1.3.1%20Tick%20Processor/"/>
      <url>/2019/04/01/1.3.1%20Tick%20Processor/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>V8 内置了一个性能分析工具——Tick Processor，可以记录 JavaScript&#x2F;C&#x2F;C++ 代码的堆栈信息，该功能默认是关闭的，可以通过添加命令行参数 <code>--prof</code> 开启。</p><h2 id="1-3-1-Tick-Processor"><a href="#1-3-1-Tick-Processor" class="headerlink" title="1.3.1 Tick Processor"></a>1.3.1 Tick Processor</h2><p>创建测试代码：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;)</span><br><span class="line"></span><br><span class="line">function hash (password) &#123;</span><br><span class="line">  const salt = crypto.randomBytes(128).toString(&#x27;base64&#x27;)</span><br><span class="line">  const hash = crypto.pbkdf2Sync(password, salt, 10000, 64, &#x27;sha512&#x27;)</span><br><span class="line">  return hash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.time(&#x27;pbkdf2Sync&#x27;)</span><br><span class="line">for (let i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">  hash(&#x27;random_password&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">console.timeEnd(&#x27;pbkdf2Sync&#x27;)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node --prof app</span><br><span class="line">pbkdf2Sync: 1375.582ms</span><br></pre></td></tr></table></figure><p>可以看出，执行 100 次 hash 函数总共用了 1375.585ms，并且当前目录下多了一个 isolate-xxx-v8.log 文件，该文件记录了 V8 的性能日志，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v8-version,6,1,534,50,0</span><br><span class="line">shared-library,&quot;/usr/local/bin/node&quot;,0x100001800,0x100bbb69a,0</span><br><span class="line">...</span><br><span class="line">code-creation,Function,18,111912,0x37d07c7246a8,144,&quot;hash /Users/nswbmw/Desktop/test/app.js:3:15&quot;,0x37d07c7076d0,~</span><br><span class="line">code-creation,LazyCompile,18,111927,0x37d07c7246a8,144,&quot;hash /Users/nswbmw/Desktop/test/app.js:3:15&quot;,0x37d07c7076d0,~</span><br><span class="line">code-creation,Function,18,112058,0x37d07c725690,80,&quot;exports.pbkdf2Sync crypto.js:686:30&quot;,0x37d07c70cb58,~</span><br><span class="line">code-creation,LazyCompile,18,112074,0x37d07c725690,80,&quot;exports.pbkdf2Sync crypto.js:686:30&quot;,0x37d07c70cb58,~</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>早期我们需要借助 <a href="https://www.npmjs.com/package/node-tick-processor">node-tick-processor</a> 这样的工具解析 v8.log，但 Node.js 在 v5.2.0 之后包含了 v8.log 处理器，添加命令行参数 <code>--prof-process</code> 开启。</p><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node --prof-process isolate-0x103000000-v8.log</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Statistical profiling result from isolate-0x103000000-v8.log, (1152 ticks, 44 unaccounted, 0 excluded).</span><br><span class="line"></span><br><span class="line"> [Shared libraries]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line"></span><br><span class="line"> [JavaScript]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line">      1    0.1%    0.1%  Function: ~Uint8Array native typedarray.js:158:31</span><br><span class="line">      1    0.1%    0.1%  Function: ~NativeModule.cache bootstrap_node.js:604:42</span><br><span class="line">      1    0.1%    0.1%  Function: ~Buffer.toString buffer.js:609:37</span><br><span class="line"></span><br><span class="line"> [C++]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line">   1023   88.8%   88.8%  T node::crypto::PBKDF2(v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;)</span><br><span class="line">     27    2.3%    2.3%  t node::(anonymous namespace)::ContextifyScript::New(v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;)</span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line"> [Summary]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line">      3    0.3%    0.3%  JavaScript</span><br><span class="line">   1105   95.9%   95.9%  C++</span><br><span class="line">      3    0.3%    0.3%  GC</span><br><span class="line">      0    0.0%          Shared libraries</span><br><span class="line">     44    3.8%          Unaccounted</span><br><span class="line"></span><br><span class="line"> [C++ entry points]:</span><br><span class="line">   ticks    cpp   total   name</span><br><span class="line">   1062   98.2%   92.2%  T v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">     13    1.2%    1.1%  T v8::internal::Runtime_CompileLazy(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line"> [Bottom up (heavy) profile]:</span><br><span class="line">  Note: percentage shows a share of a particular caller in the total</span><br><span class="line">  amount of its parent calls.</span><br><span class="line">  Callers occupying less than 1.0% are not shown.</span><br><span class="line"></span><br><span class="line">   ticks parent  name</span><br><span class="line">   1023   88.8%  T node::crypto::PBKDF2(v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;)</span><br><span class="line">   1023  100.0%    T v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">   1023  100.0%      Function: ~pbkdf2 crypto.js:691:16</span><br><span class="line">   1023  100.0%        Function: ~exports.pbkdf2Sync crypto.js:686:30</span><br><span class="line">   1023  100.0%          Function: ~hash /Users/nswbmw/Desktop/test/app.js:3:15</span><br><span class="line">   1023  100.0%            Function: ~&lt;anonymous&gt; /Users/nswbmw/Desktop/test/app.js:1:11</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>打印结果包含六部分：Shared libraries、JavaScript、C++、Summary、C++ entry points 和 Bottom up (heavy) profile。[JavaScript] 部分列出了 JavaScript 代码执行所占用的 CPU ticks（CPU 时钟周期），[C++] 部分列出了 C++ 代码执行所占用的 CPU ticks，[Summary] 列出了各个部分的占比，[Bottom up] 列出了所有 CPU 占用时间从大到小的函数及堆栈信息，小于 1% 的则不予显示。</p><p><strong>可以看出</strong>：88.8%的 CPU 时间都花在了 crypto.js 文件的 pbkdf2Sync 函数上，该函数在 app.js 第 3 行被调用，即我们的 hash 函数。</p><p><strong>解决方法</strong>：将同步的 pbkdf2Sync 改为异步的 pbkdf2。修改代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;)</span><br><span class="line"></span><br><span class="line">function hash (password, cb) &#123;</span><br><span class="line">  const salt = crypto.randomBytes(128).toString(&#x27;base64&#x27;)</span><br><span class="line">  crypto.pbkdf2(password, salt, 10000, 64, &#x27;sha512&#x27;, cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let count = 0</span><br><span class="line">console.time(&#x27;pbkdf2&#x27;)</span><br><span class="line">for (let i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">  hash(&#x27;random_password&#x27;, () =&gt; &#123;</span><br><span class="line">    count++</span><br><span class="line">    if (count === 100) &#123;</span><br><span class="line">      console.timeEnd(&#x27;pbkdf2&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node --prof app</span><br><span class="line">pbkdf2: 656.332ms</span><br></pre></td></tr></table></figure><p>可以看出，程序运行了 656.332ms，相比较于之前的 1375.585ms，性能提升了 1 倍。我们继续看下 v8.log 的分析结果，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ node --prof-process isolate-0x102802400-v8.log</span><br><span class="line">Statistical profiling result from isolate-0x103001a00-v8.log, (198 ticks, 19 unaccounted, 0 excluded).</span><br><span class="line"></span><br><span class="line"> [Shared libraries]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line"></span><br><span class="line"> [JavaScript]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line">      1    0.5%    0.5%  StoreIC: A store IC from the snapshot</span><br><span class="line">      1    0.5%    0.5%  Function: ~set native collection.js:149:4</span><br><span class="line">      1    0.5%    0.5%  Function: ~pbkdf2 crypto.js:691:16</span><br><span class="line">      1    0.5%    0.5%  Function: ~inherits util.js:962:18</span><br><span class="line">      1    0.5%    0.5%  Builtin: ArrayIteratorPrototypeNext</span><br><span class="line"></span><br><span class="line"> [C++]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line">     83   41.9%   41.9%  T ___kdebug_trace_string</span><br><span class="line">     31   15.7%   15.7%  t node::(anonymous namespace)::ContextifyScript::New(v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;)</span><br><span class="line">     14    7.1%    7.1%  T ___pthread_sigmask</span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line"> [Summary]:</span><br><span class="line">   ticks  total  nonlib   name</span><br><span class="line">      5    2.5%    2.5%  JavaScript</span><br><span class="line">    174   87.9%   87.9%  C++</span><br><span class="line">      3    1.5%    1.5%  GC</span><br><span class="line">      0    0.0%          Shared libraries</span><br><span class="line">     19    9.6%          Unaccounted</span><br><span class="line"></span><br><span class="line"> [C++ entry points]:</span><br><span class="line">   ticks    cpp   total   name</span><br><span class="line">     41   60.3%   20.7%  T v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">     17   25.0%    8.6%  T v8::internal::Runtime_CompileLazy(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line"> [Bottom up (heavy) profile]:</span><br><span class="line">  Note: percentage shows a share of a particular caller in the total</span><br><span class="line">  amount of its parent calls.</span><br><span class="line">  Callers occupying less than 1.0% are not shown.</span><br><span class="line"></span><br><span class="line">   ticks parent  name</span><br><span class="line">     83   41.9%  T ___kdebug_trace_string</span><br><span class="line"></span><br><span class="line">     31   15.7%  t node::(anonymous namespace)::ContextifyScript::New(v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;)</span><br><span class="line">     31  100.0%    T v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">     31  100.0%      Function: ~runInThisContext bootstrap_node.js:495:28</span><br><span class="line">     31  100.0%        Function: ~NativeModule.compile bootstrap_node.js:584:44</span><br><span class="line">     31  100.0%          Function: ~NativeModule.require bootstrap_node.js:516:34</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>可以看出，[Bottom up] 没有很多 ticks，而且不再有 pbkdf2 这种堆栈信息。</p><h2 id="1-3-2-Web-UI"><a href="#1-3-2-Web-UI" class="headerlink" title="1.3.2 Web UI"></a>1.3.2 Web UI</h2><p>V8 还提供了一个 Web 可视化工具来查看生成的 v8 日志。首先，将代码还原到使用 pbkdf2Sync 的版本，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node --prof app # 生成 isolate-0x103000000-v8.log</span><br><span class="line">$ node --prof-process --preprocess isolate-0x103000000-v8.log &gt; v8.json # 格式化成 JSON 文件</span><br><span class="line">$ git clone https://github.com/v8/v8.git # 克隆 v8 仓库</span><br><span class="line">$ open v8/tools/profview/index.html # 打开 V8 profiling log processor</span><br></pre></td></tr></table></figure><p>点击 “选择文件”，选择刚才生成的 v8.json 文件，点击 “Bottom up” 视图，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.3.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.3.1.png" alt="img"></a></p><p>有以下两点需要解释：</p><ol><li>图中的上半部分展示了 CPU 的 timeline，X 轴代表时间的流逝，Y 轴代表当前时间点不同部分占用 CPU 的比例，可以在 timeline 图表上单击左键不放，然后拖动，选择时间区间。</li><li>图中的下半部分展示了当前时间段内 CPU 占用比从大到小降序排列的函数，展开可查看堆栈信息。不同的颜色代表了不同的部分，点击任意一个函数，timeline 底部会展示该函数的执行时间分布。</li></ol><h2 id="1-3-3-参考链接"><a href="#1-3-3-参考链接" class="headerlink" title="1.3.3 参考链接"></a>1.3.3 参考链接</h2><ul><li><a href="https://github.com/v8/v8/wiki/V8-Profiler">https://github.com/v8/v8/wiki/V8-Profiler</a></li><li><a href="https://blog.ghaiklor.com/profiling-nodejs-applications-1609b77afe4e">https://blog.ghaiklor.com/profiling-nodejs-applications-1609b77afe4e</a></li><li><a href="https://stackoverflow.com/questions/23934451/how-to-read-nodejs-internal-profiler-tick-processor-output">https://stackoverflow.com/questions/23934451/how-to-read-nodejs-internal-profiler-tick-processor-output</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging, 1.2 How to use v8-profiler</title>
      <link href="/2019/03/23/1.2.1%20%E4%BD%BF%E7%94%A8%20v8-profiler/"/>
      <url>/2019/03/23/1.2.1%20%E4%BD%BF%E7%94%A8%20v8-profiler/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>我们知道 Node.js 是基于 V8 引擎的，V8 暴露了一些 profiler API，我们可以通过 <a href="https://github.com/node-inspector/v8-profiler">v8-profiler</a> 收集一些运行时数据（例如：CPU 和内存）。本节将介绍如何使用 v8-profiler 分析 CPU 的使用情况。</p><h2 id="1-2-1-使用-v8-profiler"><a href="#1-2-1-使用-v8-profiler" class="headerlink" title="1.2.1 使用 v8-profiler"></a>1.2.1 使用 v8-profiler</h2><p>创建测试代码：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const crypto = require(&#x27;crypto&#x27;)</span><br><span class="line">const Bluebird = require(&#x27;bluebird&#x27;)</span><br><span class="line">const profiler = require(&#x27;v8-profiler&#x27;)</span><br><span class="line">const Paloma = require(&#x27;paloma&#x27;)</span><br><span class="line">const app = new Paloma()</span><br><span class="line"></span><br><span class="line">app.route(&#123; method: &#x27;GET&#x27;, path: &#x27;/encrypt&#x27;, controller: function encryptRouter (ctx) &#123;</span><br><span class="line">  const password = ctx.query.password || &#x27;test&#x27;</span><br><span class="line">  const salt = crypto.randomBytes(128).toString(&#x27;base64&#x27;)</span><br><span class="line">  const encryptedPassword = crypto.pbkdf2Sync(password, salt, 10000, 64, &#x27;sha512&#x27;).toString(&#x27;hex&#x27;)</span><br><span class="line"></span><br><span class="line">  ctx.body = encryptedPassword</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.route(&#123; method: &#x27;GET&#x27;, path: &#x27;/cpuprofile&#x27;, async controller (ctx) &#123;</span><br><span class="line">   //Start Profiling</span><br><span class="line">   profiler.startProfiling(&#x27;CPU profile&#x27;)</span><br><span class="line">   await Bluebird.delay(30000)</span><br><span class="line">   //Stop Profiling after 30s</span><br><span class="line">   const profile = profiler.stopProfiling()</span><br><span class="line">   profile.export()</span><br><span class="line">     .pipe(fs.createWriteStream(`cpuprofile-$&#123;Date.now()&#125;.cpuprofile`))</span><br><span class="line">     .on(&#x27;finish&#x27;, () =&gt; profile.delete())</span><br><span class="line">   ctx.status = 204</span><br><span class="line">&#125;&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><p><code>GET /encrypt</code> 有一个 CPU 密集型的计算函数 crypto.pbkdf2Sync，<code>GET /cpuprofile</code> 用来收集 30s 的 V8 log 然后将其 dump 到一个文件中。</p><p>运行该程序，打开两个终端窗口。一个终端运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000/cpuprofile</span><br></pre></td></tr></table></figure><p>来触发 CPU profiling，然后另一个终端立即运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ab -c 20 -n 2000 &quot;http://localhost:3000/encrypt?password=123456&quot;</span><br></pre></td></tr></table></figure><p>来触发 CPU 密集计算。</p><p>最后生成 cpuprofile-xxx.cpuprofile 文件，该文件的内容其实就是一个大的 JSON 对象，大体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typeId&quot;: &quot;CPU&quot;,</span><br><span class="line">  &quot;uid&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;CPU profile&quot;,</span><br><span class="line">  &quot;head&quot;:</span><br><span class="line">   &#123; &quot;functionName&quot;: &quot;(root)&quot;,</span><br><span class="line">     &quot;url&quot;: &quot;&quot;,</span><br><span class="line">     &quot;lineNumber&quot;: 0,</span><br><span class="line">     &quot;callUID&quot;: 154,</span><br><span class="line">     &quot;bailoutReason&quot;: &quot;&quot;,</span><br><span class="line">     &quot;id&quot;: 1,</span><br><span class="line">     &quot;scriptId&quot;: 0,</span><br><span class="line">     &quot;hitCount&quot;: 0,</span><br><span class="line">     &quot;children&quot;: [ ... ] &#125;,</span><br><span class="line">  &quot;startTime&quot;: 276245,</span><br><span class="line">  &quot;endTime&quot;: 276306,</span><br><span class="line">  &quot;samples&quot;: [ ... ],</span><br><span class="line">  &quot;timestamps&quot;: [ ... ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 JSON 对象记录了函数调用栈、路径、时间戳和一些其他信息，samples 节点数组与 timestamps 节点数组中的时间戳是一一对应的，并且 samples 节点数组中的每一个值其实对应了 head 节点的深度优先遍历 ID。这里我们不深究每个字段的含义，先来看看如何可视化这些数据。</p><h2 id="1-2-2-方法-1——Chrome-DevTools"><a href="#1-2-2-方法-1——Chrome-DevTools" class="headerlink" title="1.2.2 方法 1——Chrome DevTools"></a>1.2.2 方法 1——Chrome DevTools</h2><p>Chrome 自带了分析 CPU profile 日志的工具。打开 Chrome -&gt; 调出开发者工具（DevTools） -&gt; 单击右上角三个点的按钮 -&gt; More tools -&gt; JavaScript Profiler -&gt; Load，加载刚才生成的 cpuprofile 文件。左上角的下拉菜单可以选择如下三种模式：</p><ol><li>Chart：显示按时间顺序排列的火焰图。</li><li>Heavy (Bottom Up)：按照函数对性能的影响排列，同时可以检查函数的调用路径。</li><li>Tree (Top Down)：显示调用结构的总体状况，从调用堆栈的顶端开始。</li></ol><p>这里我们选择 Tree (Top Down) 模式，按 Total Time 降序排列。可以看到有如下三列：</p><ol><li>Self Time：函数调用所耗费的时间，仅包含函数本身的声明，不包含任何子函数的执行时间。</li><li>Total Time：函数调用所耗费的总时间，包含函数本身的声明及所有子函数执行时间。即：父函数的 Total Time &#x3D; 父函数的 Self Time + 所有子函数的 Total Time。</li><li>Function：函数名及路径，可展开查看子函数。</li></ol><p>我们不断地展开，并定位到了 encryptRouter，如下图所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.2.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.2.1.png" alt="img"></a></p><p><strong>可以看出</strong>：我们定位到了 encryptRouter 这个路由，并且这个路由中 exports.pbkdf2Sync 占据了绝大部分 CPU 时间。</p><h2 id="1-2-3-方法-2——火焰图"><a href="#1-2-3-方法-2——火焰图" class="headerlink" title="1.2.3 方法 2——火焰图"></a>1.2.3 方法 2——火焰图</h2><p>我们也可以用火焰图来展示 cpuprofile 数据。首先全局安装 flamegraph 模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i flamegraph -g</span><br></pre></td></tr></table></figure><p>运行以下命令将 cpuprofile 文件生成 svg 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flamegraph -t cpuprofile -f cpuprofile-xxx.cpuprofile -o cpuprofile.svg</span><br></pre></td></tr></table></figure><p>用浏览器打开 cpuprofile.svg，如下所示：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.2.2.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.2.2.png" alt="img"></a></p><p><strong>可以看出</strong>：我们定位到了 app.js 的第 8 行，即 encryptRouter 这个路由，并且这个路由中 exports.pbkdf2Sync 占据了绝大部分 CPU 时间。</p><h2 id="1-2-4-方法-3——v8-analytics"><a href="#1-2-4-方法-3——v8-analytics" class="headerlink" title="1.2.4 方法 3——v8-analytics"></a>1.2.4 方法 3——v8-analytics</h2><p><a href="https://github.com/hyj1991/v8-analytics">v8-analytics</a> 是社区开源的一个解析 v8-profiler 和 heapdump 等模块生成的 CPU 和 heap-memory 日志的工具。它提供以下功能：</p><ul><li>将 V8 引擎逆优化或者优化失败的函数标红展示，并展示优化失败的原因。</li><li>在函数执行时长超过预期时标红展示。</li><li>展示当前项目中可疑的内存泄漏点。</li></ul><p>我们以上述第 2 个功能为例，使用 v8-analytics 分析 CPU 的使用情况。</p><p>首先，全局安装 v8-analytics：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i v8-analytics -g</span><br></pre></td></tr></table></figure><p>使用以下命令查看执行时间大于 200ms 的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ va timeout cpuprofile-xxx.cpuprofile 200 --only</span><br></pre></td></tr></table></figure><p>结果截图如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.2.3.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.2.3.png" alt="img"></a></p><p><strong>可以看出</strong>：我们依然能够定位到 encryptRouter 和 exports.pbkdf2Sync。</p><h2 id="1-2-5-参考链接"><a href="#1-2-5-参考链接" class="headerlink" title="1.2.5 参考链接"></a>1.2.5 参考链接</h2><ul><li><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution">https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution</a></li><li><a href="http://www.ebaytechblog.com/2016/06/15/igniting-node-js-flames/">http://www.ebaytechblog.com/2016/06/15/igniting-node-js-flames/</a></li><li><a href="https://cnodejs.org/topic/58b562f97872ea0864fee1a7">https://cnodejs.org/topic/58b562f97872ea0864fee1a7</a></li><li><a href="https://github.com/hyj1991/v8-analytics/blob/master/README_ZH.md">https://github.com/hyj1991/v8-analytics/blob/master/README_ZH.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node in Debugging 1.1 Perf + FameGraph</title>
      <link href="/2019/03/21/1.1.1%20perf/"/>
      <url>/2019/03/21/1.1.1%20perf/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nswbmw/node-in-debugging">Node in Debugging</a></p><p>当程序出现性能瓶颈时，我们通常通过表象（比如请求某个接口时 CPU 使用率飙涨）然后结合代码去推测可能出问题的地方，却不知道问题到底是什么引起的。如果有个一可视化的工具直观地展现程序的性能瓶颈就好了，幸好 <a href="http://www.brendangregg.com/">Brendan D. Gregg</a> 发明了火焰图。</p><p><a href="http://www.brendangregg.com/flamegraphs.html">火焰图</a>（Flame Graph）看起来就像一团跳动的火焰，因此得名。火焰图可以将 CPU 的使用情况可视化，使我们直观地了解到程序的性能瓶颈，通常要结合操作系统的性能分析工具（profiling tracer）使用，常见的操作系统的性能分析工具如下：</p><ul><li>Linux：perf, eBPF, SystemTap, and ktap。</li><li>Solaris, illumos, FreeBSD：DTrace。</li><li>Mac OS X：DTrace and Instruments。</li><li>Windows：Xperf.exe。</li></ul><h2 id="1-1-1-perf"><a href="#1-1-1-perf" class="headerlink" title="1.1.1 perf"></a>1.1.1 perf</h2><p><a href="http://www.brendangregg.com/linuxperf.html">perf_events</a>（简称 perf）是 Linux Kernal 自带的系统性能分析工具，能够进行函数级与指令级的热点查找。它基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析，常用于查找性能瓶颈及定位热点代码。</p><p>测试机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux nswbmw-VirtualBox 4.10.0-28-generic #32~16.04.2-Ubuntu SMP Thu Jul 20 10:19:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：非 Linux 用户需要用虚拟机安装 Ubuntu 16.04 和 <a href="mailto:&#x6e;&#x6f;&#x64;&#x65;&#64;&#x38;&#46;&#57;&#x2e;&#x34;">&#x6e;&#x6f;&#x64;&#x65;&#64;&#x38;&#46;&#57;&#x2e;&#x34;</a> 后进行后面的操作。</p><p>安装 perf：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install linux-tools-common</span><br><span class="line">$ perf # 根据提示安装对应的内核版本的 tools, 如下</span><br><span class="line">$ sudo apt install linux-tools-4.10.0-28-generic linux-cloud-tools-4.10.0-28-generic</span><br></pre></td></tr></table></figure><p>创建测试目录 ~&#x2F;test 和测试代码：</p><p><strong>app.js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;)</span><br><span class="line">const Paloma = require(&#x27;paloma&#x27;)</span><br><span class="line">const app = new Paloma()</span><br><span class="line">const users = &#123;&#125;</span><br><span class="line"></span><br><span class="line">app.route(&#123; method: &#x27;GET&#x27;, path: &#x27;/newUser&#x27;, controller (ctx) &#123;</span><br><span class="line">  const username = ctx.query.username || &#x27;test&#x27;</span><br><span class="line">  const password = ctx.query.password || &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">  const salt = crypto.randomBytes(128).toString(&#x27;base64&#x27;)</span><br><span class="line">  const hash = crypto.pbkdf2Sync(password, salt, 10000, 64, &#x27;sha512&#x27;).toString(&#x27;hex&#x27;)</span><br><span class="line"></span><br><span class="line">  users[username] = &#123; salt, hash &#125;</span><br><span class="line"></span><br><span class="line">  ctx.status = 204</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.route(&#123; method: &#x27;GET&#x27;, path: &#x27;/auth&#x27;, controller (ctx) &#123;</span><br><span class="line">  const username = ctx.query.username || &#x27;test&#x27;</span><br><span class="line">  const password = ctx.query.password || &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">  if (!users[username]) &#123;</span><br><span class="line">    ctx.throw(400)</span><br><span class="line">  &#125;</span><br><span class="line">  const hash = crypto.pbkdf2Sync(password, users[username].salt, 10000, 64, &#x27;sha512&#x27;).toString(&#x27;hex&#x27;)</span><br><span class="line"></span><br><span class="line">  if (users[username].hash === hash) &#123;</span><br><span class="line">    ctx.status = 204</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    ctx.throw(403)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><p>添加 –perf_basic_prof（或者 –perf-basic-prof）参数运行此程序，会对应生成一个 &#x2F;tmp&#x2F;perf-<PID>.map 的文件。命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ node --perf_basic_prof app.js &amp;</span><br><span class="line">[1] 3590</span><br><span class="line">$ tail /tmp/perf-3590.map</span><br><span class="line">51b87a7b93e 18 Function:~emitListeningNT net.js:1375</span><br><span class="line">51b87a7b93e 18 LazyCompile:~emitListeningNT net.js:1375</span><br><span class="line">51b87a7bad6 39 Function:~emitAfterScript async_hooks.js:443</span><br><span class="line">51b87a7bad6 39 LazyCompile:~emitAfterScript async_hooks.js:443</span><br><span class="line">51b87a7bcbe 77 Function:~tickDone internal/process/next_tick.js:88</span><br><span class="line">51b87a7bcbe 77 LazyCompile:~tickDone internal/process/next_tick.js:88</span><br><span class="line">51b87a7bf36 12 Function:~clear internal/process/next_tick.js:42</span><br><span class="line">51b87a7bf36 12 LazyCompile:~clear internal/process/next_tick.js:42</span><br><span class="line">51b87a7c126 b8 Function:~emitPendingUnhandledRejections internal/process/promises.js:86</span><br><span class="line">51b87a7c126 b8 LazyCompile:~emitPendingUnhandledRejections internal/process/promises.js:86</span><br></pre></td></tr></table></figure><p><strong>map 文件内容三列依次为</strong>：16进制的符号地址（symbol addresses）、大小（sizes）和符号名（symbol names）。perf 会尝试查找 &#x2F;tmp&#x2F;perf-<PID>.map 文件，用来做符号转换，即把 16 进制的符号地址转换成人能读懂的符号名。</p><p><strong>注意</strong>：使用 –perf_basic_prof_only_functions 参数也可以，但经尝试后发现生成的火焰图信息不全（不全的地方显示 [perf-<PID>.map]），所以这里使用 –perf_basic_prof。但是，使用 –perf_basic_prof 有个缺点，就是会导致 map 文件一直增大，这是由于符号（symbols）地址不断变换导致的，用 –perf_basic_prof_only_functions 可以缓解这个问题。关于如何取舍，还请读者自行尝试。</p><p>接下来 clone 用来生成火焰图的工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone http://github.com/brendangregg/FlameGraph ~/FlameGraph</span><br></pre></td></tr></table></figure><p>我们先用 ab 压测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl &quot;http://localhost:3000/newUser?username=admin&amp;password=123456&quot;</span><br><span class="line">$ ab -k -c 10 -n 2000 &quot;http://localhost:3000/auth?username=admin&amp;password=123456&quot;</span><br></pre></td></tr></table></figure><p>新开另一个终端，在 ab 开始压测后立即运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo perf record -F 99 -p 3590 -g -- sleep 30</span><br><span class="line">$ sudo chown root /tmp/perf-3590.map</span><br><span class="line">$ sudo perf script &gt; perf.stacks</span><br><span class="line">$ ~/FlameGraph/stackcollapse-perf.pl --kernel &lt; ~/perf.stacks | ~/FlameGraph/flamegraph.pl --color=js --hash&gt; ~/flamegraph.svg</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第 1 次生成的 svg 可能不太准确，最好重复几次以上步骤，使用第 2 次及以后生成的 flamegraph.svg。</p><p>有几点需要解释一下：</p><ul><li><p>perf record</p><ul><li>-F 指定了采样频率 99Hz（即每秒 99 次，如果 99 次都返回同一个函数名，那就说明 CPU 在这一秒钟都在执行同一个函数，可能存在性能问题）。</li><li>-p 指定进程的 pid。</li><li>-g 启用 call-graph 记录。</li><li>– sleep 30 指定记录 30s。</li></ul></li><li><p>sudo chown root &#x2F;tmp&#x2F;perf-3009.map，将 map 文件更改为 root 权限，否则会报如下错误：</p><blockquote><p>File &#x2F;tmp&#x2F;perf-PID.map not owned by current user or root, ignoring it (use -f to override). Failed to open &#x2F;tmp&#x2F;perf-PID.map, continuing without symbols</p></blockquote></li><li><p>perf record 会将记录的信息保存到当前执行目录的 perf.data 文件中，然后使用 perf script 读取 perf.data 的 trace 信息写入 perf.stacks。</p></li><li><p>–color&#x3D;js 指定生成针对 JavaScript 配色的 svg，即：</p><ul><li>green：JavaScript。</li><li>blue：Builtin。</li><li>yellow：C++。</li><li>red：System（native user-level, and kernel）。</li></ul></li></ul><p>ab 压测用了 30s 左右，用浏览器打开 flamegraph.svg，截取关键的部分如下图所示： <a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.1.1.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.1.1.png" alt="img"></a></p><h2 id="1-1-2-理解火焰图"><a href="#1-1-2-理解火焰图" class="headerlink" title="1.1.2 理解火焰图"></a>1.1.2 理解火焰图</h2><p>火焰图含义：</p><ul><li>每一个小块代表了一个函数在栈中的位置（即一个栈帧）。</li><li>Y 轴代表栈的深度（栈上的帧数），顶端的小块显示了占据 CPU 的函数。每个小块的下面是它的祖先（即父函数）。</li><li>X 轴代表总的样例群体。它不像绝大多数图表那样从左到右表示时间的流逝，其左右顺序没有特殊含义，仅仅按照字母表的顺序排列。</li><li>小块的宽度代表 CPU 的使用时间，或者说相对于父函数而言使用 CPU 的比例（基于所有样例），越宽则代表占用 CPU 的时间越长，或者使用 CPU 很频繁。</li><li>如果采取多线程并发运行取样，则取样数量会超过运行时间。</li></ul><p><strong>从上图可以看出</strong>：最上面的绿色小块（即 JavaScript 代码）指向 test&#x2F;app.js 第 18 行，即 <code>GET /auth</code> 这个路由。再往上看，黄色的小块（即 C++ 代码） node::crypto::PBKDF2 占用了大量的 CPU 时间。</p><p><strong>解决方法</strong>：将同步改为异步，即将 crypto.pbkdf2Sync 改为 crypto.pbkdf2。修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">app.route(&#123; method: &#x27;GET&#x27;, path: &#x27;/auth&#x27;, async controller (ctx) &#123;</span><br><span class="line">  const username = ctx.query.username || &#x27;test&#x27;</span><br><span class="line">  const password = ctx.query.password || &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">  if (!users[username]) &#123;</span><br><span class="line">    ctx.throw(400)</span><br><span class="line">  &#125;</span><br><span class="line">  const hash = await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    crypto.pbkdf2(password, users[username].salt, 10000, 64, &#x27;sha512&#x27;, (err, derivedKey) =&gt; &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(derivedKey.toString(&#x27;hex&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  if (users[username].hash === hash) &#123;</span><br><span class="line">    ctx.status = 204</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    ctx.throw(403)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure><p>用 ab 重新压测，结果用了 16s。重新生成的火焰图如下：</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.1.2.png"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.1.2.png" alt="img"></a></p><p><strong>可以看出</strong>：只有在左侧极窄的绿色小块可以看到 JavaScript 代码，红色的部分我们不关心也无法优化。那么，为什么异步比同步的 QPS 要高呢？原因是 Node.js 底层的 libuv 用了多个线程进行计算，这里就不再深入介绍了。</p><p>svg 火焰图的其他小技巧如下：</p><ol><li>单击任意一个小块即可展开，即被单击的小块宽度变宽，它的子函数也按比例变宽，方便查看。</li><li>可单击 svg 右上角的 search 按钮进行搜索，被搜索的关键词会高亮显示，在有目的地查找某个函数时比较有用。</li></ol><h2 id="1-1-3-红蓝差分火焰图"><a href="#1-1-3-红蓝差分火焰图" class="headerlink" title="1.1.3 红蓝差分火焰图"></a>1.1.3 红蓝差分火焰图</h2><p>虽然我们有了火焰图，但要处理性能回退问题，还需要在修改代码前后的火焰图之间，不断切换和对比，来找出问题所在，很不方便。于是 <a href="http://www.brendangregg.com/index.html">Brendan D. Gregg</a> 又发明了红蓝差分火焰图（Red&#x2F;Blue Differential Flame Graphs）。</p><p><strong>如下所示</strong>：红色表示增长，蓝色表示衰减。</p><p><a href="https://github.com/nswbmw/node-in-debugging/blob/master/assets/1.1.3.jpg"><img src="https://github.com/nswbmw/node-in-debugging/raw/master/assets/1.1.3.jpg" alt="img"></a></p><p>红蓝差分火焰图的工作原理如下：</p><ol><li>抓取修改前的栈 profile1 文件。</li><li>抓取修改后的栈 profile2 文件。</li><li>使用 profile2 来生成火焰图，这样栈帧的宽度就是以 profile2 文件为基准的。</li><li>使用 profile2 - profile1 的差异来对火焰图重新上色。上色的原则是：如果栈帧在 profile2 中出现出现的次数更多，则标为红色，否则标为蓝色。色彩是根据修改前后的差异来填充的。</li></ol><p>这样，通过红蓝差分火焰图，我们就可以清楚地看到系统性能的差异之处。</p><p>生成红蓝差分火焰图的流程如下：</p><ol><li><p>修改代码前运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo perf record -F 99 -p &lt;PID&gt; -g -- sleep 30</span><br><span class="line">$ sudo chown root /tmp/perf-&lt;PID&gt;.map</span><br><span class="line">$ sudo perf script &gt; perf_before.stacks</span><br></pre></td></tr></table></figure></li><li><p>修改代码后运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo perf record -F 99 -p &lt;PID&gt; -g -- sleep 30</span><br><span class="line">$ sudo chown root /tmp/perf-&lt;PID&gt;.map</span><br><span class="line">$ sudo perf script &gt; perf_after.stacks</span><br></pre></td></tr></table></figure></li><li><p>将 profile 文件进行折叠（fold），然后生成差分火焰图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ~/FlameGraph/stackcollapse-perf.pl ~/perf_before.stacks &gt; perf_before.folded</span><br><span class="line">$ ~/FlameGraph/stackcollapse-perf.pl ~/perf_after.stacks &gt; perf_after.folded</span><br><span class="line">$ ./FlameGraph/difffolded.pl perf_before.folded perf_after.folded | ./FlameGraph/flamegraph.pl &gt; flamegraph_diff.svg</span><br></pre></td></tr></table></figure></li></ol><p><strong>如上缺点是</strong>：如果一个代码执行路径完全消失了，那么在火焰图中就找不到地方来标注蓝色，我们只能看到当前的 CPU 使用情况，却不知道为什么会变成这样。</p><p>一种解决办法是：生成一个相反的差分火焰图，即基于 profile1 生成 profile1 - profile2 的差分火焰图。对应命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./FlameGraph/difffolded.pl perf_after.folded perf_before.folded | ./FlameGraph/flamegraph.pl --negate &gt; flamegraph_diff2.svg</span><br></pre></td></tr></table></figure><p>其中，–negate 用于颠倒红&#x2F;蓝配色。最终我们得到：</p><ul><li>flamegraph_diff.svg：宽度是以修改前的 profile 文件为基准，颜色表明将要发生的情况。</li><li>flamegraph_diff2.svg：宽度是以修改后的 profile 文件为基准，颜色表明已经发生的情况。</li></ul><p>总之，红蓝差分火焰图可能只在代码变化不大的情况下使用时效果明显，在代码变化较大的情况下使用时效果可能就不明显了。</p><h2 id="1-1-4-参考链接"><a href="#1-1-4-参考链接" class="headerlink" title="1.1.4 参考链接"></a>1.1.4 参考链接</h2><ul><li><a href="https://yunong.io/2015/11/23/generating-node-js-flame-graphs/">https://yunong.io/2015/11/23/generating-node-js-flame-graphs/</a></li><li><a href="http://www.brendangregg.com/perf.html">http://www.brendangregg.com/perf.html</a></li><li><a href="http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html">http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html</a></li><li><a href="https://linux.cn/article-4670-1.html">https://linux.cn/article-4670-1.html</a></li><li><a href="http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html">http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/09/flame-graph.html">http://www.ruanyifeng.com/blog/2017/09/flame-graph.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node in Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo: Update server automatically</title>
      <link href="/2018/05/20/Hexo-update-server-automatically/"/>
      <url>/2018/05/20/Hexo-update-server-automatically/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-update-the-Hexo-server-automatically"><a href="#How-to-update-the-Hexo-server-automatically" class="headerlink" title="How to update the Hexo server automatically:"></a>How to update the Hexo server automatically:</h2><p>Sometimes you may want to update your Hexo server after editing a post or creating a new one, here is how to use Browsersync to achieve that.</p><h3 id="Step-1-Install-the-Browsersync"><a href="#Step-1-Install-the-Browsersync" class="headerlink" title="Step 1: Install the Browsersync"></a>Step 1: Install the Browsersync</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install -g browser-sync</span><br></pre></td></tr></table></figure><h3 id="Step-2-Install-Hexo-plugin"><a href="#Step-2-Install-Hexo-plugin" class="headerlink" title="Step 2: Install Hexo plugin"></a>Step 2: Install Hexo plugin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install hexo-browsersync --save</span><br></pre></td></tr></table></figure><h3 id="Step-3-Start-your-Hexo-service"><a href="#Step-3-Start-your-Hexo-service" class="headerlink" title="Step 3: Start your Hexo service"></a>Step 3: Start your Hexo service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/01/02/hello-world/"/>
      <url>/2018/01/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
